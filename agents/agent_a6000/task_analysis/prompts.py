UPDATE_MEMORY_PROMPT = """你是智能记忆管理器，负责控制系统的记忆。
你可以执行四种操作：(1) 新增记忆 (ADD)、(2) 更新记忆 (UPDATE)、(3) 删除记忆 (DELETE)、(4) 不做改动 (NONE)。

根据上述四种操作，记忆内容将随之变化。

请将新检索到的事实与已有记忆进行比较。对每条新事实，决定是否：
- ADD：作为新的元素写入记忆
- UPDATE：用新事实更新已有记忆元素
- DELETE：删除已有记忆元素
- NONE：无需变动（事实已存在或与记忆无关）

具体操作指引如下：

1. **ADD（新增）**：若新检索到的事实包含记忆中未出现的新信息，则必须新增，并在 `id` 字段生成一个全新的 ID。
   **示例**
    - 旧记忆：
        [
            {"id": "0", "text": "用户是一名软件工程师"}
        ]
    - 新事实：["姓名是 John"]
    - 新记忆：
        {
            "memory": [
                {"id": "0", "text": "用户是一名软件工程师", "event": "NONE"},
                {"id": "1", "text": "姓名是 John", "event": "ADD"}
            ]
        }

2. **UPDATE（更新）**
    - 如果新事实与记忆中信息相同**但内容完全不同**，应执行更新。
    - 如果检索到的事实包含的信息与记忆中存在的元素传达的信息相同，则必须保留信息量最大的事实。
        例 (a) -- 如果内存中包含 "用户喜欢玩板球"，而检索到的事实是 "喜欢和朋友一起玩板球"，那么就用检索到的事实更新内存。
        例 (b) -- 如果记忆包含 "喜欢芝士披萨"，而检索到的事实是 "喜欢芝士披萨"，那么就不需要更新记忆，因为它们传达的是相同的信息。
    - 如果方向是更新记忆，那么就必须更新。
    - 更新时必须保持原 ID 不变，输出中的 ID 只能来自输入，**不得新生成 ID**。
   **示例**
    - 旧记忆：
        [
            {"id": "0", "text": "我非常喜欢奶酪披萨"},
            {"id": "1", "text": "用户是一名软件工程师"},
            {"id": "2", "text": "用户喜欢打板球"}
        ]
    - 新事实：["喜欢鸡肉披萨", "喜欢和朋友一起打板球"]
    - 新记忆：
        {
            "memory": [
                {
                    "id": "0",
                    "text": "喜欢奶酪和鸡肉披萨",
                    "event": "UPDATE",
                    "old_memory": "我非常喜欢奶酪披萨"
                },
                {
                    "id": "1",
                    "text": "用户是一名软件工程师",
                    "event": "NONE"
                },
                {
                    "id": "2",
                    "text": "喜欢和朋友一起打板球",
                    "event": "UPDATE",
                    "old_memory": "用户喜欢打板球"
                }
            ]
        }

3. **DELETE（删除）**
    - 若新事实与记忆信息相矛盾，则应删除。
    - 或者明确指令要求删除时，执行删除。
    - 删除时同样只能引用已有 ID，**不得新生成 ID**。
   **示例**
    - 旧记忆：
        [
            {"id": "0", "text": "姓名是 John"},
            {"id": "1", "text": "喜欢奶酪披萨"}
        ]
    - 新事实：["不喜欢奶酪披萨"]
    - 新记忆：
        {
            "memory": [
                {"id": "0", "text": "姓名是 John", "event": "NONE"},
                {"id": "1", "text": "喜欢奶酪披萨", "event": "DELETE"}
            ]
        }

4. **NONE（不变）**
    若新事实已包含在记忆中，或与记忆无关，无需任何改动。
   **示例**
    - 旧记忆：
        [
            {"id": "0", "text": "姓名是 John"},
            {"id": "1", "text": "喜欢奶酪披萨"}
        ]
    - 新事实：["姓名是 John"]
    - 新记忆：
        {
            "memory": [
                {"id": "0", "text": "姓名是 John", "event": "NONE"},
                {"id": "1", "text": "喜欢奶酪披萨", "event": "NONE"}
            ]
        }

**补充规则**
- **务必保持 `id` 的“类型”与“内容”完全一致**，例如不要把 `6` 写成 `"6"`。
- **若新旧事实语义一致（仅措辞或同义词变化），返回 `event = "NONE"`；只有信息冲突或补充细节时才使用 `UPDATE`。**
"""

custom_fact_extraction_prompt = """
请仅提取与系统指令、终端操作、运行结果、报错、系统状态等相关的事实信息。
以下是一些示例：

输入: Hi.
输出: {"facts" : []}

输入: 服务器已启动。
输出: {"facts" : ["服务器已启动"]}

输入: 执行命令：ls -l
输出: {"facts" : ["执行命令: ls -l"]}

输入: 终端输出：No such file or directory
输出: {"facts" : ["报错: No such file or directory"]}

输入: CPU 使用率 95%，系统负载过高。
输出: {"facts" : ["CPU 使用率 95%", "系统负载过高"]}

输入: 已成功安装 nginx。
输出: {"facts" : ["成功安装 nginx"]}

输入: 运行 python 脚本时报错：ModuleNotFoundError: No module named 'requests'
输出: {"facts" : ["运行 python 脚本报错: ModuleNotFoundError: No module named 'requests'"]}

请以如上所示的 json 格式返回所有与系统指令、终端操作、运行结果、报错、状态等相关的事实。
"""
