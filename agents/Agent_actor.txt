
4.1 overview

架构图\描述

层级指挥模式(协作方式)

![[智能体逻辑架构_v2 1.jpg]]

多智能体协作模式为层级指挥模式，任务解析Agent(系统决策智能体)负责解析任务，根据实际需要，生成任务执行有向图，其他Agent根据有向图规划执行任务，系统感知Agent用于获取系统状态，包括从可观测性时间序列数据库、系统日志数据库中获取当前或者历史的数据，另外还有可以与系统交互的系统状态专家Agent（系统状态Agent部署在一个核心服务器，可以获取slurm、存储的状态，也可以通过ssh与其他服务器进行交互，获取监控中没有存储的数据），异常分析Agent用于对系统感知agent发送的数据进行检测，识别出异常。具体执行流程：任务解析Agent（系统决策智能体）从用户交互窗口或者告警API得到任务，然后将自然语言描述的任务进行解析（TOT/COT）拆解生成DAG，并按顺序将任务分发给其他Agent，例如如果判断是通识任务，则直接将任务发给报告与协同Agent与LLM进行交互总结发回给任务解析Agent，任务解析Agent再发回给终端；如果是查询运维方法类任务，则需要查询运维知识库结合系统状态给LLM；如果判断是查询状态任务，则有系统感知Agent获取状态数据结合LLM简要分析返回，或者和监控联动，由Grafana返回图片；如果是故障原因分析任务，则经过系统状态、RAG联合判断，由策略规划Agent规划好策略，在和固定规则匹配后，由前端确认是否执行再执行；如果是指令执行任务，则分析执行后可能产生的结果，并向前端确认是否执行再执行；如果由告警API触发，则需要在规则和LLM推理联合决策。各Agent之间访问通过设定的双层通信协议，同时设计QOS和容错规则。最后还需要设定现实结果激励的知识库更新反馈机制，对于告警API触发的任务，若一段时间内告警恢复且没有新告警生成加入到知识库中，对于其他任务，若运维人员反馈帮助大,直接做为知识案例加入到知识库中。

4.2 agent角色划分
(api 语言交互)
协作工作场景：模拟超算运维场景
4.2.1 任务解析Agent(系统决策智能体)：{
输入：UI接口或告警API传输过来的自然语言；
功能：生成智能体工作DAG，并根据DAG，指挥其他Agent执行操作；
输出：将报告反馈Agent的反馈整合
部署位置：a6000
}
4.2.2 系统感知agent(专家智能体)： 
4.2.2.1 时间序列数据库专家
{
输入：其他Agent发过来的数据查询需求；
功能：TextToPromql，通过自然语言生成Promsql语句，和时间序列数据库交互，返回时间序列数据
输出：时间序列数据
部署位置：mn10
}
4.2.2.2 日志数据库专家
{
输入：其他Agent发过来的数据查询需求；
功能：TextToESDSL，通过自然语言生成ES的DSL语句，和日志数据库交互，返回日志数据集
输出：日志数据集
部署位置：mn10
}
4.2.2.3 系统状态专家
{
输入：其他Agent发过来的系统状态查询需求；
功能：生成读取shell代码
输出：格式化的脚本执行结果
部署位置：mn10
}
4.2.3 异常分析Agent(专家智能体)
4.2.3.1 日志异常检测智能体
{
输入：系统状态+日志集
功能：结合系统状态和日志集判断日志是否出现异常
输出：日志异常情况描述
部署位置：a6000
}
4.2.3.2 时间序列异常检测智能体
{
输入：系统状态+时间序列；
功能：结合系统状态和时间序列数据判断时间序列数据是否出现异常
输出：时间序列异常描述
部署位置：a6000
}
4.2.4 策略规划Agent(专家智能体)+RAG
{
输入：系统感知数据+异常判断数据
功能：通过系统状态和异常判断结果生成解决异常的策略，注意：如设置了硬性规则需要先匹配规则，没有规则的再由LLM规划，设置软规则，约束LLM的输出
输出：异常处理策略
部署位置：a6000
}
4.2.5 操作执行Agent(专家智能体：运维工程师)：
{
输入：策略规划Agent输出的执行策略
功能：估计执行策略的可能后果（LLM结合系统状态模拟执行结果），向前端反馈是否能够执行；如果是硬性规则则直接执行
输出：执行结果或结论
部署位置：mn10（考虑每个机柜的管理节点）
}
4.2.6 报告反馈Agent(专家智能体)
{
输入：其他Agent的输出
功能：整合输出，输出结论或者报告等
输出：输出结论或者报告
部署位置：a6000
}

推理机制：结合CoT（思维链）和ToT（思维树）的混合推理流程。
记忆管理：长期记忆（向量数据库）与短期记忆（上下文窗口）的协同策略，注意上下游Agent的集记忆需要混合。

4.3 参考场景
4.3.1 case study
4.3.1.1 RAG模式(时间缩短)
（1）当用户从语言模块发出问题，要求查询某个结点或某个核心软件的状态，返回状态，并分析状态下隐含的信息。例如：需要查询cn65的状态，agent会判断结点是哪种类型的结点，被哪个作业占用等等信息。
（2）当用户从语言模块发出问题，要求分析某种异常，并判断解决方法，agent通过查询知识库、网络信息等，分析异常情况，并输出可能的解决方法，如果方法明确，需要提示用户是否要执行？用户反馈可以执行再执行。
（3）当用户从语言模块发出问题，要求查询某些运维知识点，agent直接RAG反馈运维知识。
（4）当用户从语言模块发出问题，要求反馈当前系统状态，反馈grafana的监控界面图片。

4.3.1.2 自治模式
（1）有告警产生，通过API发送到agent，agent解析，执行执行操作。（分析当前负载，降低空调风机转速,大规模结点故障自动化处理）