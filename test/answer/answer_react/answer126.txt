根据工具返回的内容，总结和问题相关的信息如下：文本介绍了使用 `pestat` 和 `seff` 命令查看作业信息的方法。`pestat` 可用于查询作业的详细状态，支持按用户、分区、作业ID等条件筛选，并提供多种选项控制输出内容。`seff` 用于查看特定作业的运行数据，如状态、节点数、CPU 使用情况等。注意：普通账号仅能查看自身作业。同时，文本显示了多个进程的运行状态，其中大部分进程属于用户 liudj，进程名为 gerris2D 和 slurm_script，这些进程在高 CPU 使用率（100.0%）下运行，持续时间在 3 分钟左右。此外，还有多个 yhrun 和 bash 进程在低 CPU 使用率下运行，部分进程的 CPU 使用率为 0.0%。整体来看，系统中存在多个并行运行的计算任务。系统CPU使用率显示多个核心处于100%用户模式（us），表明高CPU负载。大部分CPU核心处于空闲状态（id），但部分核心有少量系统时间（sy）。内存使用情况显示有一定内存被使用，缓存较多。进程列表显示多个gerris2D进程占用100%CPU，表明这些进程正在大量消耗CPU资源。根据大模型自身的运维经验和指令，总结和问题相关的信息如下：查询用户提交的所有正在运行的作业并列出各作业所用的总核心数，通常需要结合作业调度系统的命令或接口来实现。例如，在 Slurm 系统中，可以使用 `squeue` 命令查看当前运行的作业，并通过 `scontrol` 或 `seff` 获取作业的详细信息，包括使用的节点数和核心数。如果用户权限受限，可能只能查看自己的作业。对于多核任务，可以通过统计每个作业的节点数和每节点的核心数来计算总核心数。如果作业分布在多个节点上，还需考虑节点之间的分配情况。1. 首先，使用 `pestat` 命令查询用户提交的所有正在运行的作业，具体指令为：`pestat -u <用户名>`，其中 `<用户名>` 替换为实际的用户名（如 user1）。此命令将列出所有与该用户相关的作业及其状态。2. 接着，针对每个作业，使用 `seff` 命令查看其详细信息，例如：`seff <作业ID>`，其中 `<作业ID>` 是从第一步中获取的作业标识符。此命令将显示作业的节点数、核心数、CPU 使用情况等关键数据。3. 最后，根据 `seff` 返回的数据，统计每个作业所用的总核心数。通常，每个作业的节点数乘以每节点的核心数即可得到总核心数。若作业分布在多个节点上，需确保所有节点的核心数都被计入。如果作业调度系统不支持直接获取总核心数，可手动计算并汇总所有作业的结果。如果当前状态不确定，建议进一步检查作业的详细日志或联系系统管理员确认作业的运行状态和资源分配情况。
