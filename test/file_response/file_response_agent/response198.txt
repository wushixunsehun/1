{
    "query": "TH-eX系统计算节点vm.overcommit_memory设置问题导致用户程序报malloc错误，如何修改设置？",
    "summaries": [
        "本文分析了计算节点多进程程序在内存充足情况下出现“cannot allocate memory”错误的原因。主要原因是Linux系统对内存的过量分配机制（overcommit），在使用`os.fork()`创建子进程时，虽然物理内存未满，但虚拟地址空间可能被耗尽，导致OOM错误。解决方案包括调整`/proc/sys/vm/overcommit_memory`参数或改用多线程程序。",
        "文本描述了一个存储不足的错误，提示需要增加 ML_MB 或使用 ML_LBASIS DISCARD=.TRUE. 来自动丢弃数据。另外，也可将 ML_ABN 复制到 ML_AB，并将 ML_EPS_LOW 增加 16 倍（但需保持 EPS_LOW < 1E-7），这可能更节省内存但精度降低。最后出现 \"I REFUSE TO\" 表示拒绝执行。",
        "用户在运行CASTEP算例时遇到内存不足的错误，导致无法写入临时文件。问题原因是单进程内存不够，需修改GATEWAY_TMP环境变量的路径至共享存储，以提供足够的磁盘空间。建议将配置文件ms_vars.sbd中的GATEWAY_TMP路径更改为具有足够空间的共享目录，避免使用本地tmp目录，以提升性能并防止错误。"
    ],
    "contents": [
        "RRRRRR = =RRRRRR- O            O RRRRRR                 #                 #                 #\nE                    RR          RR          0             Oo R R\nE                    R          RR          R 0             0 R          R               tHE            tHE            tHE\nEEEEEEE R            RR            R 0000000 R            R            tHE            tHE            tHE\nNot enough storage reserved for local reference configurations,\nplease increase ML_MB. If you intend to keep the current storage\nsize you may use ML_LBASIS DISCARD=.TRUE. to enable automatic\ndiscarding. Alternatively, copy ML_ABN to ML_AB and continue with a\n16 times increased ML_EPS_LOW (however, keep EPS_LOW<1E-7). This\nmay yield a more memory-efficient but potentially less accurate\nforce field.\n> I REFUSE TO",
        "【已解决】MS修改temp输出路径\n**标签**: MS；tmp\n**创建时间**: 2022-05-13 15:12:12\n**更新时间**: 2022-05-13 15:12:12\n**作者**: 李青峰\nError: ion_set_Q_at_origin_recip: failure to write recip_QO_save to page file\nCurrent trace stack:\nion_set_Q_at_origin_recip\nion_int_Q_at_origin_recip\nnlpot_calculate_d_real\nnlpot_calculate_d\nelectronic_prepare_H\nelectronic_minimisation\ncheck_elec_ground_state\ncastep\n运行用户上传的算例出现报错。\n原因: 单进程内存不够导致\n软件手册的解释\n根据选择的选项，CASTEP可能会使用大量磁盘空间来存储暂存文件。在并行CAsTEP作业执行期\n间，每个节点都会创建临时文件。 CASTEP使用环境变量GATEWAY_TMP的值作为保在这些文件\n的位置，此变量由share / bin / ms_vars.sbd设置，可以使用网关的Web界面进行更改。您应确保\n将在每个节点上使用的位置指向具有至少1 GB可用空间的文件系统。请注意，用于\nGATEWAY_TMP的./tmp选项对应于在实际作业目录中的头节点上使用公用文件空间来存储临时\n文件。这种安装会对Linux和群集的性能产生不利影响。如果将GATEWAY_TMP设置为在从节点安\n装的NFS的共享       -的位置，则可能会出现其他问题。如在Linux系统上安装Materials\nStudio中所述，此安装应使用硬安装在同步模式下完成。\n修改/THL6/home/lund/8.0/Accelrys/MaterialsStudio8.0/etc/Gateway/ms_vars.sbd\n中的GATEWAY_ TMP路径为共享存储",
        "上下文环境，也会尝试创建自己的`40GB`虚拟内存地址空间。因此，理论上在创建两个子进程之后，就会导致虚拟内存地址空间耗尽，进而导致进程创建失败，但在实际返回时，错误显示`Cannot allocate memory`信息。\n相关的内存地址空间分配信息可以通过`grep -i commit /proc/meminfo`查看，例如如下信息：\nCommitLimit:    73955212 kB\nCommitted_AS:   1230403 kB\n其中，`CommitLimit`代表当前系统**可以申请的总内存**，而`Committed_AS`代表当前**已经申请**的内存。\n在监测报错程序的内存开销时，就会发现，在报错时，`Commited_AS`的开销在超过`CommitLimit`的限制时，机会出现`Cannot allocate memory`错误。\n解决方案\n通过原因分析，我们可以发现，这个问题的出现主要是看系统对于内存空间申请和物理内存空间占用的管理策略问题。Linux默认是允许`memory overcommit`的，只要你来申请内存我就给你，寄希望于进程实际上用不到那么多内存，但万一用到那么多了呢？Linux设计了一个OOM killer机制挑选一个进程出来杀死，以腾出部分内存，如果还不够就继续。\n1. 解决方案1\n由系统管理员调整系统对于`overcommit`的处理策略，具体设置在`/proc/sys/vm/overcommit_memory`文件中，默认策略为`0`，可选的策略包括如下三种（[linux 内存分配限制,overcommit_memory 2](https://blog.csdn.net/qq_16097611/article/details/52816908)）：\n+ 0 — 默认设置。内核执行启发式内存过量使用处理，方法是估算可用内存量，并拒绝明显无效的请求。遗憾的是因为内存是使用启发式而非准确算法计算进行部署，这个设置有时可能会造成系统中的可用内存超载；\n+ 1 — 内核执行无内存过量使用处理。使用这个设置会增大内存超载的可能性，但也可以增强大量使用内存任务的性能；\n+ 2 — 内存拒绝等于或者大于总可用swap大小以及  overcommit_ratio指定的物理RAM比例的内存请求。如果您希望减小内存过度使用的",
        "【已解决】计算节点多进程程序cannot allocate memory问题原因分析\n**标签**: fork, 多进程, oom, out of memory\n**创建时间**: 2022-05-19 18:35:10\n**更新时间**: 2022-05-19 18:37:30\n**作者**: 傅浩\n**问题**：计算节点采用多进程运行程序时，出现free显示有足够内存，但是提示OOM问题，导致程序终止。\n问题描述\n之前在使用python处理数据时，处理代码用到了python的`multiprocessing`包里的进程池技术，但在底层调用`os.fork()`接口创建新的进程时，会出现`cannot allocate memory`错误信息，但是**实际上物理内存并没有用满**，导致程序执行失败。\n原因分析\n1. 系统内存分配机制\n在Linux系统中，对于物理内存的实际分配发生在读写操作时，需要触发系统的**缺页故障**，才能实际分配内存，在实际调用`malloc`类似操作时，在未对内存进行操作时，实际上并没有分配物理内存，而只是分配了一个虚拟地址空间。\n在得知系统对于内存分配的机制之后，就可以解释为什么调用`free`工具查看内存消耗时，显示有大量物理内存空闲，或者在调用`ulimit -a`时，发现`max memroy size`为不受限。\n2. 进程创建机制\n在调用系统`os.fork()`接口创建新的进程时，由于理论上进程具有独立性，因此，无法与创建其的父进程共享同一内存地址空间，需要创建相同与父进程相同的上下文执行环境，即也需要创建相同大小的虚拟内存地址空间，但是实际上并没有分配物理内存空间。例如：假设父进程需要消耗`40GB`内存空间，系统物理内存+swap空间共`120GB`，即地址空间大小为`120GB`，在执行`os.fork()`时，子进程会拷贝父进程的上下文环境，也会尝试创建自己的`40GB`虚拟内存地址空间。因此，理论上在创建两个子进程之后，就会导致虚拟内存地址空间耗尽，进而导致进程创建失败，但在实际返回时，错误显示`",
        "但也可以增强大量使用内存任务的性能；\n+ 2 — 内存拒绝等于或者大于总可用swap大小以及  overcommit_ratio指定的物理RAM比例的内存请求。如果您希望减小内存过度使用的风险，这个设置就是最好的。\n可以通过系统设置的方法，将`overcommit_memory`的设置修改为1，即可解决由虚拟内存地址空间需求超过实际物理内存空间导致的`Cannot allocate memory`错误信息，但是需要程序员自己了解自己的程序实际不会用到超过物理内存空间大小的内存，否则可能导致其他错误。\n2. 解决方案2\n将多进程程序修改为多线程程序，即可避免由于非必要内存空间分配导致的`OOM`错误。\n参考资料\n1. [内存不足：OOM](https://www.zhangzhuo.ltd/articles/2021/08/10/1628565705959.html)\n2. [linux - fork() failing with Out of memory error](https://ogeek.cn/qa/?qa=990926/)\n3. [linux 内存分配限制,overcommit_memory 2](https://blog.csdn.net/qq_16097611/article/details/52816908)\n4. [Linux内存充足会出现oom,LINUX内存OOM哪些事](https://blog.csdn.net/weixin_39869197/article/details/116697433)"
    ]
}