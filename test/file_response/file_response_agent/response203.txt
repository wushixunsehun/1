{
    "query": " 请简要描述3F上安装openFOAM的过程是什么？",
    "summaries": [
        "本文介绍了在hpc4平台上基于openfoam/7-gcc9.3.0-mvapich2环境安装库和求解器的步骤。首先加载环境模块，然后设置环境变量FOAM_USER_LIBBIN和FOAM_USER_APPBIN指向用户自定义路径。接着在指定目录下使用wmake命令分别编译安装库（如libinflowGen.so）和求解器（如scramjetLDReactingFoam）。整个过程适用于OpenFOAM的扩展开发与定制化应用。",
        "TH3F系统通过Spack安装OpenFOAM，尝试安装2.4.0和5.0版本。安装过程中遇到权限和系统兼容性问题，通过手动修改配置文件和补丁解决。2.4.0版本最终通过手动编译完成，但编译时间过长；5.0版本因系统不兼容需进一步调整。",
        "本文介绍了在EX系统上安装OpenFOAM-2306与precice的步骤。包括下载并编译eigen、petsc、precice等依赖库，配置模块环境，使用CMake进行编译安装。最后在OpenFOAM中安装precice插件，通过git克隆openfoam-adapter并执行编译，生成动态库文件。整个过程需注意模块加载、编译器版本及路径设置。"
    ],
    "contents": [
        "_ARCH_OPTION=64\n-        export WM_COMPILER_LIB_ARCH=64\n+    armv7l)\n+        WM_ARCH=linuxARM7\n+        export WM_ARCH_OPTION=32\n+        export WM_COMPILER_LIB_ARCH=32\nexport WM_CC='gcc'\nexport WM_CXX='g++'\nexport WM_CFLAGS='-fPIC'\n- wmake/rules/linux64Gcc/c   创建patch_new_c.patch补丁文件，拷贝到package.py所在目录\na/wmake/rules/linux64Gcc/c  2021-10-25 15:39:57.000000000 +0800\n+++ b/wmake/rules/linux64Gcc/c  2017-07-26 00:43:40.000000000 +0800\n@@ -2,9 +2,9 @@\ncWARN        = -Wall\n-cc          = gcc\n+cc          = gcc -m64\n-include $(DEFAULT_RULES)/c\n+include $(DEFAULT_RULES)/c$(WM_COMPILE_OPTION)\ncFLAGS      = $(GFLAGS) $(cWARN) $(cOPT) $(cDBUG) $(LIB_HEADER_DIRS) -fPIC\n- wmake/rules/linux64Gcc/c++   创建patch_new_c++.patch补丁文件，拷贝到package.py所在目录\na/wmake/rules/linux64Gcc/c++        2021-10-25 15:40:07.000000000 +0800\n+++ b/wmake/rules/linux64Gcc/c++        2017-07-26 00:43:40.000000000 +0800\n@@ -5,9 +5,9 @@\n# Suppress some warnings for flex++ and CGAL\nc++LESSWARN = -Wno-old-style-cast -Wno-unused-local-typedefs -Wno-",
        "【已解决】EX安装openfoam-2306-precice\n**标签**: precice;openfoam\n**创建时间**: 2024-08-21 16:30:47\n**更新时间**: 2024-08-21 16:30:47\n**作者**: 陈维耀\neigen-3.4.0\n下载：https://eigen.tuxfamily.org/index.php?title=Main_Page\nmodule purge\nmodule load GCC/9.5.0\nmodule load boost/1.74.0-gcc9.5\nmodule load fftw/3.3.10-gcc9.5\nmodule load blas/3.10.0-gcc9.5\nmodule load cmake/3.27.7\npv eigen-3.4.0.tar.bz2 | tar jxf -\ncd eigen-3.4.0/\ncmake -B build -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DFFTW_INCLUDES=/fs2/software/fftw/3.3.10-gcc9.5/include -DCMAKE_INSTALL_PREFIX=/fs2/software/eigen/3.4.0-gcc9.5.0\nmake install -C build -j16\npetsc-3.21.4\n下载：https://petsc.org/release/install/download/\nmodule purge\nmodule load GCC/9.5.0\nmodule load MPI/mpich/4.0.2-mpi-x-gcc9.5\nmodule load lapack/3.10.0-gcc9.5\npv petsc-3.21.4.tar.gz | tar xzf -\ncd petsc-3.21.4\n./configure with-cc=mpicc with-cxx=mpicxx with-fc=mpif90 with-debugging=0 COPTFLAGS='-O3 -march=native -mtune=native' CXXOPTFLAGS='-O3 -march=native -mtune=native' FOPTFLAGS='-O3 -march=native -mtune=native' with-blas-lib=/fs2/software/lapack/3.10.0-gcc9.5/lib/libblas.a with-lapack-lib=/fs2/software/lapack/3.10.0-gcc9.5/lib/liblapack.a prefix=/fs2/software/",
        "【已解决】基于hpc4上的openfoam/7-gcc9.3.0-mvapich2安装库和求解器\n**标签**: 无标签\n**创建时间**: 2022-07-13 17:48:42\n**更新时间**: 2022-07-13 17:49:04\n**作者**: 杜思慧\n**1. 加载环境**\nmodule add openfoam/7-gcc9.3.0-mvapich2\n**2. 修改环境变量**\n#openfoam/7-gcc9.3.0-mvapich2本身安装时配置了FOAM_USER_LIBBIN和FOAM_USER_APPBIN，安装时需要将这两个路径设置到用户自己的目录下\n#FOAM_USER_LIBBIN对应安装库的路径\nexport FOAM_USER_LIBBIN=/fs1/home/zhangsl/run/libInflowGen\n#FOAM_USER_APPBIN对应安装求解器的路径\nexport FOAM_USER_APPBIN=/fs1/home/zhangsl/run/scramjetLDReactingFoam\n**3. 安装库**\n#以安装libinflowGen.so为例，切换到相应目录\ncd /fs1/home/zhangsl/run/libInflowGen\nwmake libso\n**4.安装求解器**\n#以安装scramjetLDReactingFoam为例，切换到相应目录\ncd /fs1/home/zhangsl/run/scramjetLDReactingFoam\nwmake",
        "fs2/software/lapack/3.10.0-gcc9.5/lib/libblas.a with-lapack-lib=/fs2/software/lapack/3.10.0-gcc9.5/lib/liblapack.a prefix=/fs2/software/petsc/3.21.4-gcc9.5-mpi-x\nmake PETSC_DIR=/fs2/home/deploy/chenwy/software/pkgs/petsc-3.21.4 PETSC_ARCH=arch-linux-c-opt all -j16\nmake PETSC_DIR=/fs2/home/deploy/chenwy/software/pkgs/petsc-3.21.4 PETSC_ARCH=arch-linux-c-opt install\nprecice-3.1.2\n说明：需要编译器支持`c++17`，使用`intel`和`gnu`混编存在问题。\nmodule purge\nmodule load GCC/9.5.0\nmodule load MPI/mpich/4.0.2-mpi-x-gcc9.5\nmodule load boost/1.74.0-gcc9.5-mpi-x\nmodule load eigen/3.4.0-gcc9.5\nmodule load petsc/3.21.4-gcc9.5-mpi-x\nmodule load cmake/3.27.7\nsource activate py3.10\ngit clone https://github.com/precice/precice.git\ncd precice\ncmake -B build -DCMAKE_CXX_COMPILER=mpicxx -DCMAKE_BUILD_TYPE=Release -DEIGEN3_INCLUDE_DIR=/fs2/software/eigen/3.4.0-gcc9.5/include/eigen3 -DCMAKE_INSTALL_PREFIX=/fs2/software/precice/3.1.2-gcc9.5-mpi-x\nmake install -C build -j16\nopenfoam-adapter\n说明：这里在`openfoam`中安装`precice`插件，需要提前安装`openfoam-2306`，系统上使用`spack`安装，如需使用执行以下命令：\nsource /fs2/software/spack/spack-0.22/share/spack/setup-env.sh\nspack load /33azaxf\n安装\nmodule purge\nmodule load precice/3.1.2-gcc9.5-mpi-x\nsource /fs2/software/spack/spack-0.22/share/spack/setup-env.sh\nspack load /33azaxf\ngit clone https",
        "【已解决】TH3F系统基于spack安装OpenFOAM\n**标签**: TH3F,  OpenFOAM，spack\n**创建时间**: 2021-10-29 10:41:03\n**更新时间**: 2021-10-29 17:30:57\n**作者**: 李云龙\n**问题**：TH3F系统基于spack安装OpenFOAM\n问题\n用户使用需求，在Th3F系统安装OpenFOAM，先后安装2.4.0和5.0\n安装流程\n1.基于spack安装\n环境加载\nGCC8.3.0（2.4.0）\nGCC9.3.0（5.0）\n安装命令\n2.4.0：spack install openfoam-org@2.4.0%gcc@8.3.0^flex@2.6.4^help2man@1.47.11^cmake@3.20.5\n5.0.0：spack install openfoam-org@5.0%gcc@9.3.0^/gpkfiiv\n安装报错\n（1）报错：operation not permitted:/thfs1/software/spack/deb/liyl/linux-ubuntu20.04-aarch64\n解决：手动/thfs1/software/spack/deb/liyl/linux-ubuntu20.04-aarch64文件夹\n（2）报错：Error：InstallError：No wmake rule for linuxArm64 Gcc\n解决：程序不识别系统，通过spack补丁功能实现spack安装过程中自动修改对应配置文件，并添加到在package.py中\n- etc/config/settings.sh   创建patch_settings2.patch补丁文件，拷贝到package.py所在目录\na/etc/config.sh/settings    2021-10-25 14:18:25.000000000 +0800\n+++ b/etc/config.sh/settings    2021-10-25 11:06:41.000000000 +0800\n@@ -79,10 +79,10 @@\nexport WM_COMPILER=I64\n;;\n-    aarch64)\n-        WM_ARCH=linux64\n-        export WM_ARCH_OPTION=64\n-        export WM_COMPILER_LIB_ARCH=64\n+    armv7l)\n+        WM_ARCH=linuxARM7",
        "load precice/3.1.2-gcc9.5-mpi-x\nsource /fs2/software/spack/spack-0.22/share/spack/setup-env.sh\nspack load /33azaxf\ngit clone https://github.com/precice/openfoam-adapter.git\ncd openfoam-adapter\n./Allwmake\n以上命令会在下图所示文件夹中编译出`libpreciceAdapterFunctionObject.so`库文件，拷贝到`openfoam`相应位置或指定环境变量。\nThe adapter will be built into |/fs2/home/depLoy/0penFOAM/depLoy-v2306/pLatforms/Linux64GccDPInt32-spack/Lib\nAdditional preprocessor/compiler options:\nBuilding with WMake (see the wmake.log log file)...\\n\nwmake Libso (openfoam-adapter )\nEverything looks fine in wmake.log.\nEverything looks fine in ldd.log.\nOK: Building completed successfully!",
        "5,9 @@\n# Suppress some warnings for flex++ and CGAL\nc++LESSWARN = -Wno-old-style-cast -Wno-unused-local-typedefs -Wno-array-bounds\n-CC          = g++ -std=c++11\n+CC          = g++ -std=c++11 -m64\n-include $(DEFAULT_RULES)/c++\n+include $(DEFAULT_RULES)/c++$(WM_COMPILE_OPTION)\nptFLAGS     = -DNoRepository -ftemplate-depth-100\n- 直接进入源码文件手动编译\ntime ./spack-Allwmake 2>&1 | tee Allwmake.log\n时间过长，超过10个小时未编译完成，放弃\n2.手动安装-2.4.0\n基本信息\n官网：https://openfoam.org/download/2-4-0-ubuntu/\n源码下载：http://dl.openfoam.org/source/\nThirdParty-2.4.0\n配置文件\nexport MPI_ROOT=/thfs1/software/mpich/mpi-x-gcc4.9.3\nexport MPI_ARCH_FLAGS=\"-DMPICH_SKIP_MPICXX\"\nexport MPI_ARCH_INC=\"-isystem $MPI_ROOT/include/mpich\"\nexport MPI_ARCH_LIBS=\"-L$MPI_ROOT/lib -lmpi\"\nexport FOAM_INST_DIR=/thfs1/home/qixiang_vis/software\nfoamDotFile=$FOAM_INST_DIR/OpenFOAM-2.4.0/etc/bashrc\n[ -f $foamDotFile ] && . $foamDotFile\nexport WM_NCOMPPROCS=8\n编译\ntime ./Allwmake 2>&1 | tee Allwmake.log\n报错信息\n报错1：undefined reference to `yyFlexLexer::yywrap()'\n解答1：https://openfoamwiki.net/index.php/Installation/Linux/OpenFOAM-2.4.0/Ubuntu#Ubuntu_16.04 编号11\n#Go into OpenFOAM's main source folder\ncd $WM_PROJECT_DIR\n#Change"
    ]
}