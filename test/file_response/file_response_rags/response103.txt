{
    "query": "如何使用yhalloc获取资源后，通过yhacct实时查询该作业的记账数据，验证资源分配是否符合预期？",
    "summaries": [
        "yhacct 是资源管理系统中用于查看作业记账数据的命令，可显示作业、作业步、状态及退出代码等信息。默认显示所有用户作业（root 用户），非 root 用户仅显示自身作业。支持多种选项，如 --format 自定义字段、--user 或 --uid 过滤用户、--cluster 指定集群、--dump 转储原始数据等。部分系统可能因 getrusage() 信息不全导致数据为 0。可用字段包括 CPU 时间、内存使用、作业状态等，输出格式可调整。",
        "本文档介绍了yhalloc命令的多个选项，用于控制作业在资源管理系统中的执行和资源分配。主要功能包括：设置任务与CPU、socket、core或thread的绑定方式，指定每个任务所需的CPU数量，切换工作目录，独占节点，从文件获取节点列表，获取用户环境变量，设置作业名称，处理资源回收信号等。这些选项帮助用户更精细地控制作业的资源使用和执行行为，以优化性能和资源利用率。",
        "文本主要介绍了资源管理系统中yhacct和yhalloc命令的使用方法及相关记录类型的字段说明。yhacct用于显示作业和步骤的详细信息，包括启动时间、状态、CPU时间等，而yhalloc用于获取资源分配并执行命令。记录类型包括JOB_START、JOB_STEP和JOB_TERMINATED，每个类型包含多个字段，如作业ID、分区、状态、时间等。同时，还提到了如何定制输出字段和设置资源分配的约束条件。"
    ],
    "contents": [
        "list空格。缺省没有组限制。-h, --help显示帮助信息。-j，--jobs=7o0(.steD)六 (4B) 的信息。jobfstep) 参数为逗号能有空格。缺省为显示所有作业的信息。-l1, --long142ay WME Cae)令从指定的文件而不是系统配置的作业记账日志文件中读取数据。分隔的组名字或组 GID 列表，其中不列表，其中\n16.1. yhacct等价于指定 “--fields=jobid,jobname ,partition,maxVvsize ,maxVsiZzenode ，maxvsizetask,avevsize ,maxrss ,maxrssnode,maxrsstask,averss ,maxpages ，maxpagesnode ,maxpagestask, avepages ,mincpu,mincpunode ,mincputask,avecpu,ntasks ,alloccpus,elapsed,state,exitcode”.-L, --allclusters显示所有集群上的作业信息。缺省地，只有执行 yhacct 的集群上的作业信息被显示。-n, --noheader输出中不显示数据头。缺省显示数据头。当使用 --dump 时此选项无效。-N, --nodes=nodelist显示运行在指定节点上的作业信息。-o, --format=field_list和逗号分隔的字段列表《〈可用字段见 --helpformat ).注意: 可以在字段后跟“%NUMBER”以指定要输出多少个字符。例如，--format=jobname%30 将以右对齐显示 30 个字符的作业名字。”“-30”将以左对齐Py fr显示 30 个字符。-0, --formatted_dump以易读形式转储记账记录。此选项用于调试。-Pp，--parsabjle输出将以“|”分隔，结尾有“|”-P, --parsable2输出将以“|”分隔，结尾没有有“-r, --partition=part_list仅显示指定分区中的作业或作业步信息。缺省显示所有分区的作业。part_1st Ave号分隅的分区名字列表。-s, --state=state_ list仅显示指定状态的作业信息，状态代码如下:— r: running143\n资源管理系统手册— s: suspended— ca: cancelled— cd: completed— pd: pendingf: failed— to: timed out—",
        "列表，其中不能有空格。-1 表示所有集群。缺省为执行 yhacct 命令所在的集群。e -C，--cCompletion显示作业完成记录，而不是作业记账数据。。 -d, --dump转储原始数据记录。使用此选项时的数据输出请参见“解释 --dump 选项输出”一HeTHe --duplicates行资源管理系统作业 JobID 被重置，但是作业记账文件没有同时重置“比如使用 -e 选项)，则在记账日志文件中同一作业 JopID 可能出现多次，代表不同的作业。这些作业可以通过数据记录中的作业提区时间进行区别。当使用 --jobs 选项请求查看特定作业的数据时，将假定用户仅想要查看具有指定作业 ID 的最近的作业。此行为可被 --duplicates 选项覆盖，该情况下所有满足选择条件的记录数据都将被显示。e -e, —--helpformat输出可以通过 --format 指定的输出字段列表。可用的字段有:141\n资源管理系统手册AllocCPUS Account AssocIDAvePages AveRSS AveVMSizeCluster CPUTime CPUTimeRAWEligible End ExitCodeGroup JobID JobNameMaxPages MaxPagesNode MaxPagesTaskMaxRSSNode MaxRsSTask MaxVMSizeMaxVMSizeTask MinCPU MinCPUNodeNCPUS NNodes NodelistPriority Partition QOSReqCPUS Reserved ResvCPUStart State SubmitSystemCPU Timelimit TotalCPUUser UserCPU WCKey这些字段的描述请参见“作业记账字段”一节。-E, --endtime=endtimeAveCPUBlockIDElapsedGIDLayoutMaxRSSMaxVMSizeNodeMinCPUTaskNTasksQOSRAWResvCPURAWSuspendedUIDWCKeyID要显示的作业的开始时间不晚于指定时间。有效时间格式为: HH:MM[:SS][AM|PM]MMDD[YY],MM/DD[/YY],MM.DD[.YY],MM/DD[/YY]-HH:MM[:SS] 或YYYY-MM-DD[THH[:MM[:SS]]]-f, --file=file指示 yhacct 命仅在配置使用 accounting_storage/filetxt 插件时有效。-g, —-gid,Noe aN aE ZAR VELA. group_list Ais--group=group__list空格。缺省没有组限制。-h, --help显示帮助信息。-j，--jobs=7o0(.steD)六 (4B) 的信息。jobfstep) 参数为逗号能有空格。缺省为",
        "用于获取一个作业的资源分配，即一组节点，在请求资源时可以指定约束，如每点的处理圳数目。当成功得到分配的资源后，yhalloc 运行用户指定的命令。当用户命令执行结束后，释放所得到的资源。该程序可以是用户想要执行的任意程序。典型的程序包括 xterm，包含 yhrun 的Shell 脚本，或者 yhrun《〈参加“示例”一节)。如果没有指定命令，则执行系统配置文件中 SallocDefaultCommand 参数指定的程序。如果该参数没有设置，则运行用户的缺省Shell.e -A, --account=account将此作业使用的资源费用记在指定的帐号上。account 是任意字符串。帐号名字在作业提交后可以通过 yhcontrol 命令更改。。 --acctg-freq=seconds设置作业记账采样周期。用于乾凑配置文件中的 JobAcctGatherFrequency 参数。设置为 0 将芭止周期性的作业记账采样，仅在作业终止时获取记账数据《〈从而减少资源管理系统进程对作业的干扰)。。 -B, --extra-node-info=sockets|: cores| : threads]|请求在系统中分配特定资源，详细指定计算资源的数目和类型: 每节点的 socket《或物理处理器) 数，每 socket 的 core 数，以及每 core 的 thread 数。所请求的资源总数为所有项之积。类似于 --nodes，每个值可以是一个数字或者一个范围《〈即min-max). FEARS (*) 作为占位符，表示使用该类型的所有资源。也可以使用单独选项指定每一级别的需求:155\n资源管理系统手册— --sockets-per-node=sockets一 --cores-per-socket=cores一 --threads-per-core=threads当使用 task/affinity 插件时，以此方式指定分配资源将导致资源管理系统使用CPU 杀和掩码以保证请求被满足。注意: 这些选项的文持与配置相关。必须使用task/affinity 插件。另外必须使用 select/linear 或 select/cons_res 插件。如果使用select/cons_res 插件，它必须使用参数 CR_Core, CR_Core_Memory, CR_ Socket或 CR",
        "地请求 12 个处理器，则控制进程可能仅分配给 3 个节点。然而，通过使用 --cpus-per-task=3 选项，控制进程将知道每个任务需要同一节点上的 3 个处理器，并为 4 个任务分配 4 个节点。e -D, --chdir=path在执行命令之前将目录切换到 pathoe --exclusive此作业不能与其他运行的作业共享节点。此选项是 --share 的反义，哪个出现在命令行的最后哪个起作用。(缺省的 share/exclusive 行为与系统配置相关。)。 -F, --nodefile=node file159\n资源管理系统手册类似与 --nodelist，但是节点列表包含在文件 node file 中。列表中的文件名可以路多行。文件中的重复节点名将被忽略。列表中的节氮顺序不重要，节氮列表将科资源管理系统重新排序。。 --get-user-env|=timeout]|mode|此选项用于使 yhalloc 获取 --uid 所指定的用户的登录环境变量。环境变量通过运行“su - username -c /usr/bin/env”并分析输出的方法获取。请注症，yhalloc执行时的环境变量将比如此获取的环境变量更优先。如果不想被传递到加载的程序，请在运行 yhalloc 前清除相应的环境变量。可选的 timeout 值是秒数，缺省为 8秒。可选的 mode 值控制“su”的运行选项。mode 置为“S”时,“su”执行时没有“-”选项; mode 值为“L”时,“su”执行时有“-”选项，以复制登录环境。如果未指定 mode，则使用资源管理系统编译时的内置值。应用示例包括“--get-user-》” Kfs下二 o6 6env”, “--get-user-env=10”, “--get-user-env=10L”, “--get-user-env=S注意: 此选项仅在执行 yhalloc 的有效用户 UID W root NAR.。 -—-gid=group如果以 root 运行 yhalloc，且使用了 --gid 选项，则以 group 的",
        "仅在执行 yhalloc 的有效用户 UID W root NAR.。 -—-gid=group如果以 root 运行 yhalloc，且使用了 --gid 选项，则以 group 的组访问权限提交YENL. group 可以是组名字或数字的组 GID.。 -h, --help显示帮助信息并退出。。 —-hint=type根据应用提示进行任务绑定:一 compute_bound选择适合计算密集型应用的设置: 使用每个 socket 上的每个 core。一 memory_bound选择适合内存密集型应用的设置: 仅使用每个 socket 上的一个 core.— [no]multithreadLA | 使用 core 上额外的 thread，这可能对通信密集型应用有益。— help显示帮助信息。。 -I, --immediate|=seconds|如果资源在指定的时间内不能被满足则退出。如果没有指定秒数，则资源必须立即可用。缺省地，yhalloc 将阻喜等竺直到资源可用。160\n16.2. yhalloc-J, --job-name=jobname为作业指定名字。当和查看系统中的作业时，名字将和作业 JobID 一起显示。缺省的名字命令行指定的“commza7zd”。--jobid=jobid使用指定的 JobID 分配资源。注意: 仅对 root HR AR.-K, --kill-command|=siganl|yhalloc 在获取资源后总是运行用户指定的命令，并无穷等待直到该命令退出。如末指定了 --kill-command 选项，当资源管理控制进程通知 yhalloc 作业分配已被收回时，yhalloc 将向用户命令发送指定的信号。作业分配可能因几个原因被回收:有人使用 yhcancel 命令取消了作业，或作业到达运行时间限制等。如果没有指定aA MBE, Wika A SIGTERM.-k, --no-kill当分配给作业的节点失效时不要自动终止作业。用户需要自己在节点失效时进行容错。当发生节点失效时，运行在该节点上的活动作业步〈通各为 MPI 作业) 几乎肯定会发生致命错误;但是使用 --no-kill 时，分配给作业的节点不会被回收，从而用户可以在剩余的",
        "资源管理系统手册16.1 yhacct名字yhacct: 答看系统记账日志或记账数据库中的作业与作业步的记账数据ieyhacct [options]Fads资源管理系统中作业的记账信息被保存在作业记账日志文件或数据库中。yhacct 可以以各种形式显示日志文件或数据库中的作业记账数据，以进行分机。缺省地，yhacct 命令显示作业，作业步,作业状态和退出代码的信息。可以使用 --format=选项指定要显示的字段。对于 root 用户，yhacct 命令显示所有用户的作业记账数据，不过也可以使用过滤选项仅显示特定用户或特定组的作业信息。对于非 root 用户，yhacct 命令仅显示由其 UID 提交的作业的信息。其他用户的数据可通过 --all, --user 或 --uid 选项显示。个 yhacct 显示的很多数据是由 wait3() 和 getrusage() 系统调用收集的。在某些系统上这些系统调用收集的信息不完整; 这些缺失的数据 yhacct 将显示为 0。关于具体哪些信息可用，请参见系统上 getrusage(3) 的手册。如果指定了 -=-dump，则字段选择选项 (--brief, --format) 无效。elapsed 使用两个字段显示，秒数和微秒数。如果没有指定 --dump,则 elapsed ANA [[days-]hours:|minutes: seconds. hundredths.缺省的输入文件是系统配置文件中 JobAcctLogFile BA.e -a, --allusers显示当前用户的作业。当以 root 运行时显示所有用户的作业。e -A, --accounts=account_ listANTHEMS WIEN.140\n16.1. yhaccte -b, --brief显示简短列表，包合如下数据:一 jobid— status— exitcode在指定了 --dump 时此选项无效。e -C, --cluster=cluster list仅显示指定的集群上的作业的信息，cluster_1ist 为逗号分隔的集群名字列表，其中不能有空格。-1 表示所有集群。缺省为执行 yhacct 命令所在的集群。e -C，--cCompletion显示作业完成记录，而不是作业记账数据。。 -d, --",
        "CON DO oO FP WW WN HFjobpartitionsubmitted16.1.yhacct作业启动时间; 此值为从纪元〈1970-01-01T00:00:00 UTC) FAR HSE aK.uid.gid保留JOB_TERMINATED (字符串)作业记录版本《〈1)151\n资源管理系统手册101112131415161718192021222324252627282930dl记录中的字段数〈38)尽管 yhacct 对 JOB TERMINATED 记录类型显示 38 个字段，但是1 到 12 记录在实际数据文件中;其余字段由 yhacct 收集。作业运行的秒数end结束状态，大写或小写的助忆符，如下:。 CA: 被取消© CD: 成功结束© F: 失败。NF: 因节点失效而失败。BR: 运行中。S: 被挂起。 TO: 超时exitcodentasksncpuselapsed，整数表示的秒数所有进程的总 CPU 时间秒数的整数部分所有进程的总 CPU 时间秒数的小数部分所有进程的用户 CPU 时间秒数的整数部所有进程的用户 CPU 时间秘数的小数部所有进程的系统 CPU 时间秒数的整数部所有进程的系统 CPU 时间秒数的小数部分rss分分2ixrssidrssisrssminfltmajfltnswapinblocksoutblocks152只有\n32 msgsnd33 msgrcV34 nsignals35 NVCSW36 nivcsw37 vsize示例16.1. yhacctyhacct 的缺省输出。# yhacctJobnamescript0o1script02endscriptPartition AccountAllocCPUS State1 RUNNING1 RUNNING1 RUNNING1 COMPLETEDExitCode# yhacct --briefJobid StatusRUNNINGRUNNINGRUNNINGCOMPLETEDExitcode153\n资源管理系统手册显示作业的整体信息。# yhacct --allocationsJobname Partition Account AllocCPUS State ExitcodeCOMPLETEDsjaload COMPLETEDsja_scrl COMPLETEDsja_scr2 COMPLETEDsja_scr3 COMPLETEDSsja_scrs COMPLETEDsja_scr7/ COMPLETEDendscript COMPLETEDoF CO ON CO CO OO定制 yhacct 的输出。# yhacct --fields=jobid,ncpus,ntasks ,nsignals,statusElapsed Ncpus Ntasks StatusCOMPLETEDCOMPLETEDCOMPLETEDCOMPLETEDCOMPLETEDCOMPLETED154\n16.2. yhalloc16.2 yhalloc名字yhalloc: 获取一个作业资源分配〈一组节点)，执行一个命令，并在命令结束后释放分配的资源。ieyhalloc [options| [command [args]|fadsyhalloc 用于获取一个作业的资源分配，即一组节点，在请求资源时可以指定约束，如每点的处理圳数目。当成功得到分配的资源后，yhalloc 运行用户指定的命令。当用户命令执行结束后，释放",
        "数。因此，如果字段对为“1 024315”,则表示时间为 1.024315 秒。第二个字段的最低位将在显示时根据需要截断。JOB _ START 记录类型的输出yhacct --dump 的 JOB_START 类型记录的字段输出如下:序号”字段jobpartitionsubmitted作业启动时间; 此值为从纪元 (1970-01-01T00:00:00 UTC) 开始的非半秒数。uid.gid保留JOB START (字符串)作业记录版本《1)记录中的字段数〈16)uidOo BOaOnn oF WW YN FRHS pare ©gid12 作业名字13 Ab a CO 表示非批处理)14 相对优先级15 ncpus16 nodes149\n资源管理系统手册JOB_STEP 记录类型的输出yhacct --dump 的 JOB_STEP 类型记录的字段输出如下:上SO Oo 一 DD O8 KF WO WN Ff= aHS paNO oF13141516字段jobpartitionsubmitted作业启动时间; 此值为从纪元 (1970-01-01T00:00:00 UTC) FFaR IIE PD A.uid.gid保留JOB_STEP 〈字符串)作业记录版本《1)记录中的字段数〈38)jobidendARRAS; AEBS MMIC, BP:。 CA: 被取消。 CD: KINZo F: 失败NF: 因节点失效而失败。 R: 运行中。 S: 被挂起。 TO: 超时exitcodentasksncpuselapsed，整数表示的秒数150\n1718192021222324252627282930dl323334393637所有进程的总 CPU 时间秒数的整数部分所有进程的总 CPU 时间秒数的小数部分所有进程的用户 CPU 时间秘数的整数部分所有进程的用户 CPU 时间秘数的小数部HHHH分所有进程的系统 CPU 时间秒数的整数部分所有进程的系统 CPU 时间秒数的小数部分rssixrssidrssisrssminfltmajfltnswapinblocksoutblocksmsgsndMSgrcvnsignalsnvcswnivcswvsizeJOB _TERMINATED 记录类型的输出yhacct --dump 的 JOB_STEP 类型记录的字段输出如下:序号“字段CON DO oO FP WW WN HFjobpartitionsubmitted16.1.yhacct作业启动时间; 此值为从纪元〈1970-01-01T00:00:00 UTC) FAR HSE aK.uid.gid保留JOB_",
        "局部域选项，则每个 socket 被作为一个局部域。文持的选项值包括:— qluiet]SEB ISAT A PLA TE CRA)— vLlerbose]任务运行前报告绑和定情况一 no [nej]不绑定任务到 CPU CRE)— rank根据任务号自动绑定。0 号任务被绑定到 0 号 socket (2K core BK thread), FF.仅在整个节点分配给作业的情况下文持。一 map_cpu: list按照给出的列表将 CPU 映射到任务，其中 list 形如 cpuidd,cpuid1,...cpuidN .CPU ID 为十进制数，有前组“0x”时为十六进制数。仅在整个节点分配给作业的情况下文持。158\n16.2. yhalloc一 mask cpu: list按照给出的列表设置任务的 CPU #885, eA list 形如 mask0,mask1,...maskN .CPU 撞码总是十六进制数，前缀“0x”可选。— sockets自动生成把任务绑定到 socket WEIS. WARES MS AACN socket WAT, FY能导致非最优绑定。— cores自动生成把任务绑定到 core 的掩码。如果任务数与分配的 core 数不同，可能导致非最优绑定。— threads自动生成把任务绑定到 thread 的掩码。如果任务数与分配的 thread AA,可能导致非最优绑定。一 ldoms自动生成把任务绑定到 NUMA 局部域的掩码。如果任务数与分配的NUMA 局部域数不同，可能导致非最优绑定。— help显示帮助信息。。 -C, —-Cpus-per-task=ncpus告知资源管理系统控制进程，作业步的每个任务需要 ncpus 个处理器。知未指定此选项，则控制进程加你个尝试为每个任务分配一个处理需。例如，考虑一个 4任务的应用，每个任务需要 3 个处理器。如果系统由四处理器贡点组成，而我们简单地请求 12 个处理器，则控制进程可能仅分配给 3 个节点。然而，通过使用 --cpus-per-task=3 选项，控制进程将知道每个任务需要同一节点上的 3"
    ]
}