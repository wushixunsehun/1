{
    "query": "什么是 DoM（Data-on-MDT）机制？它对性能有什么帮助？",
    "summaries": [
        "Lustre 2.11 引入了 MDT 的 Lazy 大小 (LSoM) 功能，用于在 MDS 上存储文件大小信息，以减少客户端访问多个 OST 获取文件大小的开销。LSoM 数据可能不准确，但能提升性能。用户可通过 `lfs getsom` 命令查看 LSoM 数据，并通过 `lfs som_sync` 同步数据。LSoM 适用于策略引擎等场景，可加快文件大小获取速度。此外，Lustre 2.11 还引入了文件级冗余 (FLR)，允许将文件数据存储在多个 OST 上，提高系统容错性和读取性能。FLR 通过延迟写入实现，主镜像更新后，其他镜像需手动同步。",
        "该文本介绍了Lustre文件系统中DoM（Directory of Metadata）布局的设置和管理。首先，通过`lfs setstripe`命令可以为目录设置DoM布局，使得在此目录下创建的文件默认继承该布局。使用`lfs getstripe`可查看文件或目录的布局信息，包括组件大小、条带数量、条带大小、模式等。DoM组件的最大大小受多种限制，如Lustre的最小条带大小限制和MDT服务器的参数设置。此外，DoM布局允许将元数据分散到多个OST上，提高性能。",
        "MDS 可有效利用多 CPU 核，建议至少使用 4 个核，客户端多时应增加核数。Lustre 客户端可运行在不同字节序架构上，但需注意 PAGE_SIZE 匹配。MGT 存储需求小，需可靠存储，推荐 RAID1。MDS 存储适合低查找时间的 SSD 或 SAS，推荐 RAID1 配置。多个 MDT 时需合理分配负载，MDT0000 为根目录，不可用将导致文件系统失效。DNE 特性可将目录分散到多个 MDT 上，提升性能。OST 存储采用流 IO 模式，OSS 可管理多个 OST，容量为所有 OST 总和。OST 配置需考虑带宽平衡，RAID-6 可提高可靠性。MDT 和 OST 空间需求独立，创建文件会消耗 inode 和对象，格式化时需预估容量并预留空间。"
    ],
    "contents": [
        ":Imm pattern: mdtImm layout gen: 0Imm Stripe offset: 2Imm_ objects:lcome_id: 2lcme flags: 0lcome extent.e start: 1048576lome_extent.e end: EOFImm stripe count: 1Imm stripe size: 1048576Imm _ pattern: raid0OImm layout gen: 65535Imm stripe offset: -1我们可以看到该目录中的第一个文件 normfile 具有普通布局，而文件 domfile 继承了目录的默认布局，为 DoM 文件。注意尽管服务器的 DoM 大小限制会被设置成一个较低的值，该目录的默认布局设置仍会被新文件继承。20.2.3.DoM 条带大小限制DoM 组件的最大大小受到几种限制，以预防 MDT 最终被大文件填满。20.2.3.1. Lustre C/E AZ (LFS) 限制 1fs setstripe 允许将 MDT 布局的组件大小设置为 1GB, 但由于受 Lustre 中的最小条带大小所限〈见表 5.2\" 文件和文件系统限制\") ,其组件最大大小也只能为 64KB。同时，1fs setstripe -E end可以对每个文件有一个限制，如果对某一特定用途来说，这个限制可能小于 MDT 规定的限制。20.2.3.2.MDT 服务器限制 LOD 参数1odq.S$fsname-MDTxxxx.dqom stripesize 用于控制 DoM 组件的每个 MDT 的最大大小。如果用户指定的 DoM 组件较大，将被截断到MDT 指定的限制。因此，如果需要的话，每个MDT 上的 DoM 空间使用量可能不同，以获取平衡。它默认为 1IMB，可通过 lctl 工具进行更改。有关设置dom_stripesize的更多信息，请参见本章第 2.6 节\"dom stripesize 参数\"。247\nLustre 文件系统操作手册这ay20.2.4. 1fs getstripelfs getstripe 命令用于列出给定文件的分条/组件信息。对于 DoM 文件，以用来检查其布局和大小。1 lfs getstripe [--component-id|-I [comp_id]] [--layout|-L] \\2[--stripe-size|",
        "则有 50% 的概率使剩余的镜像失效。如果系统中存在多个 MDT，应根据预期情况为每个MDT 指定使用和负载。警告 MDT0000 含有 Lustre 文件系统的根上目录。如因任何原因无法使用MDT0000，则无法使用文件系统。注意使用DNE 特性，可以通过1fs mkdir -i mqt_index命令，将文件系统根目录下的子目录，或任意更低级别的子目录，从 MDT0000 下分离出来，存储在附加的MDT 上。如果服务于某子目录的 MDT 不可用，那么该 MDT 上的所有子目录及其下所有目录都将不可访问。通前，DNE 适用于将顶级目录分给不同的用户或项目，从而将他们分到不同的MDT 上。DNE 也适用于将其他大型文件工作集分布到多个 MDT 上。(在 Lustre 2.8 中引入) 从 2.8 版本开始，DNE 条带目录特性 (stripe_count 一般是文件系统中 MDT 的数量) 变得可用。可通过 1]名 mkdir -c stripe_count 命令，将单个大型文48\nLustre 文件系统操作手册 译者:As大件目录分散在多个 MDT 上。条闪化目录通前不会用在文件系统中的所有目录上，因为相较于非条带目录，它将产生额外开销。但是对于大型的目录 (超过 SOk 的条目) ，同时大量和输出文件，条帝化目录则会显出优势。5.1.2 OST 存储硬件OSS 存储的数据访问模式是流 IO 模式，它依赖于正在使用的应用程序的访问模式。每个 OSS 都可以管理多个对象存储目标 (0ST)，每个卷对应一个 0ST，以在服务天和目标之间实现 IO 流量负载平衡。为使网络带宽和附加存储带宽之间保持平衡，应合理配置 0SS，以防止 IO Ha. MRR A aE AY AN Ta], OSS 通彰服务于2到8 个目标，每个目标通常在 24-48TB 之间，但最高可达 256TB。Lustre 文件系统容量是存储目标容量总和。例如，64 + OSS, AEP OSS 含两个8TB 的OST，则可提供一个容量接近 1",
        "_id: 2lcome_ flags: 0lcome extent.e start: 1048576lome_extent.e end: KOFImm stripe count: -1Imm stripe size: 4194304Imm _ pattern: raid0OImm layout gen: 65535Imm stripe offset: -1上面的输出表明: 第一个组件大小为 1IMB，类型为mdt。第二个组件还未被示例化，见标志 LIcme flags: 0.如果有超过 IMB 的数据被写入文件，1fs getstripe 的输出也将相应地发生变101213化。client$ lfs getstripe /mnt/lustre/domfile/mnt/lustre/domfilelcm layout gen: 3lem mirror count: 1lem entry count: 2lcome_id: 1lome flags: initlcome extent.e start: 0lcome_extent.e end: 1048576Imm stripe count: 0Imm stripe size: 1048576Imm pattern: mdtImm layout gen: 0244\n141516171819202122232425262728—10Lustre 文件系统操作手册 译者:这ayImm stripe offset: 2Imm_ objects:lcome_id: 2Tcme flags: initlcome extent.e start: 10485764+lome_extent.e end: EOFImm stripe count: 2Imm stripe size: 4194304Imm pattern: raid0OImm layout gen: 0Imm stripe offset: 0Imm_ objects:- 0: { 1 ost_idx: 0, 1 fid: [0x100000000:0x2:0x0] }- 1: { 1 ost_idx: 1, 1 fid: [0x100010000:0x2:0x0] }如上所示，第二个组件有对象布置在 OSTs，条带大小为 4MB。20.2.2. 为现有目录设置 DoM 布局也可在现有目录上设置 DoM 布局。设置后，所有在此目录下创建的文件将默认继FE LEGA Jay olfs setstripe --component-end|-E endl --layout|-L mdt \\[--component-end|-E end2 [STRIPE OPTIONS] ...] <dirname>clientS mkdir /mnt/lustre/domdirclient$S touch",
        "MDS 可以有效地利用多 CPU 核，建议至少使用四个处理器核。对于有许多客户端的文件系统，建议使用更多核处理器。注意 Lustre 客户端可以运行在不同字节序的架构上，但有一个限制: 客户端上的PAGE _SIZE 内核安必须与服务器的 PAGE_SIZE FE. Bila, AA KG GRA 64kBTL) 的ia64 或PPC 客户端可以使用 x86 服务器 〈4kB 页) 和运行。如果使用 ia64 Bk PPC服务器运行 x86 客户机，则必须使用4kB PAGE SIZE 来编译 ia64 内核 〈服务句页面大小不大于客户端页面大小)。5.1.1 MGT 和 MDT 存储硬件MGT 存储需求很小〈即使在最大 Lustre 文件系统中也少于 100MB) ，MGT 上的数据仅在服务圳或客户端安装的时候被载入访问，所以不需要考虑磁盘性能。但其数据对于文件系统访问非溃重要，所以MGT 应使用可靠的存储，最好配置为镜像 RAID1。MDS 存储通过类似于数据库的访问模式进行访问，大多为少量数据的读写。因此，MDS 存储不需要高吞吐量，而适用低查找时间的存储类型，例如 SSD 驱动器或 NVMe驱动器最适合作为 MDT, high-RPM SAS 也可以接受。为了获得最大的性能，MDT 应该配置为由不同控制锅下的两个磁盘和一个内部日志组成的RAID1。如果需要更大的 MDT，可以创建由一对磁盘组成的多个RAID1 设备，然后使用这些RAID1 设备构建RAID0 阵列。对于 ZFS，可以在MDT 中使用镜像虚拟设备 VDEV。这确保了最大的可靠性，只有很小的几率出现多磁盘故障，即在同一个RAID1 设备中的两个磁盘同时故障。相反地 (构建一对RAID0 设备组成的RAID1) ，即使只有两个磁盘故障，也有 50%的可能性出现可导致整个MDT 数据丢失的情况。第一个故障使整个镜像的一半和失效，第二个故障则有 50% 的概率使剩余的镜像失效。如果系统中存在多个 MDT，应根据预期情况为每个MDT 指定使用和负载。警告 MDT0000 含有 Lustre 文件系统的根上目录。如因任何",
        "仍可以使用默认的 DoM 布局在现有目录中创建。(Lustre 2.11 中引入)第二十一章 MDT 的 Lazy 大小功能 (LSoM)21.1. 简介在 Lustre 文件系统中，MDS 上存储着 ctitme、mtime、所有者和其他文件属性。OSS上则存储着每个文件使用的块的大小和数量。要获得正确的文件大小，客户端必须访问存储文件的每个 OST，这意味着当一个文件在多个 OST 上分条时，需要使用多个 RPC来获取文件的大小和块。MDT 上的 Lazy 大小 (LSoM) 功能将文件的大小存储在 MDS上，如果应用程序能接受获取的文件大小不精准，则可以避免访问多个 OST 以获取文件大小。Lazy 意味着不能保证存储在 MDS 上的属性的准确性。由于许多 Lustre 安装环境都使用固态硬盘作为 MDT，因此 LSoM 的目标是通过将数据存储在 MDT 上来加快从 Lustre 文件系统获取文件大小所需的时间。我们和希望Lustre 策略引擎初始使用这一功能，以扫描后端 MDT 存储，或根据不同的大小做出诀策，且不依赖于完全准确的文件大小。类似的例子还包括 Lester, Robinhood, Zester 和供应商提供的许多工具。未来将改进为允许通过1fs finq等工具访问 LSoM 数据。21.2. 启动 LSoM当使用策略引擎扫搞 MDT fa SEN, LSoM 始终处于局用状态，不需要做任何操作来启用获取 LSoM 数据的功能。通过1fs getsom命令也可以访问客户端上的LSoM 数据。因为当前在客户端上通过 xattr 接口访问 LSoM 数据，所以只要缓存了索引251\nLustre 文件系统操作手册 译者: 李硕Tid, xattr_cache 就会在客户端上绥存文件大小和块计数。在大多数情况下，这是可行的，因为它改善了对 LSoM 数据的访问频率。但是，这也意味着，如果在首次访问 xattr后文件大小发生了变化，或者在首次创建文件后不久访问 xattr，LSoM 数据可能会过时。如果需要访问过时的最近 LSoM 数据，可以在客户端通过1ct1 set_param1dlm.namespaces.xmqdqcx.1LIru size=clear取消MDC 锁定，刷新",
        "endl --layout|-L mdt \\[--component-end|-E end2 [STRIPE OPTIONS] ...] <dirname>clientS mkdir /mnt/lustre/domdirclient$S touch /mnt/lustre/domdir/normfileclient$S lfs setstripe -E 1M -L mdt -E -1 /mnt/lustre/domdir/client$ lfs getstripe -d /mnt/lustre/domdirlcm layout gen: 0lem mirror count: 工lem entry count: 2lome_id: N/Alcome_ flags: 0lcome extent.e start: 0245\n121314151617181920—101213151617181920212223Lustre 文件系统操作手册这aylcome_extent.e end: 1048576stripe count: 0 stripe size:pattern: mdt stripe offset:lome_id: N/Alcme flags: 0lcome extent.e start: 1048576lome_extent.e end: EOFstripe count: 1pattern: raid0stripe size:stripe offset:-11048576 \\1048576 \\一工在上面的输出中，可以看到该目录具有仿 DoM 组件的默认布局。碍看该目录的文件布局:ClLients touch /mnt/lustre/domdir/domfileclient$ lfs getstripe /mnt/lustre/domdir/normfile/mnt/lustre/domdir/normfileImm stripe count: 2Imm _ stripe size: 1048576Imm pattern: raid0Jmm layout gen: 0Imm _ stripe offset: 1obdidx objid objid group1 3 0x30 3 0x3client$ lfs getstripe /mnt/lustre/domdir/domfile/mnt/lustre/domdir/domfilelcm layout gen: 2lem mirror count: 1lem entry count: 2lcome_id: 1lome flags: initlcome extent.e start: 0lcome_extent.e end: 1048576+Imm stripe count: 0+Imm stripe size: 1048576246\n2425262728293031323334353637这ayLustre 文件系统操作手册 译者:Imm pattern: mdtImm layout gen: 0Imm Stripe offset: 2Imm_ objects:lcome_id: 2lcme flags: 0lcome extent.e start: 1048576lome_extent.e",
        "创建文件后不久访问 xattr，LSoM 数据可能会过时。如果需要访问过时的最近 LSoM 数据，可以在客户端通过1ct1 set_param1dlm.namespaces.xmqdqcx.1LIru size=clear取消MDC 锁定，刷新 xattr 2. A则，如果在 LDLM 锁定超时前未访问文件，则将从客户端缓存中删除文件属性。通过LIct1l get param 1ldlm.namespaces.*mdc*.lru_max_ age储存锁定超时时长如果从特定客户端 (如 HSM 代理节点) 重复访问最近创建或频繁修改的文件的LSoM 属性，则可以使用lctl set param llite.*.xattr_ cache=0来禁用客户wi LAY xattr 缓存。但这可能会导致在访问文件时的额外开销，一般不建议使用。21.3. 用户命令Lustre 提供了1fs getsom命令以显示存储在 MDT 上的文件属性。11som_sync命令人允许用户将MDT 上的文件属性与 OSTs 上的有效或最新数据同步。可以在具有 Lustre 文件系统载入点的客户端上调用11som_sync命令。该命令使用Lustre MDS 变更日志，因此必须注册变更日志用户才能使用此命令工具。21.3.1 使用Lfs getsom显示 LSoM 数据lis getsom命令列出了存储在 MDT 上的文件属性。调用该命令需使用 Lustre 文件系统上文件的完整路径和文件名。如果没有使用选项，则存储在 MDS 上的所有文件属性都将显示出来。21.3.2 lfs getsom 命令1 1fs getsom [-s] [-b] [-f] <filename下面列出了各种 岂 getsom 选项。选项 说明-s ，仅显示给定文件的LSoM 数据的大小值。这是一个可选标志-pb ， 仅显示给定文件的LSoM 数据的块值。这是一个可选标志-£ ， 仅显示给定文件的 LSoM 数据的标志值。这是一个可选标志。有效的标志值有: SOM_FL_ UNKNOWN = 0x0000 ，表示未知或没有 SoM 数据，必须从 OSTS 获取大小; SOM _FL STRICT = 0x0001，表示已知且严格正确",
        "标志值有: SOM_FL_ UNKNOWN = 0x0000 ，表示未知或没有 SoM 数据，必须从 OSTS 获取大小; SOM _FL STRICT = 0x0001，表示已知且严格正确，252\nLustre 文件系统操作手册这aX选项”说明FLR 文件 (SOM 保证) ; SOM_FL_DEISE = 0x0002，表示已知但已过时，即在过去的某个时间点是正确的，但现在已知 (或可能) 不正确 (例如，打开进行写入); SOM_FL_LAZY = 0x0004，表示近似值，可能从未严格正确过，需要同步 SOM 数据以实现最终的一致性。第二十二章文件级元余 (ELR)22.1. 概述Lustre 文件系统最初就是为 HPC 而设计的，筷一直在具备内部元余性和容销性的高端存储上运行归好。然而，尽管这些存储系统的成本昂贵、结构复杀，存储必障仍然时有发生。事实上，在 Lustre 2.11 RA ZH, Lustre 文件系统并不比其底层的单个存储AUR ae LE EAT SE. Lustre 文件系统并没有机制能够缓解硬件存储改隐。当服务融无法访问或终止服务时，将无法访问文件。Lustre 2.11 中引入了 Lustre 文件级元余 (FLR) 功能，任何 Lustre 文件都可将相同的数据存储在多台 OST 上，以提升系统在存储故障或其它故障发生时的稳健性。在存在多个针像的情况下，可选择最合适的镜像来啊应单个请求，这对 IO 可用性有直接影啊。此外，对于许多客户闯同时读取的文件〈如输入版，共孚库或可执行文件)，可以通过创建文件数据的多个镜像来提高单个文件的并行聚合读取性能。第一阶段的FLR 功能通过延迟写入实现〈如\"图 21.1 FLR EIR GA\" 所示)。在写入镜像文件时，只有一个主镜像或首选镜像在写入过程中直接更新，而其他镜像将被标记为stale。通过使用命令行工具《由用户或管理员直接运行或通过目动监控工具运行)同步各镜像之间同步，该文件可在随后再次写入其它镜像。Object j (primary, preferred)delayed resync图 25: FLR delay writting图",
        "48TB 之间，但最高可达 256TB。Lustre 文件系统容量是存储目标容量总和。例如，64 + OSS, AEP OSS 含两个8TB 的OST，则可提供一个容量接近 1 PB 的文件系统。如果每个OST 使用10个 ITB 的SATA 磁盘 〈在RAID-6 配置中使用 8 个数据磁盘加 2 个校验磁盘) ，每个驱动器可达 50MB/秒的带宽，则每个 OST 则可达 400 MB/秒的磁盘人带宽。如果该系统被用作系统网络(县有类似带宽) 的存储后端，如 InfiniBand 网络，那么每个 0SS 可以提供高达 800MB/秒的端到端 IO 吞吐量。(这里摘述的架构限制很简单，但实际上需要慎重的硬件选择、基准测试和集成才能得到该结果。)5.2. 确定空间需求在想获得的后端文件系统性能特性上，MDT 和 OST 相互独立。MDT 后端文件系统的大小取雇于 Lustre 文件系统中所需的所有 inode 数量，而 OST 总空间大小取决于存储在文件系统上的数据总量。如果 MGS 数据须存储在 MDT 设备上 (同时位于 MGT 和MDT)，则应增加 100MB 到 MDT 的预估容量上。每当在 Lustre 文件系统上创建一个文件时，它就会消耗 MDT 上的一个inode，还有该文件条带所在的所有 OST 上的一个对象。通常，每个文件的条带数目继承于整个系统的黑认条齐数目，但单个文件的条读数可用 Ifs setstripe 选项进行设置。在 Lustre ldiskfs 文件系统中，所有 MDT 的索引节点和 OST 的对象在文件系统第一次格式化时进行分配。在文件系统使用过程中，创建一个文件，与该文件关联的元数据将被存储在预先分配的索引节点中，而不会占用任何用于存储文件数据的空亲空间。已格式化好的 ldiskfs MDT BK OST 上的索引和点总数不能被轻易更改。因此，在格式化时应创建足够多的索引节点，并预见到短期内的使用情况，预留一部分增长空间，以避免添加额外存储的麻烦。默认情况"
    ]
}