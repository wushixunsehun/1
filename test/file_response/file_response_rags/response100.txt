{
    "query": "在 Lustre 文件系统中，如何通过ost_tbf_nid_rule_start和ost_tbf_rule_change_rate参数配置 OST 服务的令牌桶过滤（TBF）策略以限制特定客户端的 RPC 请求速率？",
    "summaries": [
        "Lustre 文件系统中，通过 `lctl set param` 命令配置 TBF（Token Bucket Filter）规则，限制不同客户端或用户的 RPC 请求速率。规则支持按 NID、JobID、Opcode、UID/GID 等进行分类，并可设置普通请求（reg）或高优先级请求（hp）的速率上限。例如，可设置计算节点、登录节点或其他客户端的 RPC 速率，也可基于作业 ID 或用户 ID 进行限制。配置示例包括指定 NID 范围、JobID 模式、操作码等，以实现精细化的流量控制。",
        "Lustre 文件系统支持通过 TBF（Token Bucket Filter）规则控制 RPC 请求的速率，以实现 QoS 管理。可以使用 `lctl set param` 命令设置规则，例如限制特定 UID 或 GID 的请求速率，或根据操作码、Job ID、NID 等条件进行分类。规则支持逻辑运算符“&”（与）和“|”（或），并可对规则进行修改、停用和重新排序。新规则默认优先级较高，但可通过 `rank=` 参数调整顺序。",
        "本文档介绍了Lustre文件系统中NRS（Network Resource Scheduler）的TBF（Token Bucket Filter）规则配置、实时策略和延迟策略。TBF用于控制IO请求的速率，支持添加实时特性以确保高优先级请求的带宽分配。延迟策略通过模拟高负载来测试系统对时间敏感问题的处理能力，允许设置请求延迟的最小和最大时间范围。这些功能可通过lctl命令进行配置和调整。"
    ],
    "contents": [
        "OSS.ost_io.nrs tbf rule=\\\"reg start 1ozone_userl jobid-{iozone.500} rate=100\"。基于 Opcode HY TBF 策略命令:$ lctl set_param x.x.x.nrs_ tbf rule\"[reg|hp] start rule name opcode={opcode list} rate=rate\"示例:$ lctl set param ost.OSS.ost_io.nrs tbf rule=\\\"start userl opcode={ost read} rate=100\"$ lctl set param ost.OSS.ost_io.nrs tbf rule=\\\"start lozone_userl opcode={ost_read ost_write} rate=200\"规则也可使用 reg 和 Php格式进行描述:$ lctl set param ost.OSS.ost_io.nrs tbf rule=\\\"hp start 1ozone _userl opcode={ost_ read} rate=100\"$ lctl set param ost.OSS.ost_io.nrs tbf rule=\\\"reg start 1ozone_userl opcode={ost_read} rate=100\"。基于 UID/GID 的TBF 策略命令:$ lctl set param ost.OSS.*.nrs tbf rule=\\\"[reg] [hp] start rule name uid={uid} rate=rate\"$ lctl set param ost.OSS.*.nrs tbf rule=\\\"[reg] [hp] start rule name gid={gid} rate=rate\"示例:限制 uid 500 的 RPC 请求速率:$ lctl set param ost.OSS.*.nrs tpbf rule=\\ \"start tbf nameuid={500} rate=100\"限制 gid 500 AY RPC 请求速率:$ lctl set param ost.OSS.*.nrs_ tbf rule=\\\"start tof name gid={500} rate=100\"408\n——ULD—ULDNnnNOo\\101213Lustre",
        "相同速率限制的类获得的带宽要比预先均衡配置所获得得带宽要少。造成这种情况的原因是拥塞服务釉上的索重负载会导致某些类错过最后期限。在出列时，令牌的数量可能于 1。在最初的实现中，所有类都被平等对待，以罗松寺弃超额的令牌。随痢硬令牌补偿〈HTC) 策略的实施，我们使用 HTC 匹配的规则对类进行配置。个特性意味痢该类队列中的请求具有较高的实时性要求，必须尽可能满足市宽分配。错过最后期限时，该类保持最后期限不变，剩余的时间 〈剩余的流逝时间除以 1 将被补偿到下一轮。从而确保了下一个空闲 IO 线程始终选择此类来服务，直到所有累计的超额令牌处理完毕或该类队列中没有挂起的请求。命令:添加实时特性的新命令格式:lctl set param x.x.x.nrs tbf rule=\\\"start rule name arguments... realtime=1示例:$ lctl set_param ost.OSS.ost_io.nrs tbf rule\"start realjob jobid-{dd.0} rate=100 realtime=1在这个例子中，那些JopID 为 dd.0 的 RPC 将以 100 req/sec 的速率进行实时处理。(在Lustre 2.10 中引入)34.6.6. 延迟策略NRS 延迟策略旨在通过于扰 PtlRPC 层的请求处理时间来模拟高服务器负载，从而暴露与时间有关的问题。如果局用此策略，将在请求到达时计算应该开始处理请求的时间位移量，并人允许其在用户定义的范围内波动。然后使用cfs_binheap将请求按照分配的开始时间进行排序，并保存。一旦请求的开始时间已过，它将从 binheap 中移除以供处理。412\nLustre 文件系统操作手册 译者:这aX延迟策略可在所有类型的 PHURPC 服务上局用，有以下可用于调整其行为的可调参数:* {service}.nrs delay min{service}.nrs_delay_min 用于控制请求被此策略延迟的最短时间量 CLARA单位) 。默认值是 5 秒。读取此值运行:1 lcetl get Param {",
        "@lo}100, ref 0default * 10000, ref 0CPT 1:comp rule opcode={ost_write} &jobid= {dd.0},nid={192.168.1. [1-128]@tcp 0@lo}100, ref 0default * 10000, ref 0high priority requests:CPT 0:comp rule opcode={ost_write} &jobid= {dd.0},nid={192.168.1. [1-128]@tcp 0@lo}100, ref 0default * 10000, ref 0409\n141516———ULDNn——ULDLustre 文件系统操作手册 译者:这ayCPT 1:comp rule opcode={ost_write} &jobid= {dd.0},nid={192.168.1. [1-128]@tcp 0@lo}100, ref 0default * 10000, ref 0示例:$ lctl set param ost.OSS.*.nrs_ tbf rule=\\\"start tof name uid={500}égid={500} rate=100\"在这个例子中，那些uid为500且gid为500 fy RPC 将以100req/sec 的速率进行处理。34.6.5.3. 更改 TBF 规则 “命令:lctl Set Param x.x.x.nrs tbf rule=\"[reg|hp] change rule name rate=rate\"示例:$ lctl set param ost.OSS.ost_io.nrs tbf rule=\\\"Change loginnode rate=200\"$ lctl set param ost.OSS.ost_io.nrs tbf rule=\\\"reg change loginnode rate=200\"$ lctl set param ost.OSS.ost_io.nrs tbf rule=\\\"hp change lLoginnode rate=200\"34.6.5.4. 停用 TBF 规则“命令:lctl Set Param x.x.x.nrs tbf rule=\"[reg|hp] stoprule name\"示例:$ lctl set_param ost.OSS.ost_",
        "delay min{service}.nrs_delay_min 用于控制请求被此策略延迟的最短时间量 CLARA单位) 。默认值是 5 秒。读取此值运行:1 lcetl get Param {service}.nrs delay min例如，在 ost io 服务上读取最小延迟设置 :1 $ lct]l get Param ost.OSS.ost_io.nrs delay min2 ost.OSS.ost_io.nrs delay min=reg delay min:53 hp delay min:5设置 RPC 处理的最小延玉 :1 lctl set param {service}.nrs delay min=0-65535RORY tis DLA ie (EIEAR RPC 设置给定服务的最小延迟时间。例如，要将 ost_io 服务的最小延迟时间设置为 10，请运行:1 $ Ictl set Param ost.OSS.ost_io.nrs delay mir=102 ost.OSS.ost_io.nrs delay min=-10对于文持高优先级RPC 的 PHURPC 服务，可为前规和高优先级RPC 设置不同的最小延迟时间 :1 ， Jctl set param {service}.nrs delay min=reg delay min|hp delay min:0-65535例如，在 ost_io 服务上将高优先级 RPC 的最小延迟时间设置为3:1 $ Ictl set Param ost.OSS.ost_io.nrs delay min=hp delay min:32 ost.OSS.ost_io.nrs delay min=hp delay min:3请注意，在任何情况下最小延玉时间都不能超过最大延玉时间。* {service}.nrs delay max{service} .nrs_delay_max 用于控制请求被此策略延迟的最长时间量〈以秒为单位) 。默认值是 300 秒。读取此值运行:1 lctl get param {service}.nrs delay max例如，在 ost io 服务上读取最大延迟设置 :413\nLustre 文件系统操作手册 译者:这ay1 $ lctl get param",
        ".ost_io.nrs tbf rule=\\\"start lozone_userl opcode={ost_read ost write} rate=200 rank=computes\"在这个例子中，规则\"iozone_userl\" 被添加至规则\"computes\" 之前，顺序如下 :$ lctl get_param ost.OSS.ost_io.nrs tbf ruleost.OSS.ost_io.nrs tbf rule=regular requests:CPT 0:userl jobid=-{iozone.500 dd.500} 100, ref 0iozone_userl opcode={ost_read ost write} 200, ref 0computes nid-{192.168.1.[2-128]@tcp} 500, ref 0default * 10000, ref 0CPT 1:userl jobid=-{iozone.500 dd.500} 100, ref 0iozone_userl opcode={ost_read ost write} 200, ref 0computes nid-{192.168.1.[2-128]@tcp} 500, ref 0default * 10000, ref 0high priority requests:CPT 0:userl jobid=-{iozone.500 dd.500} 100, ref 0iozone_userl opcode={ost_read ost write} 200, ref 0411\n1Oo192021222324—N—NLustre 文件系统操作手册 译者:这aycomputes nid-{192.168.1.[2-128]@tcp} 500, ref 0default * 10000, ref 0CPT 1:userl jobid=-{iozone.500 dd.500} 100, ref 0iozone_userl opcode={ost_read ost write} 200, ref 0computes nid-{192.168.1.[2-128]@tcp} 500, ref 0default * 10000, ref 0“拥塞下的TBF 实时策略在评估 TBF 期间，我们发现当所有类的 IO 市寓需求总和超过系统容量时，有具有相同速率限制的类获得的带宽要比预先均衡配置所获得得带宽要少。造成这种情况的原因是拥塞服务釉上的索重负载会导致某些类错过最后期限。在出列时，令牌的数量可能于 1。",
        ":$ lctl set param ost.OSS.*.nrs_ tbf rule=\\\"start tof name gid={500} rate=100\"408\n——ULD—ULDNnnNOo\\101213Lustre 文件系统操作手册%my这ay您也可以使用以下的规则控制 MDS 上的请求。在 MDS 上启动 ttfuid QoS:$ Ictl set param mds.MDS.*.nrs_ policies=\"tbf uid\"限制 uid 500 的 RPC 请求速率:$ lctl set Param mds.MDS.*.nrs_ tbf rule=\\\"start tof name u1id={500} rate=100\"° Rll GIF为支持具有复杂条件表达式的 TBF 规则，可以使用 TBF 分类器以更细粒度的方式对 RPC 进行分类。此功能支持不同类型之间的逻辑操作。其中，\" &\" 代表条件与，\"\"代表条件或。示例:$ lctl set Param ost.OSS.ost_io.nrs tbf rule=\\\"start comp rule opcode={ost write} &jobid={dd.0}, \\nid={192.168.1.[1-128]@tcp O@1lo} rate=100\"在这个例子中，那些 opcode 为 ost write 且 jobid 为 dd 0，或 nidJE 192.168.1.11-1281@icp 0@lo} 条件的RPC 将以 100 req/sec 的速率进行处理。ost.OSS.ost_io.nrs tbf rule的输出类似于:$ lctl get_param ost.OSS.ost_io.nrs tbf ruleost.OSS.ost_io.nrs tbf rule=regular requests:CPT 0:comp rule opcode={ost_write} &jobid= {dd.0},nid={192.168.1. [1-128]@tcp 0@lo}100, ref 0default * 10000, ref 0CPT 1:comp rule opcode={ost_write} &jobid= {dd.0},nid={192.168.1. [",
        "50, ref 0default {*} 10000, ref 0规则也可使用*eg Al hp cle THe:$ lctl set param ost.OSS.ost_io.nrs tbf rule=\\\"reg start loginnode nid-{192.168.1.1@tcp} rate=100\"$ lctl set param ost.OSS.ost_io.nrs tbf rule=\\\"hp start loginnode nid~{192.168.1.1@tcp} rate=100\"。基于 JobID 的 TBF 策略命令:lctl Set Param x.x.x.nrs tbf rule=\"[reg|hp] start rule name jobid={jobid list} rate=rate\"SCHEAY Wildcard 显示在 {yobid_list} 中。示例:$ lctl set param ost.OSS.ost_io.nrs tbf rule=\\\"start 1ozone user jobid={iozone.500} rate=100\"$ lctl set param ost.OSS.ost_io.nrs tbf rule=\\\"start dd_user jobid=-{dd.*} rate=50\"$ lctl set param ost.OSS.ost_io.nrs tbf rule=\\\"Start userl jobid={*.600} rate=10\"$ lctl set param ost.OSS.ost_io.nrs tbf rule=\\\"start user2 jobid={io*.10* *.500} rate=200\"规则也可使用*eg Al hp cle THe:$ lctl set param ost.OSS.ost_io.nrs tbf rule=\\\"hp start 1ozone userl jobid={iozone.500} rate=100\"407\nios)——ULD—ULD—ULD—Lustre 文件系统操作手册 译者:这ay$ lctl set param ost.OSS.ost_io.nrs tbf rule=\\\"reg start 1ozone_userl jobid-{iozone.500} rate=100\"。基于 Opcode HY TBF 策略命令:$ lctl set_",
        "规则“命令:lctl Set Param x.x.x.nrs tbf rule=\"[reg|hp] stoprule name\"示例:$ lctl set_param ost.OSS.ost_io.nrs tbf rule=\"stop loginnode\"$ lctl set param ost.OSS.ost_io.nrs tbf rule=\"reg stop loginnode\"$ lctl set_param ost.OSS.ost_io.nrs tbf rule=\"hp stop loginnode\"34.6.5.5. FAME ASCE SUA BU, PSI SP eu:“ 将 TBF 规则重新排序410\n—ULD—ULDNn101213151617Lustre 文件系统操作手册 译者:默认情况下，新局用的规则优先于旧规则，但在使用\"start'\" 命令插入新规则时同时指定参数\"*ank =\"，可以更改规则的排序。此外，还可以通过\"change\" 命令更改规则的排序。命令:lctl set_ param ost.OSS.ost_io.nrs tof rule=teaX\"start rule name arguments... rank=cob] rule name\"lctl set_ param ost.OSS.ost_io.nrs tof rule=\"change rule name rate=rate rank=obj rule name\"i eR xe BO EAS BLM 'obj_rule_name', fj $I M'rule_name' 可被移至该条规Wl'obj_rule_name' 之前。示例:$ lctl set Param ost.OSS.ost_io.nrs tbf rule=\\\"start computes nlcFE{192.168.1.[2-128]atcp} rate=500\"$ lctl set param ost.OSS.ost_io.nrs tbf rule=\\\"start userl jobid={iozone.500 dd.500} rate=100\"$ lctl set param ost.OSS.ost_io.nrs tbf rule=\\\"start lozone_userl opcode={ost_read ost write} rate=200 rank=computes\"在这个例子中，规则\"iozone_userl\"",
        ".x.nrs tbf rule=2 \"[reg|hp] start rule name nid={nidlist} rate=rate\"'nidlist’ 的格式与配置LNET 路由相同。y7ate' 为该规则的 RPC 速率 (上限)。示例:1 $ lctl set param ost.OSS.ost_io.nrs tbf rule=\\2 \"start other clients nid-{192.168.*.*@tcp} rate=50\"3 $ lctl set param ost.OSS.ost_io.nrs tbf rule=\\4 \"start computes nicd~{192.168.1.[2-128]@tcp} rate=500\"5 $ lctl set param ost.OSS.ost_io.nrs tbf rule=\\6 \"start loginnode nicd-{192.168.1.1@tcp} rate=100\"在这个例子中，计算节点的 RPC 请求处理速率最大时是登录节点 RPC 请求处理速率的5倍。ost.0SS.ost io.nrs tbf rule 的输出类似于:1 lctl get Param ost.OSS.ost_io.nrs tbf rule2 ost.OSS.ost_10.nrs tbf rule=3 regular requests:4 CPT 0:406\nNnOo10——121314—ULD—Lustre 文件系统操作手册 译者:这ayloginnode {192.168.1.1@tcp} 100, ref 0computes {192.168.1.[2-128]@tcp} 500, ref 0other clients {192.168.*.*@tcp} 50, ref 0default {*} 10000, ref 0high priority requests:CPT 0:loginnode {192.168.1.1@tcp} 100, ref 0computes {192.168.1.[2-128]@tcp} 500, ref 0other clients {192.168.*.*@tcp} 50, ref 0default {*} 10000, ref 0规则也可使用*eg Al hp cle THe:$ lctl set param ost.OSS.ost_io.nrs"
    ]
}