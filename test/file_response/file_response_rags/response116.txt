{
    "query": "mdc_max_rpcs_in_flight和 osc_max_rpcs_in_flight参数的功能是什么？",
    "summaries": [
        "本文档介绍了Lustre文件系统中关于RPC批处理大小设置和基于对象的循环（ORR）策略的配置方法。1-65535用于设置服务上最大批处理大小，例如设置ldlm.canceld服务的最大批处理大小为16。对于高优先级RPC，可分别设置常规和高优先级的批处理大小。ORR策略用于批量读写RPC的调度，每个批次由相同后端文件系统对象的RPC组成，适用于ost_io服务。ORR策略通过按文件偏移量排序RPC来提高吞吐量。可调参数包括nrs_orr_quantum（确定最大批处理大小）、nrs_orr_offset_type（决定排序依据逻辑或物理偏移量）和nrs_orr_supported（确定处理的RPC类型）。这些参数可通过lctl命令进行设置和调整。",
        "TBF策略通过定义规则动态设置RPC队列的速率上限，无需手动配置每个队列。规则按顺序匹配，新规则优先级最高。TBF可基于NID、JOBID、OPCode、UID/GID等分类，支持精细控制。NRS Delay策略通过延迟请求处理模拟高负载，用于发现时间相关问题，参数包括nrs_delay_min、nrs_delay_max和nrs_delay_pct。OST和MDT服务可通过参数设置NRS策略，如tbf nid、delay等。设置方法涉及修改相关配置参数，以实现不同的调度策略。",
        "Lustre 文件系统中的 `sync_on_lock_cancel` 参数用于控制在锁取消时是否同步日志，以避免数据不一致。该参数可设置为 `always`、`blocking` 或 `never`。建议不要禁用此功能，以免数据损坏。此外，Lustre 提供了多个参数来优化客户端元数据 RPC 流，如 `max_rpcs_in_flight` 和 `max_mod_rpcs_in_flight`，用于控制并行元数据操作的数量，从而提升性能。同时，通过 `rpc_stats` 可以监控元数据 RPC 的执行情况，帮助调整参数以适应不同的工作负载。Lustre 还使用自适应超时机制来动态调整 RPC 超时时间，以提高系统稳定性。"
    ],
    "contents": [
        "RPC 进行排序。读取 ORR 策略的仿移类型 AIS一{Ty1 $ Ictl get param ost.OSS.ost_io.nrs orr offset type2 ost.OSS.ost_io.nrs orr offset _type=reg offset type:physical3 hp offset _type:logicalIRL (reg_offset_type) 和高优先级 (hp_offset type) RPC AAAS tints类型。设置 ORR 策略的侦移类型 ，运行:402\n11231Lustre 文件系统操作手册 译者:这ay$ lctl set param ost.OSS.ost_io.nrs orr offset _type=physical |logical这将设置常规和高优先级 RPC FY ib EE FS EE您还可以运行以下命令为毅规和高优先级 RPC 指定不同的侦移类型 :$ lctl set Param ost.OSS.ost_io.nrs orr offset type=reg offset _type|hp offset type:physical |logical例如，将高优先级 RPC AY iit ASC PEMA EE Wd ASE, TBAT:$ lctl set_paramost.OSS.ost_io.nrs orr offset _type-hp offset _type:physicalost.OSS.ost_io.nrs orr offset _type-hp offset _type:physicalHOU Ea TIA, EAT LEA a OS i A a CZK RPC 批处理最大大小设置为不同的值。注意无论此可调参数的值为什么，只有逻辑侦移量可以用于批量写入 RPC 的排序。。 ost.OSS.ost_10.nrs_ orr supportedost.OSS.ost_io.nrs orr supported 用于确定 ORR 策略处理的RPC 类型 ,读取 ORR 策略文持的RPC 类型，运行:$ lctl get_param ost.OSS.ost_io.nrs orr supportedost.OSS.ost_10.nrs orr supportec=reg_ supported: readshp_supported=reads_ and writesERAN, SEAT LG EEL ( reg_dquantum) 和高优先级 (hp_quantum)",
        "1-65535这将为解规和高优先级RPC〈如有果 PLRPC 服务文持高优先级 RPC) 设置给定服务上多许的最大批处理大小。例如，将1dlm_cance1d服务上允许的最大批处理大小设置为 16 ，请运行:1 $ lctl set Param ldlm.services.ldlm canceld.nrs_crrn_quantun=162 ldilm.services.ldim canceld.nrs_ crrn_quantune16对于文持高优先级 RPC AY PTLRPC 服务，您也可 CA UA ey LEZ RPC 指定不同的最大批处理大小:1 S letl set param {service} .nrs crrn_ quantum2 reg quantum|hp quantum:3 1-65535\"PUN, FEldlm_cancel dhkRH EK ey ICR RPC 批处理大小设置为 32:1 $ Ictl set Paramldim.services.ldlm canceldq.nrs_crrn cuantumrr'hp quantum: 32\"2 ldlm.services.ldim canceld.nrs crrn_ quantun=hp quantum: 32HOU Ea TIA, EAT LEA a OS i A a CZK RPC 批处理最大大小设置为不同的值。34.6.3. 基于对象的循环 (ORR) 策略基于对象的循环 (ORR) 策略对批量读写 (brw) RPC 的批量循环调度，每个批次由属于相同后端文件系统对象的RPC (由 OST FID 标识) 组成。ORR 策略仅适用于 ost_io 服务。RPC 批处理可能包含批量读取和批量写入 RPC.根据每个RPC 的文件偏移量或物理磁盘偏移量 〈仅适用于批量读取 RPC) ，每个批处理中的 RPC 按升序方式排序。ORR 策略旨在通过顺序读取批量 RPC (也可能包括批量写入RPC) 来增加革些情况下的批读取吞吐量，从而最大限度地减少昂贵的磁盘查找操作。任何资源利用率的改善或更好地利用 RPC 间的相对位置都可能有助于提升性能。401\n%my这Lustre 文件系统操作手册ayORR 策略有以下可用于调整其行为的可调参数 :。 ost.OSS.ost io.nrs_orr",
        "RPC 间的相对位置都可能有助于提升性能。401\n%my这Lustre 文件系统操作手册ayORR 策略有以下可用于调整其行为的可调参数 :。 ost.OSS.ost io.nrs_orr quantumost.OSS.ost_io.nrs orr quantum 用于确定RPC 的最大批处理大小，度量单位是 RPC 的数量。读取 ORR 策略允许的最大批处理大小，请运行:1 $ Ictl get Param ost.OSS.ost_io.nrs orr quantum2 ost.OSS.ost_io.nrs orr quantun=reg_ quantum: 2563 hp quantum: 16WEAN, Sa Wee (reg_quantum) 和高优先级 (hp_quantum) RPCs 有两个独立的最大批处理大小。设置 ORR 条略允许的最大批处理大小，运行:1 $ Ictl set param ost.OSS.ost_io.nrs orr quantun=2 1-65535这将为常规和高优先级 RPC 所人允许的最大批处理大小设置指定的大小。IBA LAH UA LIGA RPC 指定不同的最大允许批处理大小，请运行:1 $ Ictl set param ost.OSS.ost_io.nrs orr quantun=2 reg quantum|hp quantum:3 1-65535PUN, RTL RPC 的最大批处理大小设置为 128 ，请运行1 $ Ictl set param ost.OSS.ost_io.nrs orr quantumereg_quantum:1282 ost.OSS.ost_io.nrs orr quantun=reg_quantum:128i a TIE, RAT EAE PS SA A ea SCZ RPC 批处理最大大小设置为不同的值。* ost.OSS.ost_10o.nrs_ orr offset typeost.OSS.ost_io.nrs orr offset type 用于确定ORR 策略是基于逻辑文件偏移量还是物理磁盘侦移量对每批次 RPC 进行排序。读取 ORR 策略的仿移类型 AIS一{Ty1 $ Ictl get param ost.OSS.ost_io.nrs orr offset type2 ost.OSS.ost_io",
        "max rpcs in flight 参数定义了客户端并行发送到 MDT 目标的元数据 RPC 的最大数量，包括更改和不更改文件系统的RPC。这包含了所有文件系统元数据操作，如文件或目录统计、创建、取消链接等。其默认值为8，最小值为1，最大值为 256。在 Lustre 客户端上运行以下命令设置max rpcs in flight Bx:client$ lctl set param mdc.*.max tpcs in flight=16MDC ji) max_mod_rpes_in_flight 参数定义了客户端并行发送到 MDT 目标的更改文件系统的RPC 的最大数量。例如，Lustre 客户端在执行文件或目录创建、取消链接、访问权限修改、所有权修改时会发送更改式 RPC。其默认值为7，最小值为1，节KIBYA 256.在 Lustre 客户端上运行以下命令设置max mod _rpcs in flight BR:client$ lctl set param mdc.*.max_mod_rpcs in flight=12max mod rpcs in flignt值必须比max_ rpcs in flight 值小 同时也必须小于或等于MDT 的 max_mod_rpcs_per_client 值。如果未满足其中一个条件，设置将失败，并在 Lustre 日志中写入明确的错误消息。498\n1—23456101213141516171819Lustre 文件系统操作手册 译者:这ayMDT 的 max mod_rpcs per client参数是内核模块mdt的可调参数，它定义了每个客户问所允许的处理中的最大更改式 RPC 数量。该参数可以在运行时进行更新，但此更改仅对新客户端连授有效。其默认值为8。在 MDS 上运行以下命令设置max mod rpcs per client Bx:mds$ echo 12 > /sys/module/mdt/parameters/max mod_rpcs per client39.4.5.2. 客户端元数据 RPC PEGE rpc_stats 文件包含了显示更改式 RPC 相关信息的直方图，可用于确定应用程序执行更改文件系统的元数据操作时所实现的并行级sl).示例:client$ lctl get param mdc.*.rpc_ statssnapshot time:",
        "此时，除了RPC处理速率低于配置值外，不会有其他负面影响。在这种情况下，配置速率较高的队列将比配置较低的队列拥有较高的优先级，但不会有队列被钱死。在管理队列的RPC速率时，无需手动设置每个队列的速率，而可以通过定义规则，由TBF策略匹配来确定RPC队列的速率上限。所有定义的规则形成一个有序列表。每当创建一个新队列时，会遍历规则列表，将第一个匹配的规则作为队列的规则，这样队列就获得了自己匹配RPC念牌发放速率。在运行时，规则可以动态加入规则列表，或从规则列表中删除。每当规则列表发生变动，RPC队列将更新其匹配的规则。目前，RPC的分类可以基于RPC的NID、JOBID、OPCode和UID/GID。当启用TBF策略时，可以选用其中一种类型，或者直接使用 tbf 来启用基于上述所有属性共同分类，以进行精细的RPC请求分类。以下为TBF可选的分类类型。o tbf nid: 基于客户端的NID进行分类。e tbfjobid: 基于RPC的joblDs进行分类。o tbf opcode: 基于RPC的操作码类型进行分类。o tbf uid: 基于RPC的用户ID进行分类。o tbf gid: 基于RPC的组ID进行分类。作者: 李希 更新时间: 2023年6月7日\nLustre 可调参数全解TBF策略提供了可调参数 nrs_tbf_ rule 来定义TBF规则。e delay: NRS Delay策略的功能是扰乱PTLRPC层的请求处理时间，以模拟服务器的高负载，从而发现和暴露与时间有关的问题。局用该策略后，当一个请求到达时，PTLRPC将延迟一段时间才开始处理该请求。这个从请求到达时间到开始处理的延迟，处在一个用户可自定义配置的学围内，由NRS策略计算生成。生成请求延IRIS, NRS Delay策略将请求存储在一个名为cfs_binheap的二插堆数据结构中，二插堆会根据请求开始时间对请求进行排序。一旦请求的开始时间已到，就会从二插堆中移除该请求，进行处理。延迟策略可以在所有类型的PTLRPC服务上局用，并提供以下可调参数用来调整策略行为: nrs_delay",
        "{{ policy }};e 将MGS的mdqs.MDS.{{ service }}.nrs policies 设置为 {{ policy }}.35. ost_nrs_crrn_quantum35.1 简介本参数用来设置CRR-N策略的每批次RPC的最大RPC数量。关于CRR-N策略的含义，请参看参数ost_nrs_policies。作者: 李希 更新时间: 2023年6月7日\nLustre 可调参数全解将所有MDT的 mds.MDS.{{ service }}.nrs_policies 设置为 delay ;将MGS的 mds.MDS.{{ service }}.nrs_ policies 设置为 qdelay ;将所有MDT的 mds.MDS.{{ service }}.nrs delay pct 设置为 {{ percent }};将MGS的mas .MDs.{{ service }}.nrs delay pctiXB/J {{ percent }} 。49. ost thf_nid_ rule start: 在O0ST上创建一个TBF NID策略的规则49.1 简介本参数用来在OST上创建一个TBF NID策略的规则。注意，新创建的规则优先级高于所有已存在的规则，也就是说，新规则排在规则列表的最前面，会被首先匹配。关于TBF策略的含义，请参看参数ost_nrs_policies。在设置 nrs_tbf_rule 参数之前，需要首先将 nrs_policies 设置为tbf nid,49.2 设置方法将所有OST的 ost.oss.{{f service }}.nrs_policies 设置为tbf nid;将MGS的 ost.0SS.{{ service }}.nrs_policies 设置为tbf nid;将所有OST的 ost.0SS.{{ service }}.nrs tbf rule 设置为 start {{ name }} nid={{ nid }} rate={{rate }};将MGS的 ost.OSS.{{ service }}.nrs tbf rule 设置为 start {{ name }} nid={{ nid }}",
        "进行排序。一旦请求的开始时间已到，就会从二插堆中移除该请求，进行处理。延迟策略可以在所有类型的PTLRPC服务上局用，并提供以下可调参数用来调整策略行为: nrs_delay min, nrs delay max和 nrs delay pct.请注意，orr和trr策略只适用于ost_io服务。33.2 设置方法OST服务NRS策略的设置方法:e 将所有OST的ost.0Sss.{{ service }}.nrs_ policies 设置为 {{ policy }};e 将MGS的ost.0ss.{{ service }}.nrs policies 设置为 {{ policy }}.34. mdt_nrs_policies: 设置MDT PTLRPC服务使用的网络请求调度策略34.1 简介本参数用来设置MDT PTLRPC服务使用的网络请求调度策略。其策略类型与参数ost_nrs_policies类似。MDT服务包括:e mdt io服务: 处理punch请求，或DoM的MO请求。e mdt fld服务: 处理FLD (Fids Location Database) 请求。e mdt_seqmARss: 处理为FIDs 《文件标识符) 分配元数据序列 (SEQ) 的请求。e mdt_sedqs服务: 处理为数据对象分配超级序列的请求。e mdt_out服务: 处理对象更新 (Object Update, OUT) 的请求。在交叉引用操作中，客户端发送请求至主MDT，主MDT把操作分解成对象更新，OSP (对象存储代理) 再把这些更新发送到远程MDT来执行。这些更新请求称为OUT请求。e mdt_setattr服务: 暂时不使用。e mdt_readpage服务: 处理读取dir、关闭文件和配额请求。e mdt服务: 默认服务，处理来自客户端MDC的请求。34.2 设置方法MDT服务NRS策略的设置方法:e 将所有MDT的mdqs .MDSs.{{ service }}.nrs_policies 设置为 {{ policy }};e 将MGS的mdqs.MDS.{{ service }}.nrs policies 设置为 {{ policy }}.35. ost_nrs_crrn_",
        "式 RPC 相关信息的直方图，可用于确定应用程序执行更改文件系统的元数据操作时所实现的并行级sl).示例:client$ lctl get param mdc.*.rpc_ statssnapshot time: 1441876896.567070 (secs.usecs)modify RPCs in flight: 0modifyrpcs in flight rpcs + Cum %0 : 0 0 01: 56 0 02 : 40 0 03: 70 0 04 41 0 05: 51 0 16: 88 0 17: 366 1 28: 1321 5 89: 3624 15 2310: 6482 27 5011: 7321 30 8112: 4540 18 100文件内容包括:。 snapshot time 一读取文件时的 UNIX epoch 瞬间。。 modify RPCs_in_ flight 一 MDC 发起但当前还未完成的更改式 RPC 数。该值必须永远小于或等于max mod rpcs in flight.。 rpcs in flight 一发送RPC 时当前挂起的更改式 RPC 数量，包括相对百分比(3) 和宗积百分比 (cum %).499\n—Lustre 文件系统操作手册 译者:这ayMW AR KR ub ay BE oe st 7c Bt ie RPC AE KRW CAA Ke INimax mod_rpcs_in flight值的挂起元数据RPC，则意味着可以增加max mod rpcs_ in flignt值来提高元数据更改性能。39.5. Lustre 文件系统超时配置在 Lustre 文件系统中，RPC 超时使用目适应超时机制〈默认为司用)。服务融跟踪RPC 完成时间并同和客户端报告，以便估计未来 RPC 的完成时间。客户问使用这些佑计值来设置 RPC 超时值。当服务货请求处理因某种原因而减慢时，服务硕 RPC 完成时间延长，客户端则随之修改 RPC 超时值以允许更多的时间来守成RPC。如宁服务郁上排队的 RPC 接近客户端指定的RPC 超时，为避免 RPC 超时和上断开和重新连接的循环，服务僚会癌客己端",
        "cancel 功能〈黑认司用) WRIT 2 he Pi Be BS入对象的交叉区域后的 OSS 及其中一个客户端朋省时可能导致的数据不一致问题。当违反连续写入的 POSIX 要求并存在损坏数据的淤在风险时，将创建一个条件。局用sync-on-lock-cancel 后，如果取消的锁附加了任何满足此条件的不稳定的写入，则 OSS 会在锁取消时将日志同步导入磁姓。因此，尽管禁用sync-on-Iock-cance1l功能可以提升并发写入工作负载的性能，我们仍建议您不要蔡用此功能。497\n—Lustre 文件系统操作手册这aysync_on lock _cancel1人参数可设置为以下值: :。 always 一在锁取消时强制执行日志更新 (async_journal司用时的默认值)。\"blocking一只在因阻塞回调引起的锁取消时强制执行日志更新。\"nevet 一不强制执行任何日志更新 〈async_journal华用时的默认值)。例如，将 sync_on_lock_cancel 设置为不强制执行日志更新，使用以下类似命4S:$ lctl get_param obdfilter.*.sync_on lock cancel2 obdfilter.lol-OST0001.sync on lock cancel=never——39.4.5. 客户端元数据 RPC 流的调试客户端元数据RPC 流表示客户端并行发起的到MDT 目标的元数据RPC。元数据RPC 可以分为两类: 不更改文件系统的请求〈如 getattr 操作) 和更改文件系统的请求(如 create、unlink、setattr 操作) 。为优化客户端元数据RPC iit, Lustre 提供了几个可调参数来根据网络条件和集群大小调整行为。请注意，增加并行发起的元数据RPC 的数量可能会改善元数据密集型并行应用程序的性能，但会在客户端和 MDS 上消耗更多的内存。(在 Lustre 2.8 中引入)39.4.S.1. 配置客户端元数据RPC流 MDC AY max rpcs in flight 参数定义了客户端并行发送到 MDT 目标的元数据 RPC 的最大数量，包括更改和不更改文件系统的RPC。这包含了所有文件系统元数据操作，如文件或目录"
    ]
}