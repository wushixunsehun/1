{
    "query": "ost_tbf_rule_change_rank和mdt_tbf_rule_change_rank的参数作用有什么区别？",
    "summaries": [
        "Lustre 文件系统支持通过 TBF（Token Bucket Filter）规则控制 RPC 请求的速率，以实现 QoS 管理。可以使用 `lctl set param` 命令设置规则，例如限制特定 UID 或 GID 的请求速率，或根据操作码、Job ID、NID 等条件进行分类。规则支持逻辑运算符“&”（与）和“|”（或），并可对规则进行修改、停用和重新排序。新规则默认优先级较高，但可通过 `rank=` 参数调整顺序。",
        "本文档介绍了Lustre系统中与TBF（Token Bucket Filter）策略相关的可调参数设置方法，包括在MDT和OST上创建基于NID、GID和Opcode的TBF规则。设置前需将对应策略设为tbf nid、tbf gid或tbf opcode。新规则优先级最高，会排在规则列表最前面。文中详细列出了不同规则的设置步骤及适用的操作码列表，适用于网络流量控制和资源管理。",
        "本文档介绍了Lustre文件系统中与TBF（Token Bucket Filter）策略相关的参数设置方法和规则创建方式。主要包含以下内容：  \n1. **TBF Opcode策略**：在MDT上创建规则，优先级高于已有规则，需先将nrs_policies设为tbf opcode，支持多种操作码。  \n2. **TBF一般化策略**：在OST上创建复杂条件规则，支持逻辑与、逻辑或，用于更精细的RPC分类。  \n3. **设置方法**：包括设置OST和MGS的nrs_policies为tbf opcode，以及配置具体规则参数。  \n4. **相关参数**：如llog、quota、seq、sec_ctx等，涉及日志处理、配额管理、安全上下文等。"
    ],
    "contents": [
        "root, mds_statfs, mds_pin, mds_unpin, mds_sync, mds done writing,mds_set_info, mds_quotacheck, mds_quotactl, mds_getxattr, mds _setxattr, mds _writepage,mds_is subdir, mds_get_ info, mds_hsm_state get, mds_hsm_state_ set, mds_hsm_action,mds_ hsm progress, mds_hsm_request, mds_hsm_ct_register, mds_hsm_ct_unregister,mds swap layouts, mds_rmfid.还有一些在MDT上不太有用的操作码 :作者: 李希 更新时间: 2023年6月7日\nLustre 可调参数全解oOSst_LTrepPLIYy，ost _ getattr，ost_Setattzr，ost read，ost write, ost_create ost destroy,ost_get_ info，ost_connect，ost qisconnect，ost Punch，ost_open，ost_ close，ost Statfs，ost_Sync，，ost_Sset_ infto，ost duotacheck，ost_duotact1LI，ost_dquota adjust_dunit，ost 1Ladqvise，ost_fallocate, ost _seek, ldlm_enqueue, ldlm_ convert, ldlm_cancel, ldlm_bl callback,ldlm_cp_callback, ldlm_gl_callback, ldlm_set_info, mgs_connect, mgs_disconnect,mgs exception, mgs_target_reg, mgs _ target del, mgs_set_info, mgs_config read, obd ping,llog_ cancel, obd_quota_callback, dt _index_read, llog origin handle open,llog_origin_handle next_block, llog origin_handle read header,llog_origin_handle write rec, llog origin handle close, llog origin connect, llog catinfo,llog origin_handle prev_block, llog origin _handle destroy, quota_acquire, quota_release,seq query, sec_ctx_ init, sec",
        "@lo}100, ref 0default * 10000, ref 0CPT 1:comp rule opcode={ost_write} &jobid= {dd.0},nid={192.168.1. [1-128]@tcp 0@lo}100, ref 0default * 10000, ref 0high priority requests:CPT 0:comp rule opcode={ost_write} &jobid= {dd.0},nid={192.168.1. [1-128]@tcp 0@lo}100, ref 0default * 10000, ref 0409\n141516———ULDNn——ULDLustre 文件系统操作手册 译者:这ayCPT 1:comp rule opcode={ost_write} &jobid= {dd.0},nid={192.168.1. [1-128]@tcp 0@lo}100, ref 0default * 10000, ref 0示例:$ lctl set param ost.OSS.*.nrs_ tbf rule=\\\"start tof name uid={500}égid={500} rate=100\"在这个例子中，那些uid为500且gid为500 fy RPC 将以100req/sec 的速率进行处理。34.6.5.3. 更改 TBF 规则 “命令:lctl Set Param x.x.x.nrs tbf rule=\"[reg|hp] change rule name rate=rate\"示例:$ lctl set param ost.OSS.ost_io.nrs tbf rule=\\\"Change loginnode rate=200\"$ lctl set param ost.OSS.ost_io.nrs tbf rule=\\\"reg change loginnode rate=200\"$ lctl set param ost.OSS.ost_io.nrs tbf rule=\\\"hp change lLoginnode rate=200\"34.6.5.4. 停用 TBF 规则“命令:lctl Set Param x.x.x.nrs tbf rule=\"[reg|hp] stoprule name\"示例:$ lctl set_param ost.OSS.ost_",
        "header, llog origin handle write rec, llog_ origin handle close,llog_origin connect, llog_catinfo, llog origin handle prev_ block,llog origin _ handle destroy, quota_acquire, quota_release, seq query, sec _ctx init,sec ctx init cont, sec_ctx fini, fld_query, fld_read, out_update, lfsck_notify,lfsck_query.57.2 设置方法将所有OST的 ost.0SS.{{ service }}.nrs policies 设置为tbf opcode ;将MGS的 ost.OSS.{{ service }}.nrs policies 设置为tbf opcode ;将所有OST的 ost.O0SS.{{ service }}.nrs tbf rule 设置为 start {{ name }} opcode={{ opcode }}rate={{ rate }};将MGS的 ost.OSS. {{ service }}.nrs tbf rule iRBW start {{ name }} opcode={{ opcode }} rate={{ rate }}.,58. mdt_tbf_opcode_ rule start: 在MDT上创建一个TBF Opbcode策略的规则58.1 简介本参数用来在MDT上创建一个TBF Opcode策略的规则。注意，新创建的规则优先级高于所有已存在的规则，也就是说，新规则排在规则列表的最前面，会被首先匹配。关于TBF Opcode策略的含义，请参看参数ost_nrs_policies。在设置 nrs_tbf rule 参数之前，需要首先将 nrs policies 设置为tbf opcode,该参数的操作码列表如下:mdqs_dgetattr，mdqs_ getattr LIock，mqs _ close，mqds reint，mdqs readpage，mqs_connect，mds_ disconnect, mds_get_root, mds_statfs, mds_pin, mds_unpin, mds_sync, mds done writing,mds_set_info, mds_quotacheck, mds_quotactl, mds_getxattr,",
        "write ost create, ost destroy,ost_get_ info，ost_connect，ost qisconnect，ost Punch，ost_open，ost _ close，ost_ Statfs，ost_Sync，，ost_Sset_infto，ost _dquotacheck，ost_duotact1LI，ost _dquota adjust_dunit，ost_ 1Ladqvise，ost_fallocate, ost _seek, ldlm_enqueue, ldlm_convert, ldlm_cancel, ldlm_bl callback,ldlm_cp_callback, ldlm_gl_callback, ldlm_set_info.还有一些在O9T上不太有用的操作码:作者: 李希 更新时间: 2023年6月7日\nLustre 可调参数全解mdqs_dgetattr，mdqs_ getattr LIock，mqs _ close，mqds reint，mdqs readpage，mqs_connect，mds_ disconnect, mds_get_root, mds_statfs, mds_pin, mds_unpin, mds_sync, mds_done writing,mds_set_info, mds_quotacheck, mds_quotactl, mds_getxattr, mds _setxattr, mds _writepage,mds_is_ subdir, mds_get_info, mds_hsm_state_ get, mds_hsm state set, mds_hsm_ action,mds_hsm_progress, mds_hsm_request, mds_hsm_ct_register, mds_hsm_ct_unregister,mds_ swap layouts, mds_rmfid, mgs_connect, mgs _ disconnect, mgs _ exception, mgs _ target reg,mgs_target_del, mgs_set_info, mgs_config read, obd_ ping, llog_ cancel, obd_quota_callback,dt_index read, llog_origin_handle open, llog origin_handle next block,llog origin handle read_header, llog origin handle write rec, llog_ origin handle close,llog_origin connect, llog_catinfo, llog origin handle prev_ block,llog origin",
        "gid={{ gid }} rate={{rate }}.,56. mdt_tbf_gid_rule start: 在MDT上创建一个TBF GID策略的规则56.1 简介本参数用来在MDT上创建一个TBF GID策略的规则。注意，新创建的规则优先级高于所有已存在的规则，也就是说，新规则排在规则列表的最前面，会被首先匹配。关于TBF GID策略的含义，请参看参数ost_nrs_policies 。fEIXH nrs thf rule 参数之前，需要首先将 nrs_policies 设置为tbf gid.56.2 设置方法将所有MDT的 mds.MDS.{{ service }}.nrs_policies 设置为tbf gid;将MGS的 mds.MDS.{{ service }}.nrs_policies 设置为tbf gid;将所有MDT的 mds.MDS.{{ service }}.nrs tbf rule 设置为 start {{ name }} gid={{ gid }} rate={{rate }};将MGS的mdqas .MDs.{{ service }}.nrs tbf rule 设置为 start {{ name }} gid={{ gid }} rate={{rate }}.,57. ost_tbf_opcode_rule_start: 在OST上创建一个TBF Opcode策略的规则57.1 简介本参数用来在O0ST上创建一个TBF Opcode策略的规则。注意，新创建的规则优先级高于所有已存在的规则，也就是说，新规则排在规则列表的最前面，会被首先匹配。关于TBF Opcode策略的含义，请参看参数ost_nrs_policies。在设置 nrs_tbf _ rule 参数之前，需要首先将 nrs policies 设置为tbf opcode,该参数的操作码列表如下:oOSst_LTrepPLIYy，ost _ detattr，ost_ Setattzr，ost _ readq，ost write ost create, ost destroy,ost_get_ info，ost_connect，ost qisconnect，ost Punch，ost_open，ost _ close，ost_ Statfs，ost_Sync，",
        ":$ lctl set param ost.OSS.*.nrs_ tbf rule=\\\"start tof name gid={500} rate=100\"408\n——ULD—ULDNnnNOo\\101213Lustre 文件系统操作手册%my这ay您也可以使用以下的规则控制 MDS 上的请求。在 MDS 上启动 ttfuid QoS:$ Ictl set param mds.MDS.*.nrs_ policies=\"tbf uid\"限制 uid 500 的 RPC 请求速率:$ lctl set Param mds.MDS.*.nrs_ tbf rule=\\\"start tof name u1id={500} rate=100\"° Rll GIF为支持具有复杂条件表达式的 TBF 规则，可以使用 TBF 分类器以更细粒度的方式对 RPC 进行分类。此功能支持不同类型之间的逻辑操作。其中，\" &\" 代表条件与，\"\"代表条件或。示例:$ lctl set Param ost.OSS.ost_io.nrs tbf rule=\\\"start comp rule opcode={ost write} &jobid={dd.0}, \\nid={192.168.1.[1-128]@tcp O@1lo} rate=100\"在这个例子中，那些 opcode 为 ost write 且 jobid 为 dd 0，或 nidJE 192.168.1.11-1281@icp 0@lo} 条件的RPC 将以 100 req/sec 的速率进行处理。ost.OSS.ost_io.nrs tbf rule的输出类似于:$ lctl get_param ost.OSS.ost_io.nrs tbf ruleost.OSS.ost_io.nrs tbf rule=regular requests:CPT 0:comp rule opcode={ost_write} &jobid= {dd.0},nid={192.168.1. [1-128]@tcp 0@lo}100, ref 0default * 10000, ref 0CPT 1:comp rule opcode={ost_write} &jobid= {dd.0},nid={192.168.1. [",
        "rate }};将MGS的 ost.OSS.{{ service }}.nrs tbf rule 设置为 start {{ name }} nid={{ nid }} rate={{rate }}.,50. mdt_tbf_nid rule start: 在MDT上创建一个TBF NID策略的规则50.1 简介本参数用来在MDT上创建一个TBF NID策略的规则。注意，新创建的规则优先级高于所有已存在的规则，也就是说，新规则排在规则列表的最前面，会被首先匹配。关于TBF策略的含义，请参看参数ost_nrs_policies。在设置 nrs_tbf_rule 参数之前，需要首先将 nrs_policies 设置为tbf nid,50.2 设置方法将所有MDT的 mds.MDS.{{ service }}.nrs policies 设置为tbf nid;将MGS的 mds.MDS.{{ service }}.nrs policies 设置为tbf nid;将所有MDT的 mds.MDS.{{ service }}.nrs tbf rule 设置为 start {{ name }} nid={{ nid }} rate={{rate }};将MGS的mdqas.MDs.{{ service }}.nrs tbf rule 设置为 start {{ name }} nid={{ nid }} rate={{rate }}.,作者: 3% 更新时间: 2023年6月7日\nLustre 可调参数全解将所有OST的 ost.0SS.{{ service }}.nrs tbf rule 设置为 start {{ name }} gid={{ gid }} rate={{rate }};将MGS的 ost.OSS.{{ service }}.nrs tbf rule 设置为 start {{ name }} gid={{ gid }} rate={{rate }}.,56. mdt_tbf_gid_rule start: 在MDT上创建一个TBF GID策略的规则56.1 简介本参数",
        "规则“命令:lctl Set Param x.x.x.nrs tbf rule=\"[reg|hp] stoprule name\"示例:$ lctl set_param ost.OSS.ost_io.nrs tbf rule=\"stop loginnode\"$ lctl set param ost.OSS.ost_io.nrs tbf rule=\"reg stop loginnode\"$ lctl set_param ost.OSS.ost_io.nrs tbf rule=\"hp stop loginnode\"34.6.5.5. FAME ASCE SUA BU, PSI SP eu:“ 将 TBF 规则重新排序410\n—ULD—ULDNn101213151617Lustre 文件系统操作手册 译者:默认情况下，新局用的规则优先于旧规则，但在使用\"start'\" 命令插入新规则时同时指定参数\"*ank =\"，可以更改规则的排序。此外，还可以通过\"change\" 命令更改规则的排序。命令:lctl set_ param ost.OSS.ost_io.nrs tof rule=teaX\"start rule name arguments... rank=cob] rule name\"lctl set_ param ost.OSS.ost_io.nrs tof rule=\"change rule name rate=rate rank=obj rule name\"i eR xe BO EAS BLM 'obj_rule_name', fj $I M'rule_name' 可被移至该条规Wl'obj_rule_name' 之前。示例:$ lctl set Param ost.OSS.ost_io.nrs tbf rule=\\\"start computes nlcFE{192.168.1.[2-128]atcp} rate=500\"$ lctl set param ost.OSS.ost_io.nrs tbf rule=\\\"start userl jobid={iozone.500 dd.500} rate=100\"$ lctl set param ost.OSS.ost_io.nrs tbf rule=\\\"start lozone_userl opcode={ost_read ost write} rate=200 rank=computes\"在这个例子中，规则\"iozone_userl\"",
        ", llog catinfo,llog origin_handle prev_block, llog origin _handle destroy, quota_acquire, quota_release,seq query, sec_ctx_ init, sec_ctx_init cont, sec_ctx fini, fld_query, fld_read, out_update,lfsck_notify, lfsck_query.58.2 设置方法将所有MDT的 mds.MDS.{{ service }}.nrs policies 设置为tbf opcode ;将MGS的 mds.MDS.{{ service }}.nrs_ policies 设置为tbf opcode ;将所有MDT的 mds.MDS.{{ service }}.nrs tbf rule 设置为 start {{ name }} opcode={{ opcode }}rate={{ rate }};将MGS的 mds. MDS. {{ service }}.nrs tbf rule IZA start {{ name }} opcode={{ opcode }} rate={{ rate }}.,59. ost_tbf_complex_rule start: 在OST上创建一个TBF一般化策略的规则59.1 简介本参数用来在OST上创建一个TBF一般化 (S28) 策略的规则。注意，新创建的规则优先级高于所有已存在的规则，也就是说，新规则排在规则列表的最前面，会被首先匹配。关于TBF策略的含义，请参看参数ost_nrs_policies。在设置 nrs_tbf_rule 参数之前，需要首先将 nrs_policies 设置为tbf 。TBF一般化策略支持在其规则中使用复杂的条件判断表达式，从而能对RPC进行更精细的分类。该功能支持不同类型的条件之间进行“远辑与\"和“逻辑或\"。在规则中: se RSS\", | RHEL\". PIR:opcode={ost_write}&jobid={dd.0},nid={192.168.1.[1-128]@tcp 0@1lo}主意，在表达式中, “逻辑与\"的优先级高于“逻辑或\"。所以，上述表达式匹配两类RPC，一类"
    ]
}