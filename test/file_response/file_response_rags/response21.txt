{
    "query": "当OSS节点I/O负载不均时，如何通过调整条带分配策略参数（如 qos_threshold_rr ）改善？设置中需要考虑什么？",
    "summaries": [
        "当两个OST的空闲空间差异超过指定阈值时，使用加权分配法，该参数由qos_threshold_rr定义。默认qos_threshold设置为25，可通过命令调整。加权优先级由qos_prio_free参数控制，增加该值会提高对空闲空间的权重。当设置为100时，条带算法仅基于空闲空间。Lustre文件可分条在多个OST上，具体数量取决于MDT类型和功能。DoM功能通过将小文件存储在MDT上提升性能，支持组合布局，使用lfs setstripe命令创建。",
        "当两个 OST 的可用空间差异超过指定阈值时，可使用加权分配算法调整空间分布。可通过两个参数调节：lod.*.gos_threshold_rr 控制从循环法切换到加权法的阈值（默认 17%），lod.*.gos_prio_free 调整加权优先级，影响空间和平衡的权重分配。此外，osp.x*.reserved_mb_low 和 osp.x*.reserved_mb_high 控制对象分配的可用空间下限和上限。LRU 缓存锁数量由 lru_size 参数控制，可自动调整或手动设置，以优化内存使用。lru_max_age 参数限制未使用锁在缓存中的保留时间，避免内存浪费。MDS 和 OSS 线程计数可通过 threads min/max/started 参数进行调整，以适应不同工作负载需求。",
        "Lustre文件系统中，MDT根据OST的可用空间和空闲inode数量决定是否分配对象。当可用空间低于保留空间或空闲inode少于32个时，MDT停止分配；当可用空间达到保留空间的两倍且空闲inode超过64个时，重新开始分配。客户端可始终追加写入现有文件。保留空间默认为OST总容量的0.1%，可通过参数调整。此外，Lustre支持循环分配和加权分配两种条带分配方式，根据OST间空闲空间差异切换。QoS参数如qos_threshold_rr和qos_prio_free用于控制分配策略和权重。nosquash_nids参数用于指定不适用Root Squash的客户端列表。"
    ],
    "contents": [
        "-L \\2 mdt [--component-end|-E end2 [STRIPE OPTIONS] ...] <filename>上面的命令创建了一个具有特殊组合布局的文件，它将第一个组件定义为 MDT组te, MDT 组件必须从偏移 0 开始并在enal结束。endl也是该组件的条带大小，并受MDT 的lod.*x .dom_stripesize限制。无需其他选项。其余组件使用正常的语法来创建组合文件。注意如果下个组件未指定条带信息，如:1 lfs setstripe -E 1M -L mdt -E EOF <filename>WW AAP EE SCE ARCA Ri BC20.2.1.2. 示例 FIER GE“ DOM 布局的文件。第一个组件为MDT 布局，被放置在MDT EF, Aiki (0, 1M). 58 SAPP Aa: [LIM，EOF) ，并在所有可用的OST 上进行分条。1 client$ 1fs setstripe -E 1M -L mdt -E -1 -S 4M -c -1 \\2 /mnt/lustre/domfile其布局如下图所示:MDT N OSTs| [o, 1MB)(0, 1M)[1M, EOF)|图 24: Lustre component相关布局信息也可通过 1fs getstripe 命令显示:1 clientS lfs getstripe /mnt/lustre/domfile2 /mnt/lustre/domfile3 Icom layout gen: 24 lem mirror count: 15 lcmentry count: 26 lome_id: 17 lome flags: init243\n89101213141516171819202122232425这ayLustre 文件系统操作手册 译lcome extent.e start: 0lcome_extent.e end: 1048576Imm stripe count: 0Imm stripe size: 1048576Imm pattern: mdtImm layout gen: 0Imm stripe offset: 0Imm_ objects:lcome_id: 2lcome_ flags: 0lcome extent.e start: 1048576lome_extent.e end: KOFImm stripe count: -1Imm stripe size: 4194304Imm _ pattern:",
        "两个OST 的空亲空间大小差超过指定浆值 〈黑认为 179%) 时，使用加权分配法。这两种分配方式中HEME HHqos threshold_rrr参数定义。暂时将 qos threshold 设置为25，请在 MGS 上运行:mds# lctl set param lod.fsname*.gos threshold _rr=2519.8.3. 调整可用空间和位置的权重加权分配法使用的加权优先级由qos_prio free参数设置。增加qos_prio_free 的值会增加衡量每个OST 上可用空间大小的权重，减少衡量 OST 上的条带分布方式的权重。软认值是91 〈昕分比)。当空闲空间优先级设置为 100〈百分比) 时，条带算法完全基于空亲空间，而不考虑位置。要将分配器权重永久地更改为 100，请在 MGS 上输入此命令:lctl conf param fsname-MDTO000-* .lod.qos prio free=100注意当 qos_prio_free设置为 100 时，仍然使用加权随机算法来分配条。如果 OST2的可用空间是 OST1 的两倍，则使用 OST2 的可能性是 OST1 的两倍，但不能保证就一定使用 OST2.19.9. Lustre 条带化内部参数根据能够存储在 MDT 上的属性的最大大小，单个文件可在有限数量的 OST 上进行分条。如果是基于 ldiskfs 的MDT 且没有局用 ea_inode 功能，则文件最多可以在 160241\n1Lustre 文件系统操作手册 译者:As大个OST 上分条。如果是基于 ZFS 的 MDT 或是基于 ldiskf 的 MDT 司用了 ea _inode功能，则文件可以在多达 2000 个 OST 进行分条。Lustre inode 使用扩展属性来记录每个对象所在的 OST 以及每个对象在该 OST 上的标识符。扩展属性的大小可以表示为条带数量的函数。如果使用基于 ldiskf 的 MDT，可以通过局用 MDT 上的 ea_inode 功能将文件分割在更多的 OST 上，最大数量为 2000:tune2fs -O ea _jinoqe /dev/mdtdev注意",
        "显示导出时使用的当前锁数量。LRU 大小目动调整默认司动。。 指定最大锁数量，请将LIzru_size参数设置为非零值，通常是客户端的 CPU 数量的 100 倍左右。建议您仅在用户以交互方式访问文件系统的几个登录节点上增加LRU 大小。清除单个客户病上的 LRU，刷新客户端缓存而不更改I1*u_size值，请运行:1 $ lctl set param ldlm.namespaces.osc_name|mdc_name.lru_size=clear如果将 LRU 大小设置得比现有未使用锁数量更小，则未使用的锁将被立即取消。使用cleaz取消所有锁而不更改该值。注意1ru_size人参数只能通过1ct1 set_pParam进行和暂时设置 (不能进行永久设置) 。ZRF LRU 大小调整，请在 Lustre 客户端上运行:1 $ lctl set param ldlm.namespaces. *osc* .lru_size=5000确定授予的动态 LRU 大小调整的锁数，请运行:1 $ lctl get param 1qlm.namespaces.x .pool.1imit1ru_max_age参数用于控制 LRU BG MOTE PBT BH 〈时长) 。这样可以限制未使用的锁在客户端缓存的时间，避免闲置的客户端持有锁的时间过长，从而减少了客户端和服务器的内存占用，同时也减少了服务器恢复期间的工作。1ru_max_age以毫秒为单位进行设置和打印，默认为 3900000 毫秒 (65 分钟) 。从 Lustre 2.11 开始，除了以毫秒为单位设置最大锁龄外，还可以用s或ms作为后绷分别表示秒或毫秒。例如将客户端的最大锁龄设置为 15 分钟 (900s) 运行;300\nLustre 文件系统操作手册 译者:这ay1 # lctl set param ldlm.namespaces. *MDT* .lru_max_age=900s2 # lctl get param ldlm.namespaces. *MDT* .lru_max_age3 ldlm.namespaces.myth-MDT0000-mdc-f£f££8804296c2800.1ru_ max age=90000039.9. 设置 MDS 和 OSS 线程计数",
        "inode少于32个，MDT就会停止在该OST上分配对象。当可用空间是保留空间的两舍，并且OST有超过64个空闲节点时，MDT又开始在该OST上分配对象。注意，无论对象分配状态如何，客户端都可以追加写入现有文件。每个ODST的保留空间可以通过改变该参数来调整。默认是OST总容量的0.1%。17.2 设置方法将所有MDT的 osp.{{ fsname }}-*.reserved mb low 设置为 {{ reserved }} ，单位为MiB。将所有MDT的 ospb.{{ filesystem.fsname }}-*.reserved mb low\"设置为 {{ reserved ) ，单位为MiB。18. reserved_mb_high: 设置在OST可用空间高于何阅值时，开始对象分配。18.1 简介本参数用来设置在O0ST可用空间高于何阔值时，开始对象分配。如果可用空间大于高阐值时，该参数控制启动对象分配。默认是0OST总容量的0.2% 。为了优化文件系统的性能，MDT基于两种分配算法将文件条带分配给OSTs。循环分配器优先考虑位置 RPO散到各OSs中以提高网络带宽利用率) ，加权分配器优先考虑可用空间 (平衡各OST的负载) 。这两种算法综合虑了OST间带宽和可用空间的平衡，两者的冰值和加权系数可以由用户调整。MDT为每个DOST保留0.1%的总OST空间和32个inodes。如果可用空间少于此保留空间，或者OST的空闲inode少于32个，MDT就会停止在该OST上分配对象。当可用空间是保留空间的两舍，并且OST有超过64个空闲节点时，MDT又开始在该OST上分配对象。注意，无论对象分配状态如何，客户端都可以追加写入现有文件。18.2 设置方法将所有MDT的 ospb.{{ fsname }}-*.reserved mb high 设置为 {{ reserved }} ，单位为MiB。将所有MGS的 osp.{{ filesystem.fsname }}-*.reserved mb high 设置为 {{ reserved }} ，单位为MiB,作者: 3% 更新时间: 2023年6月7日\nLustre 可调参数全解19.",
        "MDT，可以通过局用 MDT 上的 ea_inode 功能将文件分割在更多的 OST 上，最大数量为 2000:tune2fs -O ea _jinoqe /dev/mdtdev注意单个文件的最大条剖数不会限制整个文件系统中 OST 的最大数量，只会限制文件的最大大小和最大聚合带宽。(Lustre 2.11 中引入)第二十章 MDT 数据功能 (DoMD20.1. 简介LustreMDT 数据功能〈DoM) 通过将小文件直接放置 MDT 上来改进小文件 IO，通过避免使用容易被随机小 IO 事件〈将导致设备搜索) 影响流 IO 性能的 OST 来改进大文件I9。因此，用户在小文件 IO 模式和混合 IO 模式上都获得更好的一致性性能。DoM 文件的布局作为组合布局存储在磁盘上，是渐进式文件布局 (PFL) 的特例。DoM 文件的布局由文件的组件组成，放在 MDT 上，其余的组件放在 OST 上 CUR it要)。第一个组件放置在MDT 上的对象数据冉中。该组件只有一个条帝，大小等于组件大小。这种具有 MDT 布局的组件只能是组合布局中的第一个组件。其余组件像往币一样通过 RAIDO 布局放置在 OST 上。在超出 MDT 组件大小的文件之后，客户端进行数据写入或截断，OST 组件才被实例化。20.2. 用户命令Lustre 提供 1fs setstripe 命令以方便用尸创建 DoM 文件。此外，像往币一样，lfs getstripe 命令可用于列出给定文件的分条/组件信息。而1fs find 命令可用于搜索以给定目录或文件名为根的目录树，以查找与给定 DoM 组件参数〈如布局类型)匹配的文件。20.2.1. 1fs setstripelfs setstzrip命邻用于创建 DoM 文件。242\nany,ak4hayLustre Cf AER EF1 lfs setstripe --component-end|-E endl —-layout|-L \\2 mdt [--component-end|-E end2 [STRIPE OPTIONS] ...] <filename>上面的命令创建了一个具有特殊组合布局的文件，它将第一个组件定义为",
        "两个 OST 的可用空间兰别超过指定国值时，使用加权分配需可 以使用 以下两个可调参数调玫可用上 x间分布:。 lod.*.gos_threshold_rr 一在此文件中设置从循环法切换到加权法的冰值。默认情况下，任何两个 OST 的不平衡度达到 17% 时，切换到加权算法。。 lod.*.gos_prio_free 一可在该文件中调整加权分配器使用的加权优先级。增Iligos prio free的值会增加每个OST 上可用空间量的权重，减少条带在 OST之间的分布。默认值为 91% 的权重基于可用空间重新平衡，9% 的权重基于 OST平衡。当可用空间优先级设置为 100 时，加权末则完全基于可用空间，且不再适用条再化算法。。 osp.x*.reserved_mb_ low一如果可用空间低于此标准，则停止分配对象。默认值为总 OST 大小的 0.1%。(在Lustre 2.9 中引入)505\nLustre 文件系统操作手册 译者:As大* osp.*.reserved_ mb high 一如果可用空间高于此标准，则开始分配对象。默认值为总OST 大小的 0.2%。(在Lustre 2.9 中引入)39.8. 配置锁1ru_size参数用于控制 LRU 缓存锁队列中的客户端锁数量。LRU 的大小是基于负载来进行动态优化的，具有不同工作负载〈如登录/构建节点和计算/备份下氮不同)的节氮可用锁的数量也不同。可用锁的总数是服务郁 RAM 的函数。殉认限制为每 IMB RAM50 个锁。如有果内存压力过大，LRU 则更小。服务逢上的锁数量被限制为每个服务佛的 OST 数量、客户端数量、客户端上所设置的Ifru_size值三着的乘积，如下所未:‘Ja A) LRU 大小目动调整，请将Iru_size参数设置为0。在这种情况下，1Fu_size参数将显示导出时使用的当前锁数量。LRU 大小目动调整默认司动。。 指定最大锁数量，请将LIzru_size参数设置为非零值，通常是客户端的 CPU 数量的 100 倍左右。建议您仅",
        "均衡程度决定的。当空朵空间在各OST之间相对均衡时，融会使用速更快的循环分配器，尼能最大限度地实现网络性能的平衡。当任何两个0ST的失衡程度超过指定的半值 〈(黑认为17%) 时，则使用加权分配器。这两种分配方法的阀值由本参数定义。19.2 设置方法将所有MDT的 1od.{{ service name }}-mdtlov.gos threshold rriRHW {{ percent }}，单位为百分cE.将所有MGS的 lod. {{ filesystem.fsname }}-mdtlov.qgos _ threshold_rr 设置为 {{ percent }} ，单位为百分比。20. qos_prio free: 设置加权分配器基于空间空间的加权因子20.1 简介本参数用来设置加权分配器基于空间空间的加权因子。该参数控制加权分配器使用的加权优先级。增加 gos_prio_free 的值，可以增加基于可用空间的权重，而减少将条带分散到更多OST上的权重。这两者都很重要，因为前者可以让可用空间最终趋于平衡，而后者能让众多OST的聚合带宽能得到充分利用，而两者又彼此冲突，因此需要控制权重。该参数默认值是91 (%) 。当空闲空间优先级被设置为100 (%) 时，权重完全基于空闲空间，而不再考虑将条带分散到更多OST上。作者: 李希 更新时间: 2023年6月7日\nLustre 可调参数全解32. nosquash_nids: 设置不适用Root squash的客户端列表32.1 简介本参数用来设置设置不适用Root Squash的客户端列表。该参数指定了不适用Root Squash的客户端集合，采用的语法为LNet NID区段语法。例如: 172.16.245.[0-255/2]etcp 。该例含义为，Root Squash不适用于TCP子网 172.16.245.0 上的部分客户端，这些客户端的I|P地址的最后一个组成部分是偶数。如果nosquash_nids值由几个NID区段组成 (例如 o@elan, 1@elani) ，NID区段的列表必须用单引号或双引号引出。列表元素必须用空格隔开。例如: '192.168.1.1etcpl",
        "namespaces. *MDT* .lru_max_age3 ldlm.namespaces.myth-MDT0000-mdc-f£f££8804296c2800.1ru_ max age=90000039.9. 设置 MDS 和 OSS 线程计数MDS 和 OSS 线程计数的可调参数可用于设置最小和最大线程计数，或获取下表中所列服务的当前运行的线程数。服务 说明mds .MDS .mdt 主要元数据操作mds.MDS.mdt_readpage 元数据 readdirmds.MDS.mdt_setattr 元数据 setattr/close 操作ost.0SS.ost 主要数据操作ost.OSS.ost io 批量数据 IOost.0SS.ost_create OST 对象预创建ldlm.services.ldlm_canceld DLM 锁取消ldlm.services.ldlm_cbd DLM #1}对于每个服务，可调参数如下所示:。和暂时地设置此参数:# Ictl set param service.threads min|max|started=num。 永久地设置此人参数:# Ictl conf param obdname|fsname.obdtype.threads_ min|max|startedLustre 2.5 及以上版本请运行:# Ictl set param -P service.threads min|max|started以下示例显示了如何设置线程 计算及如何使 用service.threads min|max|started# Wl jK M ost io服务当前运行的线程© 获取运行的线程数 :1 # lctl get_param ost.OSS.ost_io.threads_ started2 ost.OSS.ost_io.threads startec=128507\nLustre 文件系统操作手册这ay.设置线程数的最大值 512)1 # lctl get_param ost.0SS.ost _ 11o.threaqs max2 ost.OSS.ost_io.threads_ max=512。 为避免存储重载或针对请求数组，设置线程数的最大值 (256):1 # lctl set Param ost.OSS.ost_io.threads_ max=2562 ost.OSS.ost_io.threads_ max=256。 将线程数的最大值永人地设置为 256:# lctl conf param testfs.ost.ost io.",
        "}}-*.reserved mb high 设置为 {{ reserved }} ，单位为MiB,作者: 3% 更新时间: 2023年6月7日\nLustre 可调参数全解19. qos threshold_rr: 设置数据对象分配方法切换时的空有空间差异冰值19.1 简介本参数用来设置ODST间的空闲空间差异高于何阔值时，数据对象分配方法从轮循分配方法切换到基于空闲空间的加权分配方法。Lustre使用两种条党分配方法:e 循环分配器。当OST有大致相同的可用空间时，循环分配器在不同的099上的OST之间交替进行条融分配，所以每个文件的条带0在DOST之间平均分配，而不考虑条带数。举个简单的例子，有8个编号-7的OST，则对象将如下分配:文件1: OST1, OST2, OST3, OST4文件2: OST5, OST6, OST7文件3: OSTO, OST1, OST2, OST3, OST4, OSTS文件4: OST6, OST7, OSTO下面是几个更多的循环条带顺序分配的例子 (每个字母代表单一0SS上的不同OST) :3: AAA 一个3-OST OSS3x3: ABABAB ”两个 3-OST OSS3x4: BBABABA —~* 3-OST OSS (A) 和一个4-OST OSS (B) 。3x5: BBABBABA ”一个 3-OST OSS (A) 和一个5-OST OSS (B) 。3x3x3: ABCABCABC 三个 3-OST OSSe 加权分配器。当OST之间的空闲空间差异变得很大时，分配器使用加权算法基于容量 (每个OST上可用的空ASS) AWS (分条需尽量在OST间均匀分布) 来进行OST排序。加权随机算法会以更大的概率选中较空的O0ST，但不一定每次都选择空亲空间最大的OST。分配方法究竟是使用循环分配算法还是加权随机算法，是由OST上空闲空间的均衡程度决定的。当空朵空间在各OST之间相对均衡时，融会使用速更快的循环分配器，尼能最大限度地实现网络性能的平衡。当任何两个0ST的失衡程度超过指定的半值 〈(黑"
    ]
}