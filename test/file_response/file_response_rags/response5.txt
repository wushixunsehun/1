{
    "query": "请说明 PFL（渐进式文件布局）的功能与优势。",
    "summaries": [
        "Lustre 文件系统支持在同一个文件系统中配置多个 MDT，每个目录和文件可位于不同 MDT。通过 `lfs getstripe` 命令可确定子目录所在的 MDT。Lustre 的渐进式文件布局（PFL）简化了使用，用户无需预先了解 IO 模型即可获得良好性能。PFL 文件以复合布局存储，由多个子布局组件组成，每个组件覆盖文件的不同部分。PFL 文件的布局由一系列组件构成，某些部分可能未被描述。Lustre 提供 `lfs setstripe` 和 `lfs migrate` 等命令操作 PFL 文件，需客户端和服务端均支持 PFL 功能。",
        "lfs find 命令用于在 Lustre 文件系统中搜索符合 PFL 组件参数的文件，支持按组件数量、起始点、结束点和标志进行过滤。SEL（自扩展布局）是 PFL 的延伸功能，允许 MDS 动态调整文件布局，避免空间不足问题。SEL 将组件分为可扩展和扩展两类，写入未分配空间时，MDS 会动态扩展可扩展组件并减少扩展组件，从而实现自动扩容。默认扩展策略包括扩展、切换、重复和强制扩展。该功能需 MDS 支持，旧客户端可能受限。lfs setstripe 命令用于创建或修改复合布局文件。",
        "Lustre 文件系统通过将文件分条到多个 OST 上，以提高峰值聚合带宽和性能。适用于大文件或高并发访问场景，最多支持 2000 个 OST。条带化可提升 IO 性能，但会增加开销和风险。选择合适的条带大小（如 1MB-4MB）有助于优化性能，避免锁定争用。使用 `lfs setstripe` 命令配置文件布局，设置条带数量、大小和起始 OST，以实现负载均衡和空间利用。"
    ],
    "contents": [
        "的 PFL 文件包含 3 个组件，显示了一个大小为 205SMB 的文件中不同块的映射。前两个组件的条弟大小为 1IMB，第三个组件的条就大小为4MB。三个组件的条市数在不断增加。第一个组件只有两个 IMB 的块，一个对象的大小为2MB。人第二个组件将文件接下来的 254MB 保存在RAID-0 的4个独立的OST 对象上，每个对象的大小为 2360MB/4= 64MB。请注意，前两个对象 obj 2,0 和opj 2，,1在存储时起始位置处有一个 IMB 大小的空洞。最后的组件存有文件接下来的 1800MB, *it [ 32 个 OST对象。每个对象在开始处有 256MB/32 = 8MB 的空洞。每个对象的大小为 2048MB/32=64MB ，不同之处在于 obj 3,0 包含额外的 4MB 块，而 obj 3,1 包含额外的 3MB 块。如采将更多数据写入文件，只有第三个组件中的对象的大小会增加。当访问具有已定义但未实例化组件的文件范围时，客户端癌 MDT 发送一个布局意图RPC，MDT 将实例化履盖该范围的组件的对象。接下来我们将介绍用于操作 PFL 文件的一些命令，并给出一些合成布局的例子。Lustre 提供命令1fs setstripe和1fs migrate 以供用户对PFL 文件进行操作。其中，1fs setstripe 用于创建 PFL 文件，将组件添加到现有组合文件或从现有组合文件中删除组件; Ifs migrate 命令将当前 OST 中的数据复制到新 OST 中，使用新布局参数重新布局现有文件中的数据。另外，1fs getstripe 命令用于列出给定 PEFL 文件的条伟化/组件信息，1fs find 命令可用于搜索以给定的目录或文件为根的目录树，以碍找与 PFL 组件参数相匹配的文件。注意使用 PFL 文件需要客户端和服务禹都能解析 PFL 文件布局，Lustre 2.9 或更早和版本中没有该功能。但这不影响更早版本的各户端访问文件系统中的非 PFL 文件。19",
        "釉上的人磁盘都可以管理线性的 IO，则不存在莞委。如宋每个文件都有 100 个对象 ，那么客户冰就会彼此竞争以获得服务硕的注意，并且每个节反上的磁盘将在 100 个不同的方向上寻找，导致不必要的竞争。“增加风险。 当文件在所有服务咒上进行条融化，而其中一人台服务吉出现故障，这坚文件的一小部分将丢失。相反，如采每个文件只有一个条带，丢失的文件会更少，但它们将宛全丢失。许多用户更能接受丢失部分文件《即使是全部内容)，而不是所有文件都丢失部分内容。19.2.1. 选择条带大小选择条带大小是一种权衡行为。下面将介绍较为合理的默认值。条齐大小对于单条审文件疫有影响。“ 条带大小必须是页大小的整数倍。Lustre 软件工具将强制执行 64KB 的整数倍(ia64 和 PPC64 区点的最大页大小) ，避免页规格较小的平台上的用尸创建可能会导致 ia64 客户端出现问题的文件。194\nLustre 文件系统操作手册 译者: 李硕。 推荐的最小条带大小是 S12KB。 虽然可以创建条带大小为 64KB 的文件，但最小的实际条带大小为 S12KB ，因为 Lustre 文件系统通过网络发送数据块大小为 1MB。选择更小的条带大小可能会导致磁盘 IO 效率低下，人性能下降。。适用于高速网络线性 VO 的条带大小在 1MB 到 4MB 之间。在大多数情况下，大于4MB 的条带大小可能导致更长的锁定保持时间，增加共享文件访问期间的争用情况。。最大条带大小为 4GB。 在访问非常大的文件时，使用较大的条带大小可以提高性能。它允许每个客户端独占访问文件的一部分。但如果条带大小与 IO 模式不匹配，较大的条带大小可能会适得其反。。 选择一个考虑到应用程序的写入模式的条带化模式。 跨越对象边界的写入效率要比在单个服务器上完整写入的效率略低。如果文件以一致旦对齐的方式写入，请将条带大小设置为 wzite () 大小的整数倍。19.3. 配置 Lustre 文件布局 〈条带化模式) (LEfEs setstripe)使用 Ifs",
        "文件以一致旦对齐的方式写入，请将条带大小设置为 wzite () 大小的整数倍。19.3. 配置 Lustre 文件布局 〈条带化模式) (LEfEs setstripe)使用 Ifs setstripe 命令创建指定文件布局〈条市化模式) 配置的新文件。1 lfs setstripe [--size|-s stripe size] [--stripe-count|-c stripe count][--overstripe-count|-C stripe count] \\2 [--index|-i start_ost] [--pool|-p pool name] filename|dirnamestripe_sizestripe size 表示移动到下一个 OST Ail] BLA OST APY BH ato BRUstripe _ size是1MB。将该参数设置为0, MITER AY). stripe_size值必须是 64 KB 的整数倍。stripe count (--stripe-count, --overstripe-count)stripe_count 表示要使用OST 的数量。默认值为 1。将其设置为0，则会使用该PRU Ai BUCH. f stripe_count 设置为-1 意味着对所有可用的 OST 进行分条。当使用 --overstripe-count时，必要时应在每个OST 上使用。start_oststart ost 是文件写入的第一个OST。start_ost 的默认值是-1，它允许 MDS选择起始索引。强烈建议使用此默认设置，因为它可根据需要通过 MDS 完成空间和负载均衡。如果将 start_ost 的值设置为非 -1，则该文件将从指定的 OST 索引开始。OST 索引编号从 0 开始。注意WR Ta REA OST 处于非活动状态或处于降级模式，则 MDS 将目动选择另一个目标。195\n———Lustre 文件系统操作手册 译者:As大如果 start ost {HW0, stripe count 值为1，则所有文件都将写入OST0, 直到空间耗尽。这很可能不是你想要的。如果您只希望调整 stripe count ，而保持其他参数为默认设置，请不要指定任何其他参数:client# lfs setstripe -c stripe",
        "文件分割到尽可能多的 OSS 上，以达到该文件所需的峰值聚合带宽。请注意，只有当文件大小很大或文件一次被许多节点访问时，才建议使用大量OSS 进行分条。目前，Lustre 文件可以在多达 2000 个 OST 上进行条带化。193\nLustre 文件系统操作手册 译者:As大“ 超出 OSS 带宽时用于提升性能。 如果客户端总带宽超过服务器带宽，且应用程序数据读写速率足够快而能够充分利用额外的 OSS 人带宽，则跨越多个 OSS 将文件条融化可以提高性能。最大有效条带数的限制为: 客户端/作业的 IO 28 BR BESOSS 性能。(由 Luster2.13 引入) 匹配条带与 VO 模式。当多个市点同时对一个文件进行写入时，可能有一个以上的客户痛会写到一个条带上，这会导致锁交换的问题，即客户端XT BA ATTA CPP ET FF, BEM VO Bar NE. WER IO 可以进行条价对齐，使每个条带只被一个客户器访问，就可以避免这个问题。从 Lustre 2.13 开始谎加了“overstriping\" 功能，人允许每个 OST 有多个条帝。这对于线程数超过 OST 数的情况特别有帮助，使得在这种情况下也可以将条人带数与线程数匹配。“为大文件提供空间。当单个 OST 没有足够多的空闲空间来存放整个文件时，可将文件分条。减少或避免使用条带化的原因:。 增加开销。 在常规操作 (如 stat 和unlink ) 期间，条带化会导致更多的锁定和额外的网络操作。即使这些操作并行执行，一次网络操作所花的时间也少于 100次操作。同时，服务硕竞争情况也会随之增加。考虑一个拥有 100 “SF A 100 个 OSS的集群，每个 OSS 合一个 O0ST。如宋每个文件只有一个对象并且人负载均匀分布，每人台服务釉上的人磁盘都可以管理线性的 IO，则不存在莞委。如宋每个文件都有 100 个对象 ，那么客户冰就会彼此竞争以获得服务硕的注意，并且每个节反上的磁盘将在",
        "testdir ! --component-count=32 /mnt/testfs/testdir+3 /mnt/testfs/testdir/4comp+4 /mnt/testfs/testdir/dir 3comp/2comp5 /mnt/testfs/testdir/dir 3comp/commonfileBi 2. ARS HR eA ee a/R eR Be查找目录 /mnt/testfs/testdir 下组件起始点在4M 和70M 之间的文件和目录1$ lfs find /mnt/testfs/testdir --component-start=4M -E -30M2 /mnt/testfs/testdir/4compo例 3. 查找与指定组件标志情况相符的文件或目录查找目录 /mnt/testfs/testdir 下组件标志含 in让的文件和目录。15 lfs find /mnt/testfs/testdir --component-flag=init2 /mnt/testfs/testdir/3compo3 /mnt/testfs/testdir/4comp4 /mnt/testfs/testdir/dir 3comp/2comp注意由于1fs find 使用\"必来做反辐搜索，这里不文持标志 ^init 。19.6. 自扩展布局Lustre 自扩展布局 (SEL) 功能是“渐进式文件布局 (PFL)\" 功能的延伸，它允许 MDS动态改变定义的 PFL 布局。通过这个功能，MDS 可以监控 OSTs 上的使用空间，当OSTs 的空间不足时，MDS 会为当前文件更换 OST。这样当应用程序对 SEL 文件进行写入时，可以避免出现ENOSPC问题。PFL 会延迟某些组件的实例化，直到在这个区域上发生 IO 操作，而 SEL 人允许将这种非实例化的组件分成两部分:“可扩展 (extendable) \" 组件和”扩展 (extension) \"组件。可扩展的组件是一种名规的 PFL 组件，只歼盖原本就很小的一部分区域。扩展 (或SEL) 组件是一种新的组件类型 ，它始终是未赋值和未分配的，歼盖了该区域的另一部分。当写入到这个未分配的空间时，客户端调用 MDS 让它实例化，MDS 就会做出是否222\n1Lustre 文件系统操作手册 译者:授予可扩展组件额外空间的决定。",
        ": 0x0] }[0x100060000:0x2:0x0] }[Ox100070000: 0x2: 0x0] }[0x100000000: 0x2:0x0] }lfs find 命令可用于搜索以给定的目录或文件为根的目录树，以查找与 PFL 组件参数相匹配的文件。这里只显示 PFL 文件的新参数。其用法与 1fs getstripe 命令类似。命令lfs find directory|filename[[!] --component-count [+-=]comp_cnt][[!] --component-start [+-=]N[kMGTPE] ][[!] --component-end|-E [+-=]N[kMGTPE] ][[!] --component-flags=comp flags]注意使用 --component-xxx 选项，上只搜索组合文件。使用! --component-xxx vt项，搜索所有文件。示例以下面的目录和组合文件为例显示 Ifs find 如何工作。S mkdir /mnt/testfs/testdir2 5 lfs setstripe -E 1M -E 10M -E eof /mnt/testfs/testdir/3comp3 $ lfs setstripe -E 4M -E 20M -E 30M -E eof /mnt/testfs/testdir/4comp221\nLustre 文件系统操作手册这ay4 $ mkdir -p /mnt/testfs/testdir/dir 3comp5 $ lfs setstripe -E 6M -E 30M -E eof /mnt/testfs/testdir/dir 3comp6 $ lfs setstripe -E 8M -E eof /mnt/testfs/testdir/dir 3comp/2comp7 $ lfs setstripe -c 1 /mnt/testfs/testdir/dir 3comp/commnfile例 1. 查找与指定组件计数情况相符的文件查找目录 /mnt/testfs/testdir 下组件个数不为3 的文件。1S lfs find /mnt/testfs/testdir ! --component-count=32 /mnt/testfs/testdir+3 /mnt/testfs/testdir/4comp+4 /mnt/testfs/testdir/dir 3comp/2comp5 /mnt/testfs/testdir",
        "为远程目录征位 MDTLustre 可 以在同一个文件系统中配置多个 MDT，每个目录和文件可以位于不同的MDT。要确定给定子目录位于哪个MDT 上，请将 getstripe [--mdt-index| -M]的参数传递给 lis.19.5. 渐进式文件布局 (PFD)Lustre 渐进式文件布局 (Lustre Progressive File Layout, PFL) 功能简化了 Lustre 的使用，使得用户无需事先明确了解其 IO 模型或 Lustre 使用细市就可以预期各种冲规文件 IO 模式的性能。特别是，用户不一定需要在创建输出文件乙前就知道其大小或并行性，也不需要为了实现并行共享单个大文件 IO 和更小的每进程文件 IO 的高性能而为每个文件明确地指定最佳布局。PFL 文件的布局以复合布局的方式存储在磁盘上。PFL 文件基本上是一个子布局组件的数组，每个子布局组件都是一个畴盖不同的不重酸的文件部分的普通布局。对于PFL 文件，文件布局由一系列组件组成，因此可能有某些文件部分未由任何组件描述以下的 PFL 对象映射图显示了 PFL 文件的数据块映射到 OST 对象组件的示例:| Component 1:p, : 1 stripe @ 1MBobj 3,30 obj 3,31(256M, EOF beet cul 3: ， | Sparse, no data or block allocation in object加 Offset / of the PFL file in 1MB units[0, nMB) Size of obj m,n on OSTobj m,n Component m stripe nm OST objectobj 3,0 obj 3,1Mapping from 2055MB PFL file data blocks to OST objects of three components199\n—ULDLustre 文件系统操作手册 译者:As大图 10: Lustrecluster at scale图中的 PFL 文件包含 3 个组件，显示了一个大小为 205SMB 的文件中不同块的映射。前两个组件的条弟大小为 1IMB，第三个组件的条就大小为4MB。三个组件的",
        "文件需要客户端和服务禹都能解析 PFL 文件布局，Lustre 2.9 或更早和版本中没有该功能。但这不影响更早版本的各户端访问文件系统中的非 PFL 文件。19.S.1. lfs setstripelfs setstripe 命令用于创建 PFL 文件，将组件添加到现有组合文件或从现有组合文件中删除组件。《〈在下面的例子中，我们假设有8 4 OST, BRU ZR AFA) IMB.)19.5.1.1. 创建一个PFL 文件“命令lfs setstripe[--component-end|-E endl] [STRIPE OPTIONS][--component-end|-E end2] [STRIPE OPTIONS] ... filename—B cD TFs xe BET ZAG OR a et CLAS FE BIE ig SR\"KMGTP\", 0)256M), ，同时也指示了 STRIPE _ OPTIONS用于此组件。每个组件在 [start，end) 范围内定义文件的条认化模式。第一个组件必须从偏移量 0 开始，所有组件必须役此相邻，不人允许有空洞，因此每个范围都将从上一个范围的末尾开始。- 1为结束偶移，或用 eof表200\nLustre 文件系统操作手册 译者: Bar是一直延伸到文件结尾的最后一个组件。“ah1 $ lfs setstripe -E 4M -c 1 -E 64M -c 4 -E -1 -c -1-i14\\2 /mnt/testfs/create compAan GET AAU PART NS Gi ESOC. OAL LS eR a Abate[0,4M]，第二个组件有4 “Ph2R ir, Bi 4M，64M]，了节后一个组件从 OST4 开始，跨越所有可用的 OST $f (64M, EOF].OSTO OST1 OST2 OST3 OST4 OST5 OST6 OST7/图 11: Lustrecluster at scale该组合布局可通过以下命令显示:1 $ lfs getstripe /mnt/testfs/create comp2 /mnt/testfs/create comp3 lcm layout gen:",
        "该区域的另一部分。当写入到这个未分配的空间时，客户端调用 MDS 让它实例化，MDS 就会做出是否222\n1Lustre 文件系统操作手册 译者:授予可扩展组件额外空间的决定。授权的区域从扩展组件的头部移动到可扩展组件的尾部，因此，可扩展组件空间增长了 ，SEL 组件空间减少了。因此，它允许文件继续在相JAY OST 上修改布局，或者在当前 OST 中的一个空间不足的情况下，可以修改布局以TREATY OST 上的新组件上。特别是，它可以让 IO Bahia fA HDD OST 池中，所以一旦小的 SSD OST 字空间越来越少，就会目动洪出到大的 HDD OST 字中。默认的扩展策略通过以下方式修改布局:1. 扩展: 在相同的 OST 上继续 ------ 当当前组件的任一OST 上的空间不低时使用该策略; 授予可扩展组件特定的范围。NO. amt: 切换到下一个 OSTs 组件上 ------ 当当前组件中至少有一个 OSTS 的空间不足时才使用该策略; SEL 组件的整个区焉移动到下一个组件，SEL 组件依次补移除。3. 重复: 在空闲的 OST 上创建一个具有相同布局的新组件 -一-- 当当前至少有一个OSTs 空间不足时，且只用于最后一个组件; 新组件具有相同的布局，但在不同的OSTs (来目同一池) 上实例化，而这些 OSTs 有足够的空间。4. 强制扩展: 在空间不足的情况下，继续使用当前组件 OSTS------当重复尝试检测到空间不足的情况下，且只用于最后一个组件 ------ 因为不可能溢出，且重复也没有意义的。注意 SEL 功能不需要客户端理解已经创建的文件的 SEL 格式，只需要由 Lustre 2.13中引入的 MDS 支持即可。但是由于 Lustre 工具不支持，所以旧的客户端会有一些限制。19.6.1. lfs setstripeIfs setstripe 命令用于创建具有复合布局的文件，也可以在现有文件中添加或删除组件。它还"
    ]
}