{
    "query": "如何通过 yhalloc 设置作业最多运行2小时？",
    "summaries": [
        "yhalloc 是用于请求资源并运行作业的命令，支持多种选项如指定用户、分区、时间限制等。环境变量可覆盖命令行选项。yhattach 用于附接到正在运行的作业步以获取 I/O 信息，支持过滤和标签功能。yhbatch 用于提交批处理脚本作业。",
        "本文档介绍了yhalloc命令的多个选项，用于控制作业在资源管理系统中的执行和资源分配。主要功能包括：设置任务与CPU、socket、core或thread的绑定方式，指定每个任务所需的CPU数量，切换工作目录，独占节点，从文件获取节点列表，获取用户环境变量，设置作业名称，处理资源回收信号等。这些选项帮助用户更精细地控制作业的资源使用和执行行为，以优化性能和资源利用率。",
        "yhbatch 是用于向资源管理系统提交批处理脚本的命令。脚本可通过文件名指定或从标准输入读取，其中包含以 #SBATCH 开头的选项。作业提交后会分配 JobID 并进入队列等待资源。资源管理系统在满足需求后运行脚本。用户可通过 yhcontrol 修改作业属性，如开始时间、资源请求、检查点目录等。支持多种参数设置，如账户、资源类型、节点约束、CPU 绑定等，以精确控制作业执行环境。"
    ],
    "contents": [
        "Largs...]sipsyhbatch 问资源管理系统提交一个批处理脚本。批处理脚本可以通过命令行以文件名形式给出，或者，如果没有指定文件名，yhbatch 将从标准输入读取一个脚本。批处理脚本中可以在可执行命令之前包含以“#SBATCH”开头的选项。yhbatch 将在脚本成功提交到资源管理系统控制进程并分配作业 JobID 后立即退出。批处理脚本可能不会被立刻分配资源，而是在排队作业队列中等待，知道资源需求得到满足。当批处理脚本被分配资源后，资源管理系统将在所分配的第一个节点上运行批处理脚e -A, --account=accountEVE ML (5 FW A eA EE IK SE. account MERE. Wk Ss AS TEE业提交后可以通过 yhcontrol 命令更改。。 --acctg-freq=seconds设置作业记账采样周期。用于乾凑配置文件中的 JobAcctGatherFrequency 参数。设置为 0 将芭止周期性的作业记账采样，仅在作业终止时获取记账数据《〈从而减少资源管理系统进程对作业的干扰)。。 -B, --extra-node-info=sockets|: cores| : threads]|请求在系统中分配特定资源，详细指定计算资源的数目和类型: 每节点的 socket(或物理处理器) 数， socket 的 core 数，以及每 core HY thread 数。所请求的资源总数为所有项之积。类似于 --nodes，每个值可以是一个数字或者一个范围《〈即173\n资源管理系统手册min-max). HEARS OF) 作为占位符，表示使用该类型的所有资源。也可以使用单独选项指定每一级别的需求:— --sockets-per-node=sockets一 --cores-per-socket=cores一 --threads-per-core=threads当使用 task/affinity 插件时，以此方式指定分配资源将导致资源管理系统使用CPU 杀和掩码以保证请求被满足。注意: 这些选项的文持与配置相关。必须使用task/affinity 插件。另外必须使用 select/linear 或 select/cons_res 插件。如果使用select/cons_res 插件，它必须使用参数 CR_Core, CR_Core_Memory, CR_ Socket",
        "同 --jobidSALLOC_MEM BIND: 同 --mem_bindSALLOC_NETWORK: [A] --networkSALLOC_NO BELL: 同 --no-bellSALLOC_OVERCOMMIT: 同 -0, --overcommitSALLOC_PARTITION: [5] -p, --partitionSALLOC_QOS: [A] --qosSALLOC_TIMELIMIT: 同 -t, --timeSALLOC WAIT: [A] -W, --wait输出环境变量资源管理系统将在执行的程序的环境中设置如下变量:SLURM_CPU_BINDWEA --cpu_bind 选项的值。SLURM JOB ID《〈以及 SLURM_JOBID)作业的 JobID。SLURM JOB CPUS_PER NODE当前节点上此作业可用的处理器数。请注意，select/linear 插件将整个节点分配给作业，因此此值表示节点上的全部 CPU 数目。select/cons_res 插件将单个处理器分配到作业，因此此数值表示此节点上分配给作业的处理器数目。SLURM_JOB_NODELIST 〈以及 SLURM_NODELIST)分配到作业的节点列表。168\n16.2. yhalloc。 SLURM_JOB_NUM_NODES (以及 SLURM_NNODES)分配到作业的节点数目。。 SLURM MEM BIND设置为 --mem bind 选项的值。e SLURM NTASKS PER NODE所请求的每节点任务数。仅在指定了 --ntasks-per-node 选项时设置。。 SLURM_TASKS_PER_ NODE每个节点上要启动的任务数。该值由去号分隔，顺序同 SLURM_NODELIST。如果两个以上节点有相同的任务数，则该数目后跟“(x#)” FO “SH” EMR. Biluu, “SLURM_TASKS PER NODE=2(x3) ,1”表示前三个节点执行两个任务，第四个节点执行一个任务。当 yhalloc 等待作业资源分配时，大部分信号将导致 yhalloc 取消资源分配请求并退出。然而, 在得到资源分配并局动执行用户命令后, yhalloc 将忽略大部分信号。yhalloc不会在用户命令退出之前退出并释放资源。值得注意例外是 SIGHUP: HUP 信和号将导致yhalloc 释放资源并退出而不再等待用户",
        "局动执行用户命令后, yhalloc 将忽略大部分信号。yhalloc不会在用户命令退出之前退出并释放资源。值得注意例外是 SIGHUP: HUP 信和号将导致yhalloc 释放资源并退出而不再等待用户命令结束。示例获取资源分配，并执行 xterm，从而在其中可以交互地输入 yhrun HS.$ yhalloc -N16 xtermsalloc: Granted job allocation 65537(at this point the xterm appears, and salloc waits for xterm to exit)salloc: Relinquishing job allocation 65537169\n资源管理系统手册源分配并加载并行程序。halloc -N5 yhrun -ni0O myprogram170\n16.3 yhattach名字yhattach: 附接到作业步。ieyhattach [options] jobid.stepidIdsyhattach 附接到正在运行的作业步，从而获取其所有任务的 I/O。器，如 TotalView。。 -h, --help显示帮助信息并退出。。 --input-filter=task number。 --output-filter=task numbere --error-filter=task number仅传送标准输入到单个任务，或输出单个任务的标准输出或错误。本地进行。e -l, --label在每一行标准输出和标准错误前加上任务号。e --layout16.3. yhattach可用于并行调试过涯在 yhattach从控制进程获取作业步的任务布局信息，输出任务布局信息，然后退出。不附接到作业步。e -Q, --quiet不要输出一般信息。错误信息仍将显示。171\n资源管理系统手册e -u, ——usage显式简短帮助信息并退出。e -V, --version显示版本信息并退出。e。 -v, --verbose增加 yhattach KIL. TSA -v. GE HNL FOL GLARE示例附接到作业步。[ynattach 15.0WEE.[ynattach --output-filter=5 65386.15172\n16.4. yhbatch16.4 yhbatch名字yhbatch: 提交批处理脚本作业。ieyhbatch [options| script Largs...]sipsyhbatch 问资源管理系统提交一个批处理脚本。批处理脚本可以通过命令行以文件名形式给出，或者，如果没有指定文件名，yhbatch 将从标准输入读取一个脚本。批处理脚本中可以在可执行命令之前包含以",
        "。另外必须使用 select/linear 或 select/cons_res 插件。如果使用select/cons_res 插件，它必须使用参数 CR_Core, CR_Core_Memory, CR_ Socket或 CR_，Socket_ Memory。。 --begin=time正常提交批处理脚本到资源管理系统控制进程，但是通知控制进程推迟为作业分配资源，直到指定的时间。time 可以是 HH:MM[:SS] 格式，以在一天中的特定时间运行作业《如果该时间已经过去, 则认为是下一天的时间)。可以指定 midnight, noon 或 teatime (4:00PM)，也可以使用后绥 AM 或 PM 表示早上或下午。可以通过 MMDDYY 或 MM/DD/YY 或 YYYY-MM-DD 指定作业运行的日期。组合日期和时间则使用 YYYY-MM-DD[THH[:MM[:SS]]] 的格式。可以指定如 nowt+counttime-units 格式的时间，其中 time-units 可以是seconds 〈人缺省)，minutes，hours，days，或 weeks。可以使用关键字 today 和tomorrow 分别表示在当天或明天运行作业。在作业提交后可通过 yhcontrol 命令修改此时间值。例如:一 ~-begin=16:00一 --begin=now+ttlhour— --begin=now+60 〈默认为秒)一 --begin=2010-01-20T12:34:00JER:— 尽管时间格式中允许给出“秒数”字段，但是资源管理系统的调度周期精度不能保证作业在精确的时间开始运行。作业很可能在指定时间之后的下一个调度周期开始。确切的调度周期与调度器有关《〈如，默认的 sched/builtin 是 60 秒)。如条没有指定时间《〈只有日期)，缺省将是 00:00:00.174\n16.4. yhbatch— 如果指定日期时没有年份 如，MM/DD)，则使用当前年份，除非其与指定日期和时间的组合已经过去，在该情况下将使用下一年的年份。--checkpoint=timetHE VELA A. RANA TELE Ro A ASTRA EU “",
        "使用当前年份，除非其与指定日期和时间的组合已经过去，在该情况下将使用下一年的年份。--checkpoint=timetHE VELA A. RANA TELE Ro A ASTRA EU “minutes”,“minutes:seconds”, “hours:minutes:seconds”, “days-hours”, “ days-hours:minutes”WR “ days-hours:minutes:seconds” .--checkpoint-dir=directory指定作业的检查点映象文件人存储目录。缺省为作业的当前工作目录。--Comment=St77720任意注释。-C,--constraint=listfa TE AIR He. AUR eS A oP A 2 RE PE. list FT DA ea “&” CD和/或“1”(或) 分隅的多个特性。例如，--constraint=\"opterongvideo'\" 或 --constraint=\"fast|faster'。在第一个例子中, 同时具有特性“opteron”和“video”的节点才会被分配。在没有节点拥有这两个特性时，没有办法指定需要一个节点具有“opteron”特性，而另一个节点具有“video”特性。如果在所有分配俄的节点上仅需要一组特性中的一个, 则使用“或”操作符, 并将选项写在方括号中。 例如,“--constraint= [rack1|rack21rack31rack4]”可用于指定所有分配的节点必须位于一个机柜内，但是四个机柜中的任何一个均可。还可以指定所请求的具有某些特性的节点的个数，这通过在特性名字后跟一个星号和计数进行。例如,“yhbatch --nodes=16 --constraint=graphicrk4 .…”表示作业需要 16 个节点，至少其中 4 个节点必须拥有特性“graphics”。有具有节点数的约束只能用“与”操作符连接。如果没有节点具有请求的特性，则作业将被控制进行拒绝。—-contiguous请求分配连续节点。topology/tree 和 topology/3d_torus 插件不使用，因为这两者可以修改节点序。--cpu_bind=|{quiet,verbose ,|怒pe绑定任务到CPU。仅在使用 tasky/affinity 插件时有效。配置参数 TaskPluginParam可以覆盖此",
        "最少临时磁盘空间。166\n16.2. yhalloc。 -u, --usage显式简短帮助信息并退出。e -—-uid=userDAP user 的号份提交和运行作业，而不是执行 yhalloc 的用户。执行 yhalloc的用户号份将用于检查目标分区的访问权限。例如，root 用户可以使用此选项在RootOnly 分区中以普通用户寻份运行作业。xwser 可以是用户名或数值用户 UID。e -V, --version显示版本信息并退出。e -v, --verbose增加 yhalloc MIHAILA. TESA -v。缺省情况下仅显示错误信息。e -W, --wait=seconds此选项已被 --immediate 代替。e -w, --nodelist=node name listte OR Ta EAT A EAE BEY VA AG SP BE 2% BEB] CT cn[1-5,7,..)) Fax o MUZE FEY FEAST A AE CAR «BREA A 4 II AS BARE家资源管理系统重新排序。e --wckey=wckey作业使用的 wekey. AACE CPE TrackWCKey=no (ik), UCT KAR II.e -x, --exclude=node name list不要将指定的节点分配给作业。输入环境变量在启动时，yhalloc 将读取并处理如下环境变量中设置的选项。请注意，环境变量中的选项将覆盖批处理脚本中的选项，而命令行选项将覆盖环境变量中的选项。。 SALLOC_ACCOUNT: 同 -A, --account。 SALLOC_ACCTG_FREQ: 同 --acctg-freq。 SALLOC_BELL: 同 --bell167\n资源管理系统手册SALLOC_CONN_TYPE: 同 --conn-typeSALLOC_CPU_BIND: 同 --cpu_bindSALLOC_ DEBUG: 同 -v, --verboseSALLOC_EXCLUSIVE: 同 --exclusiveSALLOC_IMMEDIATE: 同 -I, --immediateSALLOC_JOBID: 同 --jobidSALLOC_MEM BIND: 同 --mem_bindSALLOC_NETWORK: [A] --networkSALLOC_NO BELL: 同 --no-bellSALLOC_OVERCOMMIT: 同 -0, --",
        "地请求 12 个处理器，则控制进程可能仅分配给 3 个节点。然而，通过使用 --cpus-per-task=3 选项，控制进程将知道每个任务需要同一节点上的 3 个处理器，并为 4 个任务分配 4 个节点。e -D, --chdir=path在执行命令之前将目录切换到 pathoe --exclusive此作业不能与其他运行的作业共享节点。此选项是 --share 的反义，哪个出现在命令行的最后哪个起作用。(缺省的 share/exclusive 行为与系统配置相关。)。 -F, --nodefile=node file159\n资源管理系统手册类似与 --nodelist，但是节点列表包含在文件 node file 中。列表中的文件名可以路多行。文件中的重复节点名将被忽略。列表中的节氮顺序不重要，节氮列表将科资源管理系统重新排序。。 --get-user-env|=timeout]|mode|此选项用于使 yhalloc 获取 --uid 所指定的用户的登录环境变量。环境变量通过运行“su - username -c /usr/bin/env”并分析输出的方法获取。请注症，yhalloc执行时的环境变量将比如此获取的环境变量更优先。如果不想被传递到加载的程序，请在运行 yhalloc 前清除相应的环境变量。可选的 timeout 值是秒数，缺省为 8秒。可选的 mode 值控制“su”的运行选项。mode 置为“S”时,“su”执行时没有“-”选项; mode 值为“L”时,“su”执行时有“-”选项，以复制登录环境。如果未指定 mode，则使用资源管理系统编译时的内置值。应用示例包括“--get-user-》” Kfs下二 o6 6env”, “--get-user-env=10”, “--get-user-env=10L”, “--get-user-env=S注意: 此选项仅在执行 yhalloc 的有效用户 UID W root NAR.。 -—-gid=group如果以 root 运行 yhalloc，且使用了 --gid 选项，则以 group 的",
        "仅在执行 yhalloc 的有效用户 UID W root NAR.。 -—-gid=group如果以 root 运行 yhalloc，且使用了 --gid 选项，则以 group 的组访问权限提交YENL. group 可以是组名字或数字的组 GID.。 -h, --help显示帮助信息并退出。。 —-hint=type根据应用提示进行任务绑定:一 compute_bound选择适合计算密集型应用的设置: 使用每个 socket 上的每个 core。一 memory_bound选择适合内存密集型应用的设置: 仅使用每个 socket 上的一个 core.— [no]multithreadLA | 使用 core 上额外的 thread，这可能对通信密集型应用有益。— help显示帮助信息。。 -I, --immediate|=seconds|如果资源在指定的时间内不能被满足则退出。如果没有指定秒数，则资源必须立即可用。缺省地，yhalloc 将阻喜等竺直到资源可用。160\n16.2. yhalloc-J, --job-name=jobname为作业指定名字。当和查看系统中的作业时，名字将和作业 JobID 一起显示。缺省的名字命令行指定的“commza7zd”。--jobid=jobid使用指定的 JobID 分配资源。注意: 仅对 root HR AR.-K, --kill-command|=siganl|yhalloc 在获取资源后总是运行用户指定的命令，并无穷等待直到该命令退出。如末指定了 --kill-command 选项，当资源管理控制进程通知 yhalloc 作业分配已被收回时，yhalloc 将向用户命令发送指定的信号。作业分配可能因几个原因被回收:有人使用 yhcancel 命令取消了作业，或作业到达运行时间限制等。如果没有指定aA MBE, Wika A SIGTERM.-k, --no-kill当分配给作业的节点失效时不要自动终止作业。用户需要自己在节点失效时进行容错。当发生节点失效时，运行在该节点上的活动作业步〈通各为 MPI 作业) 几乎肯定会发生致命错误;但是使用 --no-kill 时，分配给作业的节点不会被回收，从而用户可以在剩余的",
        "局部域选项，则每个 socket 被作为一个局部域。文持的选项值包括:— qluiet]SEB ISAT A PLA TE CRA)— vLlerbose]任务运行前报告绑和定情况一 no [nej]不绑定任务到 CPU CRE)— rank根据任务号自动绑定。0 号任务被绑定到 0 号 socket (2K core BK thread), FF.仅在整个节点分配给作业的情况下文持。一 map_cpu: list按照给出的列表将 CPU 映射到任务，其中 list 形如 cpuidd,cpuid1,...cpuidN .CPU ID 为十进制数，有前组“0x”时为十六进制数。仅在整个节点分配给作业的情况下文持。158\n16.2. yhalloc一 mask cpu: list按照给出的列表设置任务的 CPU #885, eA list 形如 mask0,mask1,...maskN .CPU 撞码总是十六进制数，前缀“0x”可选。— sockets自动生成把任务绑定到 socket WEIS. WARES MS AACN socket WAT, FY能导致非最优绑定。— cores自动生成把任务绑定到 core 的掩码。如果任务数与分配的 core 数不同，可能导致非最优绑定。— threads自动生成把任务绑定到 thread 的掩码。如果任务数与分配的 thread AA,可能导致非最优绑定。一 ldoms自动生成把任务绑定到 NUMA 局部域的掩码。如果任务数与分配的NUMA 局部域数不同，可能导致非最优绑定。— help显示帮助信息。。 -C, —-Cpus-per-task=ncpus告知资源管理系统控制进程，作业步的每个任务需要 ncpus 个处理器。知未指定此选项，则控制进程加你个尝试为每个任务分配一个处理需。例如，考虑一个 4任务的应用，每个任务需要 3 个处理器。如果系统由四处理器贡点组成，而我们简单地请求 12 个处理器，则控制进程可能仅分配给 3 个节点。然而，通过使用 --cpus-per-task=3 选项，控制进程将知道每个任务需要同一节点上的 3"
    ]
}