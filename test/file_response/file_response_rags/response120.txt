{
    "query": "管理员发现 Lustre 客户端在高并发场景下频繁出现 LDLM 锁缓存不足，导致锁管理性能下降。需通过调整 LRU 缓存参数优化锁缓存机制。需要配置哪些参数？",
    "summaries": [
        "Lustre 2.3 引入了多项参数和功能，用于优化 MDS 服务线程和网络性能。管理员可通过设置 `_num_threads` 控制线程数量，禁用自动创建。Node Affinity 功能允许将 MDS 线程绑定到特定 CPU 分区（CPT），提升缓存效率和内存局部性。此外，可配置 `mds_num_cpts`、`mds_rdpg_num_cpts` 和 `mds_attr_num_cpts` 来指定线程绑定的 CPT 范围。LNet 参数如 `tx_buffer_size`、`rx_buffer_size` 和 `enable_irq_affinity` 可调整网络性能，而 `credits` 参数影响网络通信的信用值，以适应不同网络环境。路由器缓存区功能则通过分配不同大小的缓冲区来优化消息转发。这些功能为系统调优提供了更多控制选项。",
        "Lustre 文件系统中的 `sync_on_lock_cancel` 参数用于控制在锁取消时是否同步日志，以避免数据不一致。该参数可设置为 `always`、`blocking` 或 `never`。建议不要禁用此功能，以免数据损坏。此外，Lustre 提供了多个参数来优化客户端元数据 RPC 流，如 `max_rpcs_in_flight` 和 `max_mod_rpcs_in_flight`，用于控制并行元数据操作的数量，从而提升性能。同时，通过 `rpc_stats` 可以监控元数据 RPC 的执行情况，帮助调整参数以适应不同的工作负载。Lustre 还使用自适应超时机制来动态调整 RPC 超时时间，以提高系统稳定性。",
        "Lustre 文件系统操作手册摘要：END_OFESET 选项不能与选项1同时使用，文件范围长度为 LENGTH，且不能与 -e 同时指定。Lockahead 请求模式包括 READ 和 WRITE，用于请求锁。ladvise 用于控制 LDLM 锁定行为，影响服务器端缓存管理。示例展示了如何使用 lfs ladvise 设置读取、不需或锁定提示。34.9.1 节介绍了批量 IO（16MB RPC）的优化，通过调整 brw_size 和 max_pages_per_rpc 参数提升性能。34.10 节提到提升小文件 IO 性能的方法，如 IO 聚合、使用 MPI-IO、避免锁定等。"
    ],
    "contents": [
        "1fs ladvise -a dontneed -s 0 -e 1048576000 /mnt/lustre/filel—请求文件/mnt/Luster/filel的前1MiB AY LDLM iB, DOSER MER TPA该文件此区域的OST 请求一个锁:clientl$S lfs ladvise -a lockahead -m READ -s 0 -e 1M /mnt/lustre/filel—请求文件/mnt/Luster/filel[3 MiB, 10 MiB] 范围的LDLM 写入锁，这将尝试从保存有该文件此区域的 OST 请求一个锁:clientl$S 1fs ladvise -a lockahead -m WRITE -s 3M -e 10M /mnt/lustre/filel—34.9. 大批量 /O (16MB RPC)34.9.1. 概述从 Lustre 2.9 jf, Lustre 文持的 RPC 大小最大已扩展到 16MB。在客户端和服务器之间传输相同数量的数据，启用更大的 RPC 意味着需要更少的RPC，OSS 可以同时向底层磁盘提交更多数据，因此可以生成更大的磁盘 IO 以充分利用磁盘日益增加的带宽。在各户问连接时，客户端将与服务硕协商允许使用的最大RPC。客户端始终可以发送小于此最大值的RPC。417\nLustre 文件系统操作手册 译者: 李硕客户端可通过在OST 上使用参数brw_size来获知最大 (首选) VO 大人小。所有与此目标交互的客户端都不能发送大于此值的RPC。客户问可以通过osc.*.max_pages_per_rpc 可调参数单独设置较小的RPC 大小限制。注意可为ZFS OST 设置的最小brw_size大小即该数据集的 recordsize 大小。这可以确保客户端可以随时写入完整的 ZFS 文件块，而不会强制为每个 RPC 执行读/修改/写操作。34.9.2. 示例为了启用更大的 RPC 大小，必须将brw_size的 IO 大小值更改为 16MB。临时更改bzw_size，请在 OSS 上运行以下命令:1 oss# lctl set param obdfilter.fsname-OST* .brw_size=16",
        "MDS MAX THREADS) “4 1024.注意圭载时，每个 CPT 每个服务局动两个 O0SS 和 MDS 线程，根据服务奉负载来动态增加运行的服务线程数量。设置* _num threads参数将立即为该服务局动指定数量的线程，同时禁用线程目动创建。(在 Lustre 2.3 中引入)Lustre 2.3 中引入了新的参数，为管理员提供了更多的控制。388\nLustre 文件系统操作手册 Pea Parmdqs rdqpg _ num threads一控制提供读取页服务的线程数。读取页服务用于处理文件关闭和 readdir 操作。mds attr num threads一控制为运行 Lustre 1.8 的客户端提供 setattr 服务的线34.2. 绑定 MDS 服务线程到 CPU 分区在 Lustre 2.3 版中引入的 Node Affinity (节点关联性) ，可以将 MDS 线程绑定到特定的 CPU 分区 (CPT) ,以提高 CPU 高速缓存使用率和内存局部性。将自动选择 CPT 数和 CPU 核心绑定的默认值，以便为给定数量的 CPU 提供良好的整体性能。管理员也可更改这些设置。有关指定 CPU 内核到 CPT 的有映射的详细信息，请参见本章第 4 节\"Tibcf调试\"。 mdqs_num cpts=[EXPRESSION] 绑定默认 MDS 服务线程 至由[EXPRESSION]定义的CPTs。如，mqs_num cpts=[0-3] 将绑定 MDS服务线程至CPT [0,1,2，3]。*mds rdpg num_cpts=[EXPRESSION] 绑和定读取页服务线程 至由[EXPRESSION]定义的CPTs。读取页服务负责处理文件关闭操作及readdir 请求。如，mqs_rqpg_num_cpts=[4]将绑定读取页服务线程至 CPT4。P>*mds attr num cpts=[EXPRESSION] 3h cE setattr AK 务线 程 至 由[EXPRESSION]定 义 的 CPTS。 WY WM fE KM 件/etc/modprobe.dq/1LIustre.conf中载入模块前设置参数。如:options lnet networks=tcp0",
        "END_OFESET。该选项不能与1 选项同时指定。文件范围长度为 LENGTH。该选项不能与-e同时指定。Lockahead 请求模式{TREAD, WRITE} 。请求一个该模式下的锁。通前，1fs ladqvise会将建议转发给 Lustre 服务禹，但无法保证何时以及哪些服务做会对建议做出反应。根据不同建议的类型以及受影啊的服务郁端组件的实时决策情况，建议可能会触发操作也可能不会触发操作。ladvise 的典型用例是使具有外部知识的应用程序和用户能够介入服务器端缓存管理。例如，如有果大量不同的客户端正在对文件进行小的随机读取，则在随机 IO AAR410\nLustre 文件系统操作手册 译者:前以大线性读取的方式预取页到 OSS 绥存的做法效益可观。由于发送到客户端的数据还要多得多，可能无法使用 fadvise0 将数据提取到每个客户端缓存中。ladvise lockahead的不同之处在于它试图通过在使用之前明确请求LDLM 锁来控制 LDLM 锁定行为。这不会直接影响缓存行为，相反，它可以在特殊情况下用于避免正省LDLM 锁定行为导致的病态结果 hia请注意，noexpandg建议适用于特定 六 ，因此通过 Is 使用它并不起作用。它只能用特定的用于 IO 的文件描述Linux 系统调用fadvise()和1Lfs ts () 只是一个各户端机制，它不会将建议传递给文件系统，而ladvise可以癌 Lustre {kas vin送建议或提示。34.8.2. 示例下面的例子中，持有第一个 1GB 的/mnt/Luster/ file1得到提示: 即将读取文件的前 1GB 部分。 °°clientlS 1fs ladvise -a willread -s 0 -e 1048576000 /mnt/lustre/filel/—下面的例子中，持有第一个 1GB 的/mnt/Luster/ filel得到提示: 文件的前1GB 部分在近期不会被读取，所以OST 可以在内存中清除该文件的绥存。clientl$S 1fs ladvise -a dontneed -s 0 -e 1048576000 /mnt/lustre/filel—请求文件/mnt/Luster/filel的前1MiB AY LDLM iB, DOSER MER TPA",
        "max rpcs in flight 参数定义了客户端并行发送到 MDT 目标的元数据 RPC 的最大数量，包括更改和不更改文件系统的RPC。这包含了所有文件系统元数据操作，如文件或目录统计、创建、取消链接等。其默认值为8，最小值为1，最大值为 256。在 Lustre 客户端上运行以下命令设置max rpcs in flight Bx:client$ lctl set param mdc.*.max tpcs in flight=16MDC ji) max_mod_rpes_in_flight 参数定义了客户端并行发送到 MDT 目标的更改文件系统的RPC 的最大数量。例如，Lustre 客户端在执行文件或目录创建、取消链接、访问权限修改、所有权修改时会发送更改式 RPC。其默认值为7，最小值为1，节KIBYA 256.在 Lustre 客户端上运行以下命令设置max mod _rpcs in flight BR:client$ lctl set param mdc.*.max_mod_rpcs in flight=12max mod rpcs in flignt值必须比max_ rpcs in flight 值小 同时也必须小于或等于MDT 的 max_mod_rpcs_per_client 值。如果未满足其中一个条件，设置将失败，并在 Lustre 日志中写入明确的错误消息。498\n1—23456101213141516171819Lustre 文件系统操作手册 译者:这ayMDT 的 max mod_rpcs per client参数是内核模块mdt的可调参数，它定义了每个客户问所允许的处理中的最大更改式 RPC 数量。该参数可以在运行时进行更新，但此更改仅对新客户端连授有效。其默认值为8。在 MDS 上运行以下命令设置max mod rpcs per client Bx:mds$ echo 12 > /sys/module/mdt/parameters/max mod_rpcs per client39.4.5.2. 客户端元数据 RPC PEGE rpc_stats 文件包含了显示更改式 RPC 相关信息的直方图，可用于确定应用程序执行更改文件系统的元数据操作时所实现的并行级sl).示例:client$ lctl get param mdc.*.rpc_ statssnapshot time:",
        "式 RPC 相关信息的直方图，可用于确定应用程序执行更改文件系统的元数据操作时所实现的并行级sl).示例:client$ lctl get param mdc.*.rpc_ statssnapshot time: 1441876896.567070 (secs.usecs)modify RPCs in flight: 0modifyrpcs in flight rpcs + Cum %0 : 0 0 01: 56 0 02 : 40 0 03: 70 0 04 41 0 05: 51 0 16: 88 0 17: 366 1 28: 1321 5 89: 3624 15 2310: 6482 27 5011: 7321 30 8112: 4540 18 100文件内容包括:。 snapshot time 一读取文件时的 UNIX epoch 瞬间。。 modify RPCs_in_ flight 一 MDC 发起但当前还未完成的更改式 RPC 数。该值必须永远小于或等于max mod rpcs in flight.。 rpcs in flight 一发送RPC 时当前挂起的更改式 RPC 数量，包括相对百分比(3) 和宗积百分比 (cum %).499\n—Lustre 文件系统操作手册 译者:这ayMW AR KR ub ay BE oe st 7c Bt ie RPC AE KRW CAA Ke INimax mod_rpcs_in flight值的挂起元数据RPC，则意味着可以增加max mod rpcs_ in flignt值来提高元数据更改性能。39.5. Lustre 文件系统超时配置在 Lustre 文件系统中，RPC 超时使用目适应超时机制〈默认为司用)。服务融跟踪RPC 完成时间并同和客户端报告，以便估计未来 RPC 的完成时间。客户问使用这些佑计值来设置 RPC 超时值。当服务货请求处理因某种原因而减慢时，服务硕 RPC 完成时间延长，客户端则随之修改 RPC 超时值以允许更多的时间来守成RPC。如宁服务郁上排队的 RPC 接近客户端指定的RPC 超时，为避免 RPC 超时和上断开和重新连接的循环，服务僚会癌客己端",
        "CPU 分区，通过 LNet 模块的选项进行指定。例如，o2ipbo(ib0) [0,1] 确保了o2ipb0的所有应妃由在CEPT0和CPT1上执行的LND 线程处理; tcpl (eth0) [0] 确保了tcpl的消息由CPT0上的线程处理。34.3.4. 网络接口信用网络接口 (ND 信用在所有 CPU 分区 (CPT) 之间共享。例如，如果一台机器有四个 CPT 且 NI 信用值为 S12，则每个分区有 128 个信用值。如果系统中存在大量 CPT，则 LNet 将检查并验证每个CPT 的 NI 信用值，以确保每个 CPT 都有可用的信用值。如果一人台机需有16个CPT且NI信用值为236，则每个分区只有 16 个信用值，将可能会对性能产生负面影响。因此，LNet SA aka (Bie A 8*peer credits (默认情况下，peer _ credits 为 8) ，因此每个分区都有 64 个信用值。增加 creqits/ Peer_creqdits 数使得 LNet FENIAN KITA Qik BREN网络或对等节点并保持传输人饱和，从而提高高延迟网络的性能〈以消耗更多内存为代价)。管理员可以使用ksoclnd或ko2iblndq修改 NI {AAA Ee PIN IA, TCP 连接的信用值被设置为 256。ksocklnd credits=256Wt IB 连接的信用值为 256:ko2iblnd credits=256390\n—Lustre 文件系统操作手册 译者:注意在 Lustre 2.3 及以上版本中，LNet 可能会重新验证 NI 积分，则管理员请求可能不会持续。34.3.5. 路由器缓存区当一个节氮被设置为LNet 路由融时，会分配三个缓存区: 极小、小和大的缓存区。这些缓存区按 CPU 分区分配，用于缓存到达路由需竺转发到下一跳的消县。三种不同大小的缓存区适应不同大小的消四。如采消息可以放入极小缓冲区，那么使用极小的缓冲区; URE ABEL AD IZ神区但是可以放入小组神区，则使用小缓冲区; 如采消息不适用于极小或小绥补区，则EA KBHPXBet",
        "由[EXPRESSION]定 义 的 CPTS。 WY WM fE KM 件/etc/modprobe.dq/1LIustre.conf中载入模块前设置参数。如:options lnet networks=tcp0 (eth0)options mdt mds_ num cpPts=[0]34.3. LNet 参数调试本贡主要介绍 LNet 可调参数。在某些系统上可能需要使用这些参数来提高性能。34.3.1. 发送和接收缓冲区大小内核在网络上分配发送和接收信息的缓冲区。使用ksocklnd 分开设置用于发送和接收信息的绥神区的参数。1 options ksocklnd tx buffer Sizer0 rx puffer size-0如果这些参数保留默认值 《0) ，系统会目动调整发送和接收缓神区大小。几乎在所有情况下，此默认设置会产生最佳性能。如果您不是网络专家，请不要尝试调整这些参389\n——11Lustre 文件系统操作手册 译者:As大34.3.2. 硬件中断 (enable irq affinity)Poe) 25 78 Bic is EG AS) Te A AY HE A RSE GE CPU 进行处理。在某些情况下，我们希望将网络流量保持在单个 CPU 本地，以便保持处理需缓存温度并减少环境切换的影响。这特别有利于具有多个网络接口尤其是接口数量等于 CPU 数量时的 SMP 系统。司用enable irq affinity参数，请输入:options ksocklnd enable irg affinity=1在其它情况下，如果您运行在一个含单个快速接口《如 10Gb/s) 和两个以上的 CPU的SMP 平台，则蔡用该参数可能会提升性能:options ksocklnd enable irg affinity=-0此参数默认为关闭。请通过测试更改此参数时的性能情况来进行调试。(在 Lustre2.3 中引入)34.3.3. 绑定针对 CPU 分区的网络接口Lustre 2.3 及以上版本提供了高级网络接口控制。管理员可以将接口绑定到一个或多个 CPU 分区，通过 LNet 模块的选项进行指定。例如，o2ipbo(ib0) [0,1] 确保了o2ipb0的所有应妃由在CEPT0和CPT1上执行的LND 线程处理; tcpl (",
        "IO 大小值更改为 16MB。临时更改bzw_size，请在 OSS 上运行以下命令:1 oss# lctl set param obdfilter.fsname-OST* .brw_size=16要持久地更改brw_size，请运行:1 oss# lctl set param -P obdfilter.fsname-OST* .brw_size=16当客户端连接到 OST 目标时，它将从目标中获取bzrw_size，并从brw_size中获得其最大值和本地设置作为max_pPages_per_rpc的实际了RPC 大小。因此，要启用16MB 的RPC，客户端的max pages per rpc必须设置为 16M (如果 PAGESIZE 为4KB，则为 4096) 。临时更改max_Pages per _rpc请在客户端上运行以下命令:1 client$ 1Lct] set Param osc.fsname-OST* .max pages per Lpc=16M使更改永久生效，运行:1 client$ lctl set Param -P obdfilter.fsname-OST*.osc.max_ pages per rpc=1™!注意OST 的prw_size可以随时更改。但客户端必须重新安厂并重新协商 RPC 最大大小。34.10. 提升 Lustre 小文件 IO 性能应用程序将小文件块从多个客户端写入单个文件可能会导致较送的 IO 性能。提高Lustre 文件系统小文件的 IO 性能，我们可以:。在将 IO 提交到 Lustre 文件系统之前，应用程序先进行 IO 聚合。默认情况下，Lustre 软件将强制执行 POSIX 语义一致性。因此，如果它们都同时写入同一文件会导致客户端节点之间发生 ping-pong 锁定。如果应用程序使用MPI-IO，则实现此功能的一种直接的方法是在 Lustre ADIO 驱动程序中使用MPI-IO CollectiveWrite 功能。418\nayLustre 文件系统操作手册 译mKAs大。 证应用程序对文件执行 4kB 的O_DIRECT大小IO，并禁用输出文件上的锁定。这可以避免部分页面 IO 提交，以及客户端之间的争用。。让应用程序写入连续的数据。。为 OST 添加更多磁盘或",
        "cancel 功能〈黑认司用) WRIT 2 he Pi Be BS入对象的交叉区域后的 OSS 及其中一个客户端朋省时可能导致的数据不一致问题。当违反连续写入的 POSIX 要求并存在损坏数据的淤在风险时，将创建一个条件。局用sync-on-lock-cancel 后，如果取消的锁附加了任何满足此条件的不稳定的写入，则 OSS 会在锁取消时将日志同步导入磁姓。因此，尽管禁用sync-on-Iock-cance1l功能可以提升并发写入工作负载的性能，我们仍建议您不要蔡用此功能。497\n—Lustre 文件系统操作手册这aysync_on lock _cancel1人参数可设置为以下值: :。 always 一在锁取消时强制执行日志更新 (async_journal司用时的默认值)。\"blocking一只在因阻塞回调引起的锁取消时强制执行日志更新。\"nevet 一不强制执行任何日志更新 〈async_journal华用时的默认值)。例如，将 sync_on_lock_cancel 设置为不强制执行日志更新，使用以下类似命4S:$ lctl get_param obdfilter.*.sync_on lock cancel2 obdfilter.lol-OST0001.sync on lock cancel=never——39.4.5. 客户端元数据 RPC 流的调试客户端元数据RPC 流表示客户端并行发起的到MDT 目标的元数据RPC。元数据RPC 可以分为两类: 不更改文件系统的请求〈如 getattr 操作) 和更改文件系统的请求(如 create、unlink、setattr 操作) 。为优化客户端元数据RPC iit, Lustre 提供了几个可调参数来根据网络条件和集群大小调整行为。请注意，增加并行发起的元数据RPC 的数量可能会改善元数据密集型并行应用程序的性能，但会在客户端和 MDS 上消耗更多的内存。(在 Lustre 2.8 中引入)39.4.S.1. 配置客户端元数据RPC流 MDC AY max rpcs in flight 参数定义了客户端并行发送到 MDT 目标的元数据 RPC 的最大数量，包括更改和不更改文件系统的RPC。这包含了所有文件系统元数据操作，如文件或目录"
    ]
}