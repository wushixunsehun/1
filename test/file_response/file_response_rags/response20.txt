{
    "query": "基于对象的循环（ORR）策略的配置方法有哪些参数？",
    "summaries": [
        "TBF策略通过定义规则动态设置RPC队列的速率上限，无需手动配置每个队列。规则按顺序匹配，新规则优先级最高。TBF可基于NID、JOBID、OPCode、UID/GID等分类，支持精细控制。NRS Delay策略通过延迟请求处理模拟高负载，用于发现时间相关问题，参数包括nrs_delay_min、nrs_delay_max和nrs_delay_pct。OST和MDT服务可通过参数设置NRS策略，如tbf nid、delay等。设置方法涉及修改相关配置参数，以实现不同的调度策略。",
        "本文档介绍了Lustre文件系统中几种RPC调度策略的配置和使用方法。ORR策略用于设置支持的RPC类型，如reads、writes或reads_and_writes。TRR策略基于目标OST索引进行批量循环调度，其参数与ORR类似。TBF策略通过限制RPC速率来保证服务质量，可根据NID、JobID、OPCode、UID/GID等分类，并通过规则列表动态调整速率限制。",
        "本文档介绍了Lustre文件系统中关于RPC批处理大小设置和基于对象的循环（ORR）策略的配置方法。1-65535用于设置服务上最大批处理大小，例如设置ldlm.canceld服务的最大批处理大小为16。对于高优先级RPC，可分别设置常规和高优先级的批处理大小。ORR策略用于批量读写RPC的调度，每个批次由相同后端文件系统对象的RPC组成，适用于ost_io服务。ORR策略通过按文件偏移量排序RPC来提高吞吐量。可调参数包括nrs_orr_quantum（确定最大批处理大小）、nrs_orr_offset_type（决定排序依据逻辑或物理偏移量）和nrs_orr_supported（确定处理的RPC类型）。这些参数可通过lctl命令进行设置和调整。"
    ],
    "contents": [
        "RPC 进行排序。读取 ORR 策略的仿移类型 AIS一{Ty1 $ Ictl get param ost.OSS.ost_io.nrs orr offset type2 ost.OSS.ost_io.nrs orr offset _type=reg offset type:physical3 hp offset _type:logicalIRL (reg_offset_type) 和高优先级 (hp_offset type) RPC AAAS tints类型。设置 ORR 策略的侦移类型 ，运行:402\n11231Lustre 文件系统操作手册 译者:这ay$ lctl set param ost.OSS.ost_io.nrs orr offset _type=physical |logical这将设置常规和高优先级 RPC FY ib EE FS EE您还可以运行以下命令为毅规和高优先级 RPC 指定不同的侦移类型 :$ lctl set Param ost.OSS.ost_io.nrs orr offset type=reg offset _type|hp offset type:physical |logical例如，将高优先级 RPC AY iit ASC PEMA EE Wd ASE, TBAT:$ lctl set_paramost.OSS.ost_io.nrs orr offset _type-hp offset _type:physicalost.OSS.ost_io.nrs orr offset _type-hp offset _type:physicalHOU Ea TIA, EAT LEA a OS i A a CZK RPC 批处理最大大小设置为不同的值。注意无论此可调参数的值为什么，只有逻辑侦移量可以用于批量写入 RPC 的排序。。 ost.OSS.ost_10.nrs_ orr supportedost.OSS.ost_io.nrs orr supported 用于确定 ORR 策略处理的RPC 类型 ,读取 ORR 策略文持的RPC 类型，运行:$ lctl get_param ost.OSS.ost_io.nrs orr supportedost.OSS.ost_10.nrs orr supportec=reg_ supported: readshp_supported=reads_ and writesERAN, SEAT LG EEL ( reg_dquantum) 和高优先级 (hp_quantum)",
        "1-65535这将为解规和高优先级RPC〈如有果 PLRPC 服务文持高优先级 RPC) 设置给定服务上多许的最大批处理大小。例如，将1dlm_cance1d服务上允许的最大批处理大小设置为 16 ，请运行:1 $ lctl set Param ldlm.services.ldlm canceld.nrs_crrn_quantun=162 ldilm.services.ldim canceld.nrs_ crrn_quantune16对于文持高优先级 RPC AY PTLRPC 服务，您也可 CA UA ey LEZ RPC 指定不同的最大批处理大小:1 S letl set param {service} .nrs crrn_ quantum2 reg quantum|hp quantum:3 1-65535\"PUN, FEldlm_cancel dhkRH EK ey ICR RPC 批处理大小设置为 32:1 $ Ictl set Paramldim.services.ldlm canceldq.nrs_crrn cuantumrr'hp quantum: 32\"2 ldlm.services.ldim canceld.nrs crrn_ quantun=hp quantum: 32HOU Ea TIA, EAT LEA a OS i A a CZK RPC 批处理最大大小设置为不同的值。34.6.3. 基于对象的循环 (ORR) 策略基于对象的循环 (ORR) 策略对批量读写 (brw) RPC 的批量循环调度，每个批次由属于相同后端文件系统对象的RPC (由 OST FID 标识) 组成。ORR 策略仅适用于 ost_io 服务。RPC 批处理可能包含批量读取和批量写入 RPC.根据每个RPC 的文件偏移量或物理磁盘偏移量 〈仅适用于批量读取 RPC) ，每个批处理中的 RPC 按升序方式排序。ORR 策略旨在通过顺序读取批量 RPC (也可能包括批量写入RPC) 来增加革些情况下的批读取吞吐量，从而最大限度地减少昂贵的磁盘查找操作。任何资源利用率的改善或更好地利用 RPC 间的相对位置都可能有助于提升性能。401\n%my这Lustre 文件系统操作手册ayORR 策略有以下可用于调整其行为的可调参数 :。 ost.OSS.ost io.nrs_orr",
        "ost_10.nrs orr supportec=reg_ supported: readshp_supported=reads_ and writesERAN, SEAT LG EEL ( reg_dquantum) 和高优先级 (hp_quantum) RPCs 有不同的支持的RPC 类型。为 ORR 策略设置文持的RPC 类型，运行:$ lctl Set Param ost.OSS.ost_io.nrs orr Supported=reads|writes|reads_and writes这将设置 ORR 策略文持的项规和高优先级 RPC 类型为指定值。EXE AT GSTS LA Pa A A tes CIC RPC 指定不同的文持类型 :$ lctl set param ost.OSS.ost_io.nrs orr supported=reg _supported|hp supported:reads|writes|reads_and writesBON, AR SUBACK RPC 文持类型设置为批量读和批量写:403\n123Lustre 文件系统操作手册这ay$ lctl set_paramost.OSS.ost_1o.nrs orr supported=reg_supported:reads and writesost.OSS.ost_1o.nrs orr supported=reg_supported:reads and writesHU Ea TIA, ET EEA a OS i A a CZK RPC 的文持类型设置为不同的值。34.6.4. 基于目标的循环 (TRR) 策略基于目标的循环 (TRR) 策略对 brw RPC 执行批量循环调度，每个批次由属于相同OST 的RPC《〈由QOST索引标识) 构成。除了使用 brw RPC 的目标 OST 索引而不是后端 fs 对象的 OST FID 来确定 RPC 调度顺序以外，TRR 策略与基于对象的循环 CORR) 策略相同。TRR 策略和 ORR 策略的实施效果相同，它使用以下可调参数来调整其行为:。 ost.OSS.ost io.nrs trr quantum与 ORR 策略中的 ost.OSS.ost_io.nrs orr quantum 参数的目标和用法完全相同。* ost.OSS.ost io.nrs trr offset type与 ORR 策略",
        "RPC 间的相对位置都可能有助于提升性能。401\n%my这Lustre 文件系统操作手册ayORR 策略有以下可用于调整其行为的可调参数 :。 ost.OSS.ost io.nrs_orr quantumost.OSS.ost_io.nrs orr quantum 用于确定RPC 的最大批处理大小，度量单位是 RPC 的数量。读取 ORR 策略允许的最大批处理大小，请运行:1 $ Ictl get Param ost.OSS.ost_io.nrs orr quantum2 ost.OSS.ost_io.nrs orr quantun=reg_ quantum: 2563 hp quantum: 16WEAN, Sa Wee (reg_quantum) 和高优先级 (hp_quantum) RPCs 有两个独立的最大批处理大小。设置 ORR 条略允许的最大批处理大小，运行:1 $ Ictl set param ost.OSS.ost_io.nrs orr quantun=2 1-65535这将为常规和高优先级 RPC 所人允许的最大批处理大小设置指定的大小。IBA LAH UA LIGA RPC 指定不同的最大允许批处理大小，请运行:1 $ Ictl set param ost.OSS.ost_io.nrs orr quantun=2 reg quantum|hp quantum:3 1-65535PUN, RTL RPC 的最大批处理大小设置为 128 ，请运行1 $ Ictl set param ost.OSS.ost_io.nrs orr quantumereg_quantum:1282 ost.OSS.ost_io.nrs orr quantun=reg_quantum:128i a TIE, RAT EAE PS SA A ea SCZ RPC 批处理最大大小设置为不同的值。* ost.OSS.ost_10o.nrs_ orr offset typeost.OSS.ost_io.nrs orr offset type 用于确定ORR 策略是基于逻辑文件偏移量还是物理磁盘侦移量对每批次 RPC 进行排序。读取 ORR 策略的仿移类型 AIS一{Ty1 $ Ictl get param ost.OSS.ost_io.nrs orr offset type2 ost.OSS.ost_io",
        "此时，除了RPC处理速率低于配置值外，不会有其他负面影响。在这种情况下，配置速率较高的队列将比配置较低的队列拥有较高的优先级，但不会有队列被钱死。在管理队列的RPC速率时，无需手动设置每个队列的速率，而可以通过定义规则，由TBF策略匹配来确定RPC队列的速率上限。所有定义的规则形成一个有序列表。每当创建一个新队列时，会遍历规则列表，将第一个匹配的规则作为队列的规则，这样队列就获得了自己匹配RPC念牌发放速率。在运行时，规则可以动态加入规则列表，或从规则列表中删除。每当规则列表发生变动，RPC队列将更新其匹配的规则。目前，RPC的分类可以基于RPC的NID、JOBID、OPCode和UID/GID。当启用TBF策略时，可以选用其中一种类型，或者直接使用 tbf 来启用基于上述所有属性共同分类，以进行精细的RPC请求分类。以下为TBF可选的分类类型。o tbf nid: 基于客户端的NID进行分类。e tbfjobid: 基于RPC的joblDs进行分类。o tbf opcode: 基于RPC的操作码类型进行分类。o tbf uid: 基于RPC的用户ID进行分类。o tbf gid: 基于RPC的组ID进行分类。作者: 李希 更新时间: 2023年6月7日\nLustre 可调参数全解TBF策略提供了可调参数 nrs_tbf_ rule 来定义TBF规则。e delay: NRS Delay策略的功能是扰乱PTLRPC层的请求处理时间，以模拟服务器的高负载，从而发现和暴露与时间有关的问题。局用该策略后，当一个请求到达时，PTLRPC将延迟一段时间才开始处理该请求。这个从请求到达时间到开始处理的延迟，处在一个用户可自定义配置的学围内，由NRS策略计算生成。生成请求延IRIS, NRS Delay策略将请求存储在一个名为cfs_binheap的二插堆数据结构中，二插堆会根据请求开始时间对请求进行排序。一旦请求的开始时间已到，就会从二插堆中移除该请求，进行处理。延迟策略可以在所有类型的PTLRPC服务上局用，并提供以下可调参数用来调整策略行为: nrs_delay",
        "{{ policy }};e 将MGS的mdqs.MDS.{{ service }}.nrs policies 设置为 {{ policy }}.35. ost_nrs_crrn_quantum35.1 简介本参数用来设置CRR-N策略的每批次RPC的最大RPC数量。关于CRR-N策略的含义，请参看参数ost_nrs_policies。作者: 李希 更新时间: 2023年6月7日\nLustre 可调参数全解将所有MDT的 mds.MDS.{{ service }}.nrs_policies 设置为 delay ;将MGS的 mds.MDS.{{ service }}.nrs_ policies 设置为 qdelay ;将所有MDT的 mds.MDS.{{ service }}.nrs delay pct 设置为 {{ percent }};将MGS的mas .MDs.{{ service }}.nrs delay pctiXB/J {{ percent }} 。49. ost thf_nid_ rule start: 在O0ST上创建一个TBF NID策略的规则49.1 简介本参数用来在OST上创建一个TBF NID策略的规则。注意，新创建的规则优先级高于所有已存在的规则，也就是说，新规则排在规则列表的最前面，会被首先匹配。关于TBF策略的含义，请参看参数ost_nrs_policies。在设置 nrs_tbf_rule 参数之前，需要首先将 nrs_policies 设置为tbf nid,49.2 设置方法将所有OST的 ost.oss.{{f service }}.nrs_policies 设置为tbf nid;将MGS的 ost.0SS.{{ service }}.nrs_policies 设置为tbf nid;将所有OST的 ost.0SS.{{ service }}.nrs tbf rule 设置为 start {{ name }} nid={{ nid }} rate={{rate }};将MGS的 ost.OSS.{{ service }}.nrs tbf rule 设置为 start {{ name }} nid={{ nid }}",
        "进行排序。一旦请求的开始时间已到，就会从二插堆中移除该请求，进行处理。延迟策略可以在所有类型的PTLRPC服务上局用，并提供以下可调参数用来调整策略行为: nrs_delay min, nrs delay max和 nrs delay pct.请注意，orr和trr策略只适用于ost_io服务。33.2 设置方法OST服务NRS策略的设置方法:e 将所有OST的ost.0Sss.{{ service }}.nrs_ policies 设置为 {{ policy }};e 将MGS的ost.0ss.{{ service }}.nrs policies 设置为 {{ policy }}.34. mdt_nrs_policies: 设置MDT PTLRPC服务使用的网络请求调度策略34.1 简介本参数用来设置MDT PTLRPC服务使用的网络请求调度策略。其策略类型与参数ost_nrs_policies类似。MDT服务包括:e mdt io服务: 处理punch请求，或DoM的MO请求。e mdt fld服务: 处理FLD (Fids Location Database) 请求。e mdt_seqmARss: 处理为FIDs 《文件标识符) 分配元数据序列 (SEQ) 的请求。e mdt_sedqs服务: 处理为数据对象分配超级序列的请求。e mdt_out服务: 处理对象更新 (Object Update, OUT) 的请求。在交叉引用操作中，客户端发送请求至主MDT，主MDT把操作分解成对象更新，OSP (对象存储代理) 再把这些更新发送到远程MDT来执行。这些更新请求称为OUT请求。e mdt_setattr服务: 暂时不使用。e mdt_readpage服务: 处理读取dir、关闭文件和配额请求。e mdt服务: 默认服务，处理来自客户端MDC的请求。34.2 设置方法MDT服务NRS策略的设置方法:e 将所有MDT的mdqs .MDSs.{{ service }}.nrs_policies 设置为 {{ policy }};e 将MGS的mdqs.MDS.{{ service }}.nrs policies 设置为 {{ policy }}.35. ost_nrs_crrn_",
        "将第一个匹配的规则作为其规则，从而确定 RPC 令牌速率。规则可在运行时谎加到列表或从列表中删除。每当规则列表发生更改时，队列将更新其匹配的规则。@)>34.6.5.1. 启用 TBF 策略”命令:lctl Set Param ost.OSS.ost_io.nrs policies=\"tbf <policy>\"—Ha, RPC 可以根据其NID、JOBID、OPCode 或 UID/GID 来进行分类。启用 TBF策略时，您可以指定其中一种方式，或使用\"tbf\"' 允许所有方式并执行细粒度 RPC 请求分类。405\nLustre 文件系统操作手册 译者:这ay示例:1 $ lctl set Param ost.OSS.ost_io.nrs policies=\"tbf\"2 $ lctl Set param ost.OSS.ost_io.nrs policies=\"tbf nid\"3 $ lctl set param ost.OSS.ost_io.nrs policies=\"tbf jobid\"4 5 lctl set param ost.OSS.ost_io.nrs policies=\"tbf opcode\"5 $ lctl Set param ost.OSS.ost_io.nrs policies=\"tbf uid\"6 $ lctl set_ param ost.OSS.ost_io.nrs policies=\"tbf gid\"34.6.5.2. 局用 TBF 规则 «TBF 规则在ost.0SS.ost _ io.nrs thf rule参数中定义。命令:1 lctl Set Param x.x.x.nrs tbf rule=2 \"[reg|hp] start rule name arguments...\"SEP, 'rule_name' 为TBF WU, ‘arguments’ 为包含详细规则的字符串。以下是 TBF 策略的不同类型 :。基于 NID 的TBF 策略命令:1 lctl Set Param x.x.x.nrs tbf rule=2 \"[reg|hp] start rule name nid={nidlist} rate=rate\"'nidlist’ 的格式与配置LNET 路由相同。y7ate'",
        "ORR 策略中的 ost.OSS.ost_io.nrs orr quantum 参数的目标和用法完全相同。* ost.OSS.ost io.nrs trr offset type与 ORR 策略中的 ost.OSS.ost_io.nrs orr offset type 参数的目标和用法完全相同。。 ost.OSS.ost_ io.nrs trr supported与 ORR 策略中的 ost.OSS.ost_io.nrs orr supported 参数的目标和用法完全相同。(在 Lustre 2.6 中引入)34.6.5. 令牌桶过滤句 (TBF) 策略STARE ait (TBF) 策略通过强制限制客户端或作业的 RPC 速率而使 Lustre 服务达到一定的 QoS 〈服务质量)。404\nEnaueuebased onIDDequeuebased ondeadlines>@eeae 中国中中国回国加 56>].中国国国加 »6>»>@eaeae »§”Incoming 会 HandlingRPC ie RPC图 28: Internal stucture of TBF policyAl 32.1 TBF 策略的内部结构= RPC 请求到达时，TBEF 策略根据它的分类将它放到一个等竺队列中。根据 TBF配置，RPC 请求的分类可以基于了PC 的 NID BK JobID. TBF 策略在系统中需要维护多个队列，RPC 请求分类的每个类别有一个队列。这些请求在处理之前等竺FIFO 队列中的令牌，从而使 RPC 速率保持在限制乙下。Lustre 服务太忙无法及时处理所有请求时，所有队列的处理速率都不会达到指定值。但除了一些 RPC 速率比配置慢以外，并无任何坏处。在这种情况下，速率较高的队列比速率较低的队列具有优势。管理队列的 RPC 速率，我们不需要手动设置每个队列的速率，而是通过定义TBF策略匹配规则来确定 RPC 速率限制。所有定义的规则存储在有序列表中。每个新创建的队列将遍历规则列表并将第一个匹配的规则作为其规则，从而确定 RPC 令牌速率。规则可在运行时谎加到列表或从列表中删除。每当规则列表发生更改时，队列将更新其匹配的规则。@)>34.6."
    ]
}