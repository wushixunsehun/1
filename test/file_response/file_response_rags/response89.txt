{
    "query": "在 Lustre 文件系统中，如何通过参数配置 OST 服务的 Delay 策略延迟处理请求的时间范围？请说明相关参数的含义及配置方法。",
    "summaries": [
        "本文档介绍了Lustre文件系统中NRS（Network Resource Scheduler）的TBF（Token Bucket Filter）规则配置、实时策略和延迟策略。TBF用于控制IO请求的速率，支持添加实时特性以确保高优先级请求的带宽分配。延迟策略通过模拟高负载来测试系统对时间敏感问题的处理能力，允许设置请求延迟的最小和最大时间范围。这些功能可通过lctl命令进行配置和调整。",
        "为使用 ldiskfs 格式的 OST 指定非默认的 inode ratio 可能导致索引节点总数超过限制，从而引发空间超限错误，浪费空间并降低 e2fsck 速度。应使用默认 inode ratio 以确保系统正常运行。OST 文件系统检查时间受多种因素影响，正常情况下每 TiB 需 5-30 分钟，若存在大量错误则时间会增加。Lustre 文件系统有多个极限值，如最大 MDTs 数量、OSTs 数量、OST 大小、客户端数量等，这些值受架构和系统限制，部分可通过重新编译修改。文件条带化、文件大小、目录文件数等也有限制，具体数值因文件系统类型（如 ldiskfs 或 ZFS）而异。Lustre 支持大文件和大量文件，但实际容量受限于 OST 空间和配置。",
        "本文档介绍了Lustre文件系统中与RPC延迟和无锁IO相关的可调参数。通过`lctl get param`和`lctl set param`命令可以查看和设置服务的最大延迟时间（包括常规和高优先级RPC）以及请求延迟的百分比。同时，还提到了无锁IO特性，允许客户端绕过锁定以减少争用，并介绍了相关参数如`max_nolock_bytes`和统计信息的记录位置。此外，还描述了`lfs ladvise`命令用于向服务器提供文件访问建议，如预读、清除缓存、锁提前等。"
    ],
    "contents": [
        "相同速率限制的类获得的带宽要比预先均衡配置所获得得带宽要少。造成这种情况的原因是拥塞服务釉上的索重负载会导致某些类错过最后期限。在出列时，令牌的数量可能于 1。在最初的实现中，所有类都被平等对待，以罗松寺弃超额的令牌。随痢硬令牌补偿〈HTC) 策略的实施，我们使用 HTC 匹配的规则对类进行配置。个特性意味痢该类队列中的请求具有较高的实时性要求，必须尽可能满足市宽分配。错过最后期限时，该类保持最后期限不变，剩余的时间 〈剩余的流逝时间除以 1 将被补偿到下一轮。从而确保了下一个空闲 IO 线程始终选择此类来服务，直到所有累计的超额令牌处理完毕或该类队列中没有挂起的请求。命令:添加实时特性的新命令格式:lctl set param x.x.x.nrs tbf rule=\\\"start rule name arguments... realtime=1示例:$ lctl set_param ost.OSS.ost_io.nrs tbf rule\"start realjob jobid-{dd.0} rate=100 realtime=1在这个例子中，那些JopID 为 dd.0 的 RPC 将以 100 req/sec 的速率进行实时处理。(在Lustre 2.10 中引入)34.6.6. 延迟策略NRS 延迟策略旨在通过于扰 PtlRPC 层的请求处理时间来模拟高服务器负载，从而暴露与时间有关的问题。如果局用此策略，将在请求到达时计算应该开始处理请求的时间位移量，并人允许其在用户定义的范围内波动。然后使用cfs_binheap将请求按照分配的开始时间进行排序，并保存。一旦请求的开始时间已过，它将从 binheap 中移除以供处理。412\nLustre 文件系统操作手册 译者:这aX延迟策略可在所有类型的 PHURPC 服务上局用，有以下可用于调整其行为的可调参数:* {service}.nrs delay min{service}.nrs_delay_min 用于控制请求被此策略延迟的最短时间量 CLARA单位) 。默认值是 5 秒。读取此值运行:1 lcetl get Param {",
        "get param {service}.nrs delay max例如，在 ost io 服务上读取最大延迟设置 :413\nLustre 文件系统操作手册 译者:这ay1 $ lctl get param ost.OSS.ost_io.nrs delay max2 ost.OSS.ost_io.nrs delay max=reg delay max: 3003 hp delay max:300设置 RPC ASA eK WEI :1 lctl set_ param {service}.nrs delay max=0-65535DORA Hy UAL ey SEZ RPC 设置给定服务的最大延迟时间。例如，要将 ost_io 服务的最大延色时间设置为60，请运行:1 $ Ictl set Param ost.OSS.ost_io.nrs delay max=-602 ost.OSS.ost_io.nrs delay max=60对于文持高优先级RPC 的 PHRPC IRA, AAA ea SCAR RPC 设置不同的最大延迟时间:1 ， Jctl set Param {service}.nrs delay max=reg delay max|hp delay max:0-65535例如，在 ost_io 服务上将高优先级RPC 的最大延玉时间设置为 30:1 $ Ictl set Param ost.OSS.ost_io.nrs delay max=hp delay max:302 ost.OSS.ost_io.nrs delay max=hp delay max: 30请注意，在任何情况下最长延玉时间都不能小于了最短延迟时间。* {service}.nrs delay pct{service}.nrs_delay_pct 用于控制会被此延迟政策推迟的请求的百分比。默认值是 100。请注意，如果某一请求没有被延迟策略选中并推迟处理请求，该请求将由该服务定义的回退策略来处理。如果没有和定义其他回退策略，则该请求由FIFO 策略处理。读取此值请运行:1 ， Jctl get param {service}.nrs delay pct在 ost_io 服务上读取被延玉的请求的百分比，请运行:1 $ lctl get",
        "上的单个文件大小最大为 16 TiB。在 64 位系统上，这个限制不存在。因此，如采后备文件系统可以文持足够大的对象或者文件很稀蕊，则文件大小可以是2 * 63位 〈8EiB)。单个文件最多可以有 2000 个条市，这使得 64 位 ldiskfs 系统的单个文件能达到 31.25 PiB。的容量文件中可存储的实际数据量取决于文件条市化所在的 OST 中的可用空间量。Lustre 软件使用 ldiskfs 哈希目录代码，依赖于文件名长度，一个目录下最多能包含大约一千万个文件。子目录与闻规文件相同。(在 Lustre 2.8中引入) ，注意从 Lustre2.8 开始，可通过1fs mkdir -c命令将多个 MDTS 上的单个目录条带化来突破此限制，使用多少目录条市数则该最大文件或子目录数量就可以增加多少倍。Lustre55\nLustre 文件系统操作手册详这aX名称 值文件系统上 40 亿/MDT最大文件数 (ldiskfs)，量 256 万亿/MDT(ZFS)最长文件名 255 bytes最长路径名 4096 bytesLustre 文 无限制件系统上当前打开的文件最大数量注意描述文件系统已测试了单个目录下 1000 万个文件。Idiskfs 文件系统的上限为 40 亿个 inodes。默认情况下，MDT 文件系统为每个 node 格式化 2KB空间，即每1TiB MDT 空间有 5.12 亿个 inode。这可以在MDT 文件系统创建时进行初始化。ZFS OVE RANT ACA S| Rk, FE MDT 空间LATER SITAR. ES RG RARE大约 4KiB 的镜像空间，具体取决于配置。每个附加的 MDT 都可容纳上述最大数量的附加文件，这取雇于文件系统中的可用空间以及分布目录和文件。包括底层文件系统在内，单个文件名的最大限制W255 Fo受 Linux VFS 限制，最长路径名为 4096 字HeWoLustre 软件对打开的文件数量疫有限制，但实际上，它还是受制于于 MDS 上的内存大小。MDS 上没有所谓当前打开文件的\" SUR\",为它们只与给定客户端的接口相链接。每个客户端进程最多能打开几王个文件，这取决于它的ulimit。默认情况下，ldiskfs",
        "delay min{service}.nrs_delay_min 用于控制请求被此策略延迟的最短时间量 CLARA单位) 。默认值是 5 秒。读取此值运行:1 lcetl get Param {service}.nrs delay min例如，在 ost io 服务上读取最小延迟设置 :1 $ lct]l get Param ost.OSS.ost_io.nrs delay min2 ost.OSS.ost_io.nrs delay min=reg delay min:53 hp delay min:5设置 RPC 处理的最小延玉 :1 lctl set param {service}.nrs delay min=0-65535RORY tis DLA ie (EIEAR RPC 设置给定服务的最小延迟时间。例如，要将 ost_io 服务的最小延迟时间设置为 10，请运行:1 $ Ictl set Param ost.OSS.ost_io.nrs delay mir=102 ost.OSS.ost_io.nrs delay min=-10对于文持高优先级RPC 的 PHURPC 服务，可为前规和高优先级RPC 设置不同的最小延迟时间 :1 ， Jctl set param {service}.nrs delay min=reg delay min|hp delay min:0-65535例如，在 ost_io 服务上将高优先级 RPC 的最小延迟时间设置为3:1 $ Ictl set Param ost.OSS.ost_io.nrs delay min=hp delay min:32 ost.OSS.ost_io.nrs delay min=hp delay min:3请注意，在任何情况下最小延玉时间都不能超过最大延玉时间。* {service}.nrs delay max{service} .nrs_delay_max 用于控制请求被此策略延迟的最长时间量〈以秒为单位) 。默认值是 300 秒。读取此值运行:1 lctl get param {service}.nrs delay max例如，在 ost io 服务上读取最大延迟设置 :413\nLustre 文件系统操作手册 译者:这ay1 $ lctl get param",
        ".ost_io.nrs tbf rule=\\\"start lozone_userl opcode={ost_read ost write} rate=200 rank=computes\"在这个例子中，规则\"iozone_userl\" 被添加至规则\"computes\" 之前，顺序如下 :$ lctl get_param ost.OSS.ost_io.nrs tbf ruleost.OSS.ost_io.nrs tbf rule=regular requests:CPT 0:userl jobid=-{iozone.500 dd.500} 100, ref 0iozone_userl opcode={ost_read ost write} 200, ref 0computes nid-{192.168.1.[2-128]@tcp} 500, ref 0default * 10000, ref 0CPT 1:userl jobid=-{iozone.500 dd.500} 100, ref 0iozone_userl opcode={ost_read ost write} 200, ref 0computes nid-{192.168.1.[2-128]@tcp} 500, ref 0default * 10000, ref 0high priority requests:CPT 0:userl jobid=-{iozone.500 dd.500} 100, ref 0iozone_userl opcode={ost_read ost write} 200, ref 0411\n1Oo192021222324—N—NLustre 文件系统操作手册 译者:这aycomputes nid-{192.168.1.[2-128]@tcp} 500, ref 0default * 10000, ref 0CPT 1:userl jobid=-{iozone.500 dd.500} 100, ref 0iozone_userl opcode={ost_read ost write} 200, ref 0computes nid-{192.168.1.[2-128]@tcp} 500, ref 0default * 10000, ref 0“拥塞下的TBF 实时策略在评估 TBF 期间，我们发现当所有类的 IO 市寓需求总和超过系统容量时，有具有相同速率限制的类获得的带宽要比预先均衡配置所获得得带宽要少。造成这种情况的原因是拥塞服务釉上的索重负载会导致某些类错过最后期限。在出列时，令牌的数量可能于 1。",
        "--mkfsoptions=\"-i $((8192 *1024))\" …注意使用 ldiskfs 格式化的 OST 不能超过最多 3.2 (LPR. 401 ESI. AKAOST 指定一个非彰小的 inode ratio，因而导致索引节点总数超出最大值，将导致过早地出现空间超限错误，OST 空间不能被完全使用，浪费空间，使 e2fsck 速度变慢。因此，请选择默认的 inode ratio，以确保索引和点的总数仍然低于这个限制。OST 文件系统检查时间受到包括索引和点数量在内等一系列变量的影响，如文件系统的大小、分配的块数量、分配块在磁盘上的分布、磁玛速度、CPU GREE. AR ae EA内存数量。对于正靖运行的文件系统，合理的文件系统检查时间大概在每 TiB 5-30 分钟左右，但如果检测到大量错误并需要修正，时间则会显若增加。53\nLustre 文件系统操作手册译者:这ay5.4. 文件和文件系统的极限值下表描述了当前已知 Lustre 相关了最大指标值。这些值受限于 Lustre 体系结构、Linux虚拟文件系统 (VFS) 或虚拟内存子系统。其中少数值是在代码中定义的，通过重新编译Lustre 软件可以进行更改。可利用以下例子中这些极限值测试 Lustre 软件。名称最大 MDTs数量最大 OSTs数量最大 OST大小最大客户器数量最大单个文件系统大小最大条人带数值2308150512TiB(Idiskfs),512TiB (ZFS)131072至少 1EiB2000描述一个MDS 可以承载多个MDT，每个MDT 可以是一个单独的文件系统。最多可以将 255 个MDTs 添加到文件系统，并使用 DNE 远程或条带目录将其附加到名称空间中。OST 的最大数量是一个可以在编译时改变的浓量。Lustre 文件系统已经测试了多达 4000 个 OSTs.ZB OST 文件系统可以配置在单个 OSS Fi AE.这不是一个硬性限制。也可以配置更大的 OST，但是大多数生产系统通常不会超过该限制，为 Lustre 可以通过增加视外的 OSTs 来提升容量和人性能以及I/0 总体性能，尽量减少竞争并多许并行恢复 〈e2fsck Bk scrub) .对于 32 位内核，由于页面缓存限制，",
        "可以通过增加视外的 OSTs 来提升容量和人性能以及I/0 总体性能，尽量减少竞争并多许并行恢复 〈e2fsck Bk scrub) .对于 32 位内核，由于页面缓存限制，最大块设备大小为 16TB ，这个大小也适用于 OST。强烈建议使用 64 位内核运行 Lustre 客户端和服务需。客户端的最大数量是一个可以在编译时改变的种量。在生产环境中使用了高达 30000 个客户端。每个 OST 可将其文件系统配置成最大 OST 大小，并且可将所允许的最大数量的 OSTs 组合成单个文件系统。该值受存储在磁盘上并以RPC 请求形式发送的布局信息大小限制，但这不是协议中的硬性限制。文件系统中的 OST 数量可以超过条带数量，单个54\nLustre 文件系统操作手册这ay名称 值最大条市大 <4GiB小By/)SitrK 64 KiB小最大单个对“16TiB象大小 (Idiskfs),256TiB (ZFS)最大文件大 16TiB (32小 位系统) 31.25PiB(64 位Idiskfs 系统)，8EiB (64 位ZFS 系统)单个目录下 1000 万个文件最大文件或 (Idiskfs), 2°48子目录效量 个文件 (ZFS)描述文件条带化的 OST 数量将受限于此。在移动到下一个对象前写入到每个对象的数据量。由于在某些 64 位机器 (如 ARM 和POWER) 上的 64 KiBPAGE SIZE 限制，最小条市大小被设置为 64KiB。这样单个页面就不会被拆分到多个服务硕上即可以存储在单个对象中的数据量。一个对象对应一个条带。ldiskfs 的限制为 16 TB, we AA TA个对象。对于 ZFS，该限制来目于底层 OST 的大小。文件最多可以包含 2000 个条带，每个条带可达到的最大对象大小。SARA EF KBR, FE 32 位系统上的单个文件大小最大为 16 TiB。在 64 位系统上，这个限制不存在。因此，如采后备文件系统可以文持足够大的对象或者文件很稀蕊，则文件大小可以是2 * 63位",
        "读取此值请运行:1 ， Jctl get param {service}.nrs delay pct在 ost_io 服务上读取被延玉的请求的百分比，请运行:1 $ lctl get_param ost.OSS.ost_io.nrs delay pct2 ost.OSS.ost_io.nrs delay pct=reg delay pct:1003 hp delay pcet:100设置延迟请求的百分比:1 ， Jctl set param {service}.nrs delay pct=0-100DOR AT UAT a CICA RPC 13 29 KE ARS AY TR EDS AY EEON, BOR ost io ARS AYIA R WEIS AY A ar ELS 50, iae{T:414\n%ty这Lustre 文件系统操作手册ay1 $ Ictl set param ost.OSS.ost_io.nrs delay pct=502 ost.OSS.ost_io.nrs delay pct=50对于支持高优先级RPC 的 PURPC 服务，可为常规和高优先级RPC 设置不同的请求延迟的百分比:1 lctl set Param {service}.nrs delay pct=reg delay pct|hp delay pct:0-100例如，在 ost_io 服务上将高优先级RPC 的请求延迟的百分比设置为 S:1 $ lctl set_param ost.OSS.ost_io.nrs delay pct=hp delay pct:52 ost.OSS.ost_io.nrs delay pct=hp delay pct:534.7. FCB VO 可调参数无锁 IO 可调特性允许服务硕请求洛户端执行无锁 IO 〈服务磺代表客户端进行锁定) 以避免争用文件的 ping-pong 锁定。FH VO 补丁引入了这些可调参数:。 OST-side:ldlm.namespaces.filter-fsname-*.contended locks一如果超出conardqedq locks指定的授权等竺队列扫描中的锁冲突数量，则认为该资源为争用资源。contention seconds一该资源保持争用状态时长。max nolock bytes 一服务锅锁定小于max_ nolock",
        "超出conardqedq locks指定的授权等竺队列扫描中的锁冲突数量，则认为该资源为争用资源。contention seconds一该资源保持争用状态时长。max nolock bytes 一服务锅锁定小于max_ nolock pytes的块设置的请求。如果此值被设置为零，则禁止服务器端锁定读取/写入请求。。 Client-side:/proc/fs/lustre/llite/lustre-*contention seconds— llite WAHicf#F H+ ARSWATK.。 Client-side statistics:TCH VO 统计信息将会被记录在 /proc/fs/lustre/llite/lustre-*/stats文件中。lockless read bytes 和lockless write bytes一计算读取或写入的总字AY, WRG RAY) Fmin_nolock size，则客户端不会与服务咒通信，也不会获取客户端的锁定。(在Lustre 2.9 中引入)415\n—Lustre 文件系统操作手册这ay34.8. 服务器端建议和提示34.8.1. 概述使用1fs ladqvise命令为服务需提供有关文件访问的建议和提示。lfs ladvise [--advice|-a ADVICE ][--start|-s START[kKMGT] ]{ [--end|-e END[kMGT] ]_ |file ...-a,--advice= ADVICE-b ,--background-S ,-~Start= START OFFSET-e ,--end= END OFFSET-l1 ,--length= LENGTH-m ,--mode= MODE[--background|-b][--length|-1 LENGTH[kMGT] ] }说明提供ADVICE类型的建议或提示。RADVICE类型包括:willread一将数据预先导入服务器缓存;qontneed一清除服务需绥存;lockahead一在给定字贡范围内请求给定模式的LDLM 范围锁;noexpPandq禁止对此文件描述符的 IO 的范围锁扩-展行为。允许建议的发送和处理异步。文件范围起始于 START_ OFFSET.文件范围终止于 〈不包括) END_OFESET。该选项不能与1 选项同时指定。文件范围长度为 LENGTH。该选项不能与-e同时指定。Lockahead 请求模式{TREAD, WRITE} 。请求一个该模式下的锁。"
    ]
}