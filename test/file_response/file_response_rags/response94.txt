{
    "query": "在 Lustre 文件系统中，reserved_mb_low和reserved_mb_high参数的作用是什么？如何通过这两个参数优化 OST 的空间分配策略？",
    "summaries": [
        "本文档介绍了Lustre文件系统格式化选项的设置方法。默认情况下，mkfs.lustre工具会应用一些优化选项，如flex_bg、huge_file和lazy_journal_init，以提高性能和可扩展性。对于MDT和OST，需根据实际需求调整inode ratio，以平衡索引节点数量和存储空间。在MDT中，默认inode ratio为2048，而OST的默认值根据大小不同而变化。若应用程序有特定的文件大小分布，可通过调整inode ratio来优化性能。此外，还可以通过参数指定OST对象的平均大小，以减少文件系统开销和检查时间。",
        "Lustre 2.11 引入了 MDT 的 Lazy 大小 (LSoM) 功能，用于在 MDS 上存储文件大小信息，以减少客户端访问多个 OST 获取文件大小的开销。LSoM 数据可能不准确，但能提升性能。用户可通过 `lfs getsom` 命令查看 LSoM 数据，并通过 `lfs som_sync` 同步数据。LSoM 适用于策略引擎等场景，可加快文件大小获取速度。此外，Lustre 2.11 还引入了文件级冗余 (FLR)，允许将文件数据存储在多个 OST 上，提高系统容错性和读取性能。FLR 通过延迟写入实现，主镜像更新后，其他镜像需手动同步。",
        "Lustre文件系统中，MDT根据OST的可用空间和空闲inode数量决定是否分配对象。当可用空间低于保留空间或空闲inode少于32个时，MDT停止分配；当可用空间达到保留空间的两倍且空闲inode超过64个时，重新开始分配。客户端可始终追加写入现有文件。保留空间默认为OST总容量的0.1%，可通过参数调整。此外，Lustre支持循环分配和加权分配两种条带分配方式，根据OST间空闲空间差异切换。QoS参数如qos_threshold_rr和qos_prio_free用于控制分配策略和权重。nosquash_nids参数用于指定不适用Root Squash的客户端列表。"
    ],
    "contents": [
        "的 Lustre 文件布局、ACL、用户和系统扩展属性、SELinux 和其他安全标签、其他内部元数据、DoM 数据等。但如果不需要这些功能，也不需要其他的 in-inode xattrs，则更大的索引节点大小将会损害元数据性能，52\nLustre 文件系统操作手册 译者:这ay因为每个MDT 2e5[ HAYS ASS A 2 倍、4 倍甚至 8 倍的数据。S.3.2 为ldiskfs OST 设置格式化选项在格式化一个OST 文件系统时，应把本地文件系统的使用情况考虑进去，例如通过在当前文件系统上运行af和aqf -ii来分别获取已用字节和已用索引市点，然后计算平均的 bytes-per-inode 值。在为新系统指定 bytes-per-inode(inode ratio) 时，尽量减少每个OST 的索引布点数量，同时保留足够的空间以满足将来使用时可能出现的变化。这有助于减少格式化和文件系统检查时间，并为数据提供更多空间。下表列出了在格式化时用于不同大小 OSTs 的默认 inode ratio 值。LUN/OST 大小”默认 Inode ratio 总 inodes 大小10GiB 以下 1 inode/16KiB 640 - 655k10GiB - 1TiB 1 inode/68KiB 153k - 15.7M1TiB - 8TiB 1 inode/256KiB ”4.2M - 33.6M8TiB 以上 1 inode/1MiB 8.4M - 268M在只有极少量的小文件的环境中，相对于该平均文件大小来说，默认的 inode ratio将可能导致过多的索引节扣。在这种情况下，可以通过增加 bytes-per-inode 的数量来提高性能。设置 inode ratio，请使用--mkfsoptions=\"-1i bytes-per-inode\"传参至mkfs.lustre 来指定 OST 对象的期望平均大小。例如，创建一个预期平均对象大小为8MiB 的OST:[oss #] mkfs.lustre --ost --mkfsoptions=\"-i $((8192 *1024))\" …注意使用 ldiskfs 格式化的 OST 不能超过最多 3.2 (LPR. 401 ESI. AKAOST 指定一个非彰",
        "inode少于32个，MDT就会停止在该OST上分配对象。当可用空间是保留空间的两舍，并且OST有超过64个空闲节点时，MDT又开始在该OST上分配对象。注意，无论对象分配状态如何，客户端都可以追加写入现有文件。每个ODST的保留空间可以通过改变该参数来调整。默认是OST总容量的0.1%。17.2 设置方法将所有MDT的 osp.{{ fsname }}-*.reserved mb low 设置为 {{ reserved }} ，单位为MiB。将所有MDT的 ospb.{{ filesystem.fsname }}-*.reserved mb low\"设置为 {{ reserved ) ，单位为MiB。18. reserved_mb_high: 设置在OST可用空间高于何阅值时，开始对象分配。18.1 简介本参数用来设置在O0ST可用空间高于何阔值时，开始对象分配。如果可用空间大于高阐值时，该参数控制启动对象分配。默认是0OST总容量的0.2% 。为了优化文件系统的性能，MDT基于两种分配算法将文件条带分配给OSTs。循环分配器优先考虑位置 RPO散到各OSs中以提高网络带宽利用率) ，加权分配器优先考虑可用空间 (平衡各OST的负载) 。这两种算法综合虑了OST间带宽和可用空间的平衡，两者的冰值和加权系数可以由用户调整。MDT为每个DOST保留0.1%的总OST空间和32个inodes。如果可用空间少于此保留空间，或者OST的空闲inode少于32个，MDT就会停止在该OST上分配对象。当可用空间是保留空间的两舍，并且OST有超过64个空闲节点时，MDT又开始在该OST上分配对象。注意，无论对象分配状态如何，客户端都可以追加写入现有文件。18.2 设置方法将所有MDT的 ospb.{{ fsname }}-*.reserved mb high 设置为 {{ reserved }} ，单位为MiB。将所有MGS的 osp.{{ filesystem.fsname }}-*.reserved mb high 设置为 {{ reserved }} ，单位为MiB,作者: 3% 更新时间: 2023年6月7日\nLustre 可调参数全解19.",
        "估计较为保守 〈10GiB 的 OSTs 上每个对象 64KiB，16TiB 或更大的 OSTs 上每个对象 1MiB)。如果您确信应用程序的文件平均大小与此不同，您可以指定不同的文件平均大小〈给定 OST 大小下索引节氮的总数) ，以减少文件系统开销，并最小化文件系统检查时间。5.3. 设置 ldiskfs 文件系统格式化选项默认情况下，mkfs.lustre 工具将这些选项应用于存储数据和元数据的 Lustre 文件系统，以提高 Lustre 文件系统性能和可扩展性。这些选项包括:* flex bg --- Jffaflexible-block-groupstytt, 2 SAMRAT RANE图将聚集在一起，以便在读取或写入位图时尽量减少寻道操作，并在典型的RAID存储 (1 MiB RAID 条再宽度) 上减少谈、写、修改操作。OST 和 MDT 文件系统51\nLustre 文件系统操作手册 译者:As大上都局用了该标志。在MDT 文件系统中，flex_bg 被设置为默认值 16。在 OST中，flex_bg 被设置为 236，使得单个 flex_bg 中所有的块或索引和氮位图可在单个1MiB IO 中完成读写。1MiB I/O 对于 RAID 存储具有典型性。。huge_file---设置此标志以允许OST 上的文件大于2TiB。。1azy_journal_init --- 这个扩展选项可避免完全禾盖并清零 Lustre 文件系统中默认分配的大型日志 COST 中高达 400 MiB, MDT 中高达 4GiB)，从而减少了格式化时间。我们可通过癌 mkfs.lustre YS BORG AS TCE IS oe a PARC,的格式化选项:--mkfsoptions='backing fs options'5.3.1 为 ldiskfs MDT 设置格式化选项MDT 上的索引节点数量是由格式化时要创建的文件系统总大小雇定的。ldiskfsMDT 的默认的每和点字币数比率 (\"inode ratio\") 为每个索引和点占用 2048 SATAY件系统空间。此默认值也是最优值，建议不要更改。这个设置考虑了 ldiskfs 文件系统层元数据所需要的额外空间，比如日志〈最多 4GB)、位图",
        "均衡程度决定的。当空朵空间在各OST之间相对均衡时，融会使用速更快的循环分配器，尼能最大限度地实现网络性能的平衡。当任何两个0ST的失衡程度超过指定的半值 〈(黑认为17%) 时，则使用加权分配器。这两种分配方法的阀值由本参数定义。19.2 设置方法将所有MDT的 1od.{{ service name }}-mdtlov.gos threshold rriRHW {{ percent }}，单位为百分cE.将所有MGS的 lod. {{ filesystem.fsname }}-mdtlov.qgos _ threshold_rr 设置为 {{ percent }} ，单位为百分比。20. qos_prio free: 设置加权分配器基于空间空间的加权因子20.1 简介本参数用来设置加权分配器基于空间空间的加权因子。该参数控制加权分配器使用的加权优先级。增加 gos_prio_free 的值，可以增加基于可用空间的权重，而减少将条带分散到更多OST上的权重。这两者都很重要，因为前者可以让可用空间最终趋于平衡，而后者能让众多OST的聚合带宽能得到充分利用，而两者又彼此冲突，因此需要控制权重。该参数默认值是91 (%) 。当空闲空间优先级被设置为100 (%) 时，权重完全基于空闲空间，而不再考虑将条带分散到更多OST上。作者: 李希 更新时间: 2023年6月7日\nLustre 可调参数全解32. nosquash_nids: 设置不适用Root squash的客户端列表32.1 简介本参数用来设置设置不适用Root Squash的客户端列表。该参数指定了不适用Root Squash的客户端集合，采用的语法为LNet NID区段语法。例如: 172.16.245.[0-255/2]etcp 。该例含义为，Root Squash不适用于TCP子网 172.16.245.0 上的部分客户端，这些客户端的I|P地址的最后一个组成部分是偶数。如果nosquash_nids值由几个NID区段组成 (例如 o@elan, 1@elani) ，NID区段的列表必须用单引号或双引号引出。列表元素必须用空格隔开。例如: '192.168.1.1etcpl",
        "仍可以使用默认的 DoM 布局在现有目录中创建。(Lustre 2.11 中引入)第二十一章 MDT 的 Lazy 大小功能 (LSoM)21.1. 简介在 Lustre 文件系统中，MDS 上存储着 ctitme、mtime、所有者和其他文件属性。OSS上则存储着每个文件使用的块的大小和数量。要获得正确的文件大小，客户端必须访问存储文件的每个 OST，这意味着当一个文件在多个 OST 上分条时，需要使用多个 RPC来获取文件的大小和块。MDT 上的 Lazy 大小 (LSoM) 功能将文件的大小存储在 MDS上，如果应用程序能接受获取的文件大小不精准，则可以避免访问多个 OST 以获取文件大小。Lazy 意味着不能保证存储在 MDS 上的属性的准确性。由于许多 Lustre 安装环境都使用固态硬盘作为 MDT，因此 LSoM 的目标是通过将数据存储在 MDT 上来加快从 Lustre 文件系统获取文件大小所需的时间。我们和希望Lustre 策略引擎初始使用这一功能，以扫描后端 MDT 存储，或根据不同的大小做出诀策，且不依赖于完全准确的文件大小。类似的例子还包括 Lester, Robinhood, Zester 和供应商提供的许多工具。未来将改进为允许通过1fs finq等工具访问 LSoM 数据。21.2. 启动 LSoM当使用策略引擎扫搞 MDT fa SEN, LSoM 始终处于局用状态，不需要做任何操作来启用获取 LSoM 数据的功能。通过1fs getsom命令也可以访问客户端上的LSoM 数据。因为当前在客户端上通过 xattr 接口访问 LSoM 数据，所以只要缓存了索引251\nLustre 文件系统操作手册 译者: 李硕Tid, xattr_cache 就会在客户端上绥存文件大小和块计数。在大多数情况下，这是可行的，因为它改善了对 LSoM 数据的访问频率。但是，这也意味着，如果在首次访问 xattr后文件大小发生了变化，或者在首次创建文件后不久访问 xattr，LSoM 数据可能会过时。如果需要访问过时的最近 LSoM 数据，可以在客户端通过1ct1 set_param1dlm.namespaces.xmqdqcx.1LIru size=clear取消MDC 锁定，刷新",
        "每个索引和点占用 2048 SATAY件系统空间。此默认值也是最优值，建议不要更改。这个设置考虑了 ldiskfs 文件系统层元数据所需要的额外空间，比如日志〈最多 4GB)、位图和目录、Lustre 用来保持集群内部一致性的文件。此外还有额外的单文件的元数据，比如含大量条带的文件的布局信息、访问控制列表 (ACL)、用户扩展属性。(在Lustre2.11 中引入) 从 Lustre 2.11 开始引入了 MDT 上的数据 (DoM) 特性 ，该特性允许在 MDT 上存储小文件，以利用高性能闪存存储，并减少空间和网络开销。如果您打算将 DoM 特性与 ldiskfs MDT 一起使用，建议增加 bytes/inode ratio，从而在 MDT上为小文件留出足够的空间，如下所述。当 Idiskfs MDT 第一次格式化时，通过在 mkfs.lustre 添加--mkfsoptions=\"一-per-inodqe\"人选项，可设置比建议的 2048 字市更小的保留空间。减小 inode ratio 可为固定大小的MDT 创建更多的索引布点，但是留下的额外的文件元数据空间则变少。inode ratio 必须始终大于 MDT inode 的大小〈默认为 1024 字节) ，建议使用比索引布点大小至少还大 1024 FAY inode ratio，以确保 MDT 空间不会被耗尽。对于 DoM，建议增加 inode ratio，为最币见的文件数据提供足够的空间 (例如，对于广泛使用的 4KB 或64KB 文件，则 inode ratio 为 S120 或 65560 字节)。通过添加--stripe-count-hint=N使 mkfs.lustre 根据文件系统使用的默认条市数来和目动计算合理的索引市氮大小，或直接设置--mkfsoptions =\"-1inode-size\"选项 可在格式化时改变索引市点大小。增加索引布点大小意味着索引节点可提供更大的空间，以便于存储于更大的 Lustre 文件布局、ACL、用户和系统扩展属性、SELinux 和其他安全标签、其他内部元数据、DoM 数据等。但如果不需要这些功能，也不需要其他的 in-inode xattrs",
        "创建文件后不久访问 xattr，LSoM 数据可能会过时。如果需要访问过时的最近 LSoM 数据，可以在客户端通过1ct1 set_param1dlm.namespaces.xmqdqcx.1LIru size=clear取消MDC 锁定，刷新 xattr 2. A则，如果在 LDLM 锁定超时前未访问文件，则将从客户端缓存中删除文件属性。通过LIct1l get param 1ldlm.namespaces.*mdc*.lru_max_ age储存锁定超时时长如果从特定客户端 (如 HSM 代理节点) 重复访问最近创建或频繁修改的文件的LSoM 属性，则可以使用lctl set param llite.*.xattr_ cache=0来禁用客户wi LAY xattr 缓存。但这可能会导致在访问文件时的额外开销，一般不建议使用。21.3. 用户命令Lustre 提供了1fs getsom命令以显示存储在 MDT 上的文件属性。11som_sync命令人允许用户将MDT 上的文件属性与 OSTs 上的有效或最新数据同步。可以在具有 Lustre 文件系统载入点的客户端上调用11som_sync命令。该命令使用Lustre MDS 变更日志，因此必须注册变更日志用户才能使用此命令工具。21.3.1 使用Lfs getsom显示 LSoM 数据lis getsom命令列出了存储在 MDT 上的文件属性。调用该命令需使用 Lustre 文件系统上文件的完整路径和文件名。如果没有使用选项，则存储在 MDS 上的所有文件属性都将显示出来。21.3.2 lfs getsom 命令1 1fs getsom [-s] [-b] [-f] <filename下面列出了各种 岂 getsom 选项。选项 说明-s ，仅显示给定文件的LSoM 数据的大小值。这是一个可选标志-pb ， 仅显示给定文件的LSoM 数据的块值。这是一个可选标志-£ ， 仅显示给定文件的 LSoM 数据的标志值。这是一个可选标志。有效的标志值有: SOM_FL_ UNKNOWN = 0x0000 ，表示未知或没有 SoM 数据，必须从 OSTS 获取大小; SOM _FL STRICT = 0x0001，表示已知且严格正确",
        "标志值有: SOM_FL_ UNKNOWN = 0x0000 ，表示未知或没有 SoM 数据，必须从 OSTS 获取大小; SOM _FL STRICT = 0x0001，表示已知且严格正确，252\nLustre 文件系统操作手册这aX选项”说明FLR 文件 (SOM 保证) ; SOM_FL_DEISE = 0x0002，表示已知但已过时，即在过去的某个时间点是正确的，但现在已知 (或可能) 不正确 (例如，打开进行写入); SOM_FL_LAZY = 0x0004，表示近似值，可能从未严格正确过，需要同步 SOM 数据以实现最终的一致性。第二十二章文件级元余 (ELR)22.1. 概述Lustre 文件系统最初就是为 HPC 而设计的，筷一直在具备内部元余性和容销性的高端存储上运行归好。然而，尽管这些存储系统的成本昂贵、结构复杀，存储必障仍然时有发生。事实上，在 Lustre 2.11 RA ZH, Lustre 文件系统并不比其底层的单个存储AUR ae LE EAT SE. Lustre 文件系统并没有机制能够缓解硬件存储改隐。当服务融无法访问或终止服务时，将无法访问文件。Lustre 2.11 中引入了 Lustre 文件级元余 (FLR) 功能，任何 Lustre 文件都可将相同的数据存储在多台 OST 上，以提升系统在存储故障或其它故障发生时的稳健性。在存在多个针像的情况下，可选择最合适的镜像来啊应单个请求，这对 IO 可用性有直接影啊。此外，对于许多客户闯同时读取的文件〈如输入版，共孚库或可执行文件)，可以通过创建文件数据的多个镜像来提高单个文件的并行聚合读取性能。第一阶段的FLR 功能通过延迟写入实现〈如\"图 21.1 FLR EIR GA\" 所示)。在写入镜像文件时，只有一个主镜像或首选镜像在写入过程中直接更新，而其他镜像将被标记为stale。通过使用命令行工具《由用户或管理员直接运行或通过目动监控工具运行)同步各镜像之间同步，该文件可在随后再次写入其它镜像。Object j (primary, preferred)delayed resync图 25: FLR delay writting图",
        "}}-*.reserved mb high 设置为 {{ reserved }} ，单位为MiB,作者: 3% 更新时间: 2023年6月7日\nLustre 可调参数全解19. qos threshold_rr: 设置数据对象分配方法切换时的空有空间差异冰值19.1 简介本参数用来设置ODST间的空闲空间差异高于何阔值时，数据对象分配方法从轮循分配方法切换到基于空闲空间的加权分配方法。Lustre使用两种条党分配方法:e 循环分配器。当OST有大致相同的可用空间时，循环分配器在不同的099上的OST之间交替进行条融分配，所以每个文件的条带0在DOST之间平均分配，而不考虑条带数。举个简单的例子，有8个编号-7的OST，则对象将如下分配:文件1: OST1, OST2, OST3, OST4文件2: OST5, OST6, OST7文件3: OSTO, OST1, OST2, OST3, OST4, OSTS文件4: OST6, OST7, OSTO下面是几个更多的循环条带顺序分配的例子 (每个字母代表单一0SS上的不同OST) :3: AAA 一个3-OST OSS3x3: ABABAB ”两个 3-OST OSS3x4: BBABABA —~* 3-OST OSS (A) 和一个4-OST OSS (B) 。3x5: BBABBABA ”一个 3-OST OSS (A) 和一个5-OST OSS (B) 。3x3x3: ABCABCABC 三个 3-OST OSSe 加权分配器。当OST之间的空闲空间差异变得很大时，分配器使用加权算法基于容量 (每个OST上可用的空ASS) AWS (分条需尽量在OST间均匀分布) 来进行OST排序。加权随机算法会以更大的概率选中较空的O0ST，但不一定每次都选择空亲空间最大的OST。分配方法究竟是使用循环分配算法还是加权随机算法，是由OST上空闲空间的均衡程度决定的。当空朵空间在各OST之间相对均衡时，融会使用速更快的循环分配器，尼能最大限度地实现网络性能的平衡。当任何两个0ST的失衡程度超过指定的半值 〈(黑"
    ]
}